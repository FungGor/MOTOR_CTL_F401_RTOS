
MOTOR_CTL_F401_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009268  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f8  08009408  08009408  00019408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009800  08009800  0002060c  2**0
                  CONTENTS
  4 .ARM          00000008  08009800  08009800  00019800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009808  08009808  0002060c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009808  08009808  00019808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800980c  0800980c  0001980c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000060c  20000000  08009810  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000049f0  20000610  08009e1c  00020610  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20005000  08009e1c  00025000  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002060c  2**0
                  CONTENTS, READONLY
 12 .debug_line   0004901c  00000000  00000000  0002063c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   00052a54  00000000  00000000  00069658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00009b21  00000000  00000000  000bc0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f70  00000000  00000000  000c5bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000b5790  00000000  00000000  000c7b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00004cd8  00000000  00000000  0017d2d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024965  00000000  00000000  00181fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a690d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005dc8  00000000  00000000  001a6960  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0002658d  00000000  00000000  001ac728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000610 	.word	0x20000610
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080093f0 	.word	0x080093f0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000614 	.word	0x20000614
 80001dc:	080093f0 	.word	0x080093f0

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80004e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800051c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80004e8:	480d      	ldr	r0, [pc, #52]	; (8000520 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80004ea:	490e      	ldr	r1, [pc, #56]	; (8000524 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80004ec:	4a0e      	ldr	r2, [pc, #56]	; (8000528 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80004ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004f0:	e002      	b.n	80004f8 <LoopCopyDataInit>

080004f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004f6:	3304      	adds	r3, #4

080004f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004fc:	d3f9      	bcc.n	80004f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004fe:	4a0b      	ldr	r2, [pc, #44]	; (800052c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000500:	4c0b      	ldr	r4, [pc, #44]	; (8000530 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000502:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000504:	e001      	b.n	800050a <LoopFillZerobss>

08000506 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000506:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000508:	3204      	adds	r2, #4

0800050a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800050a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800050c:	d3fb      	bcc.n	8000506 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800050e:	f002 fde7 	bl	80030e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000512:	f008 fe6f 	bl	80091f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000516:	f000 f88b 	bl	8000630 <main>
  bx  lr    
 800051a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800051c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000520:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000524:	2000060c 	.word	0x2000060c
  ldr r2, =_sidata
 8000528:	08009810 	.word	0x08009810
  ldr r2, =_sbss
 800052c:	20000610 	.word	0x20000610
  ldr r4, =_ebss
 8000530:	20005000 	.word	0x20005000

08000534 <BusFault_Handler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000534:	e7fe      	b.n	8000534 <BusFault_Handler>
	...

08000538 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000538:	4b04      	ldr	r3, [pc, #16]	; (800054c <vApplicationGetIdleTaskMemory+0x14>)
 800053a:	6003      	str	r3, [r0, #0]
{
 800053c:	b410      	push	{r4}
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800053e:	2380      	movs	r3, #128	; 0x80
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000540:	4c03      	ldr	r4, [pc, #12]	; (8000550 <vApplicationGetIdleTaskMemory+0x18>)
 8000542:	600c      	str	r4, [r1, #0]
  /* place for user code */
}
 8000544:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000548:	6013      	str	r3, [r2, #0]
}
 800054a:	4770      	bx	lr
 800054c:	2000082c 	.word	0x2000082c
 8000550:	2000062c 	.word	0x2000062c

08000554 <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000554:	4b05      	ldr	r3, [pc, #20]	; (800056c <vApplicationGetTimerTaskMemory+0x18>)
 8000556:	6003      	str	r3, [r0, #0]
{
 8000558:	b410      	push	{r4}
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 800055a:	f44f 7380 	mov.w	r3, #256	; 0x100
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800055e:	4c04      	ldr	r4, [pc, #16]	; (8000570 <vApplicationGetTimerTaskMemory+0x1c>)
 8000560:	600c      	str	r4, [r1, #0]
  /* place for user code */
}
 8000562:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000566:	6013      	str	r3, [r2, #0]
}
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	20000ce0 	.word	0x20000ce0
 8000570:	200008e0 	.word	0x200008e0
 8000574:	00000000 	.word	0x00000000

08000578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000578:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057a:	2300      	movs	r3, #0
{
 800057c:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057e:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8000582:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000586:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800058a:	e9cd 3304 	strd	r3, r3, [sp, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800058e:	4926      	ldr	r1, [pc, #152]	; (8000628 <SystemClock_Config+0xb0>)
 8000590:	9300      	str	r3, [sp, #0]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000592:	9306      	str	r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000594:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000596:	4a25      	ldr	r2, [pc, #148]	; (800062c <SystemClock_Config+0xb4>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000598:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 800059c:	6408      	str	r0, [r1, #64]	; 0x40
 800059e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80005a0:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 80005a4:	9100      	str	r1, [sp, #0]
 80005a6:	9900      	ldr	r1, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005a8:	9301      	str	r3, [sp, #4]
 80005aa:	6813      	ldr	r3, [r2, #0]
 80005ac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005b4:	6013      	str	r3, [r2, #0]
 80005b6:	6813      	ldr	r3, [r2, #0]
 80005b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005bc:	9301      	str	r3, [sp, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005be:	2001      	movs	r0, #1
 80005c0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80005c4:	e9cd 0108 	strd	r0, r1, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c8:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005ca:	2204      	movs	r2, #4
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005cc:	9801      	ldr	r0, [sp, #4]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLN = 84;
 80005d2:	2354      	movs	r3, #84	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d4:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005d6:	e9cd 410e 	strd	r4, r1, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 84;
 80005da:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005de:	e9cd 4212 	strd	r4, r2, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e2:	f003 f9a3 	bl	800392c <HAL_RCC_OscConfig>
 80005e6:	b108      	cbz	r0, 80005ec <SystemClock_Config+0x74>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005e8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005ea:	e7fe      	b.n	80005ea <SystemClock_Config+0x72>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ec:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 8000618 <SystemClock_Config+0xa0>
 80005f0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80005f4:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 8000620 <SystemClock_Config+0xa8>
 80005f8:	4603      	mov	r3, r0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005fa:	4621      	mov	r1, r4
 80005fc:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fe:	ed8d 7b04 	vstr	d7, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000602:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000604:	f003 fbb0 	bl	8003d68 <HAL_RCC_ClockConfig>
 8000608:	b108      	cbz	r0, 800060e <SystemClock_Config+0x96>
 800060a:	b672      	cpsid	i
  while (1)
 800060c:	e7fe      	b.n	800060c <SystemClock_Config+0x94>
  HAL_RCC_EnableCSS();
 800060e:	f003 fb71 	bl	8003cf4 <HAL_RCC_EnableCSS>
}
 8000612:	b014      	add	sp, #80	; 0x50
 8000614:	bd10      	pop	{r4, pc}
 8000616:	bf00      	nop
 8000618:	0000000f 	.word	0x0000000f
 800061c:	00000002 	.word	0x00000002
 8000620:	00000000 	.word	0x00000000
 8000624:	00001000 	.word	0x00001000
 8000628:	40023800 	.word	0x40023800
 800062c:	40007000 	.word	0x40007000

08000630 <main>:
{
 8000630:	b580      	push	{r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000632:	2400      	movs	r4, #0
{
 8000634:	b09c      	sub	sp, #112	; 0x70
  HAL_Init();
 8000636:	f002 fd5d 	bl	80030f4 <HAL_Init>
  SystemClock_Config();
 800063a:	f7ff ff9d 	bl	8000578 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063e:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
 8000642:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000646:	4bad      	ldr	r3, [pc, #692]	; (80008fc <main+0x2cc>)
 8000648:	9400      	str	r4, [sp, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064a:	9418      	str	r4, [sp, #96]	; 0x60
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800064c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800064e:	48ac      	ldr	r0, [pc, #688]	; (8000900 <main+0x2d0>)
  hadc1.Instance = ADC1;
 8000650:	4dac      	ldr	r5, [pc, #688]	; (8000904 <main+0x2d4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000652:	f042 0204 	orr.w	r2, r2, #4
 8000656:	631a      	str	r2, [r3, #48]	; 0x30
 8000658:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800065a:	f002 0204 	and.w	r2, r2, #4
 800065e:	9200      	str	r2, [sp, #0]
 8000660:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000662:	9401      	str	r4, [sp, #4]
 8000664:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000666:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800066a:	631a      	str	r2, [r3, #48]	; 0x30
 800066c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800066e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000672:	9201      	str	r2, [sp, #4]
 8000674:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000676:	9402      	str	r4, [sp, #8]
 8000678:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800067a:	f042 0201 	orr.w	r2, r2, #1
 800067e:	631a      	str	r2, [r3, #48]	; 0x30
 8000680:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000682:	f002 0201 	and.w	r2, r2, #1
 8000686:	9202      	str	r2, [sp, #8]
 8000688:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800068a:	9403      	str	r4, [sp, #12]
 800068c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800068e:	f042 0202 	orr.w	r2, r2, #2
 8000692:	631a      	str	r2, [r3, #48]	; 0x30
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800069a:	4622      	mov	r2, r4
 800069c:	2120      	movs	r1, #32
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800069e:	9303      	str	r3, [sp, #12]
 80006a0:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006a2:	f003 f915 	bl	80038d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80006a6:	4622      	mov	r2, r4
 80006a8:	4897      	ldr	r0, [pc, #604]	; (8000908 <main+0x2d8>)
 80006aa:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80006ae:	f003 f90f 	bl	80038d0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 80006b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006b6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 80006ba:	4894      	ldr	r0, [pc, #592]	; (800090c <main+0x2dc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006bc:	9416      	str	r4, [sp, #88]	; 0x58
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 80006be:	a914      	add	r1, sp, #80	; 0x50
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 80006c0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  GPIO_InitStruct.Pin = LD2_Pin;
 80006c4:	2600      	movs	r6, #0
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 80006c6:	f003 f811 	bl	80036ec <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 80006ca:	2700      	movs	r7, #0
 80006cc:	2220      	movs	r2, #32
 80006ce:	2301      	movs	r3, #1
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006d0:	488b      	ldr	r0, [pc, #556]	; (8000900 <main+0x2d0>)
 80006d2:	a914      	add	r1, sp, #80	; 0x50
  GPIO_InitStruct.Pin = LD2_Pin;
 80006d4:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80006d8:	e9cd 6716 	strd	r6, r7, [sp, #88]	; 0x58
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80006dc:	f04f 0820 	mov.w	r8, #32
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006e0:	f003 f804 	bl	80036ec <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80006e4:	2301      	movs	r3, #1
 80006e6:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ea:	4887      	ldr	r0, [pc, #540]	; (8000908 <main+0x2d8>)
 80006ec:	a914      	add	r1, sp, #80	; 0x50
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80006ee:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80006f2:	e9cd 6716 	strd	r6, r7, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f6:	f002 fff9 	bl	80036ec <HAL_GPIO_Init>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80006fa:	4642      	mov	r2, r8
 80006fc:	4621      	mov	r1, r4
 80006fe:	a814      	add	r0, sp, #80	; 0x50
 8000700:	f008 fdac 	bl	800925c <memset>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000704:	f8df c214 	ldr.w	ip, [pc, #532]	; 800091c <main+0x2ec>
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000708:	4a81      	ldr	r2, [pc, #516]	; (8000910 <main+0x2e0>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800070a:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800070c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000710:	e9c5 c300 	strd	ip, r3, [r5]
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000714:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000718:	60eb      	str	r3, [r5, #12]
  hadc1.Init.NbrOfConversion = 2;
 800071a:	2302      	movs	r3, #2
 800071c:	61eb      	str	r3, [r5, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800071e:	2300      	movs	r3, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000720:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
 8000724:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000728:	762c      	strb	r4, [r5, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800072a:	f885 4020 	strb.w	r4, [r5, #32]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800072e:	f885 4030 	strb.w	r4, [r5, #48]	; 0x30
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000732:	e9c5 230a 	strd	r2, r3, [r5, #40]	; 0x28
  hadc1.Init.ScanConvMode = ENABLE;
 8000736:	2401      	movs	r4, #1
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000738:	4628      	mov	r0, r5
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800073a:	e9c5 4404 	strd	r4, r4, [r5, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800073e:	f002 fd17 	bl	8003170 <HAL_ADC_Init>
 8000742:	b108      	cbz	r0, 8000748 <main+0x118>
 8000744:	b672      	cpsid	i
  while (1)
 8000746:	e7fe      	b.n	8000746 <main+0x116>
  sConfigInjected.InjectedNbrOfConversion = 3;
 8000748:	2303      	movs	r3, #3
  sConfigInjected.InjectedRank = 1;
 800074a:	e9cd 0414 	strd	r0, r4, [sp, #80]	; 0x50
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800074e:	f8ad 0064 	strh.w	r0, [sp, #100]	; 0x64
  sConfigInjected.InjectedOffset = 0;
 8000752:	9017      	str	r0, [sp, #92]	; 0x5c
  sConfigInjected.InjectedNbrOfConversion = 3;
 8000754:	9318      	str	r3, [sp, #96]	; 0x60
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 8000756:	2200      	movs	r2, #0
 8000758:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800075c:	a914      	add	r1, sp, #80	; 0x50
 800075e:	4628      	mov	r0, r5
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 8000760:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000764:	9416      	str	r4, [sp, #88]	; 0x58
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000766:	f002 fe5f 	bl	8003428 <HAL_ADCEx_InjectedConfigChannel>
 800076a:	b108      	cbz	r0, 8000770 <main+0x140>
 800076c:	b672      	cpsid	i
  while (1)
 800076e:	e7fe      	b.n	800076e <main+0x13e>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_11;
 8000770:	220b      	movs	r2, #11
 8000772:	2302      	movs	r3, #2
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000774:	a914      	add	r1, sp, #80	; 0x50
 8000776:	4628      	mov	r0, r5
  sConfigInjected.InjectedChannel = ADC_CHANNEL_11;
 8000778:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800077c:	f002 fe54 	bl	8003428 <HAL_ADCEx_InjectedConfigChannel>
 8000780:	b108      	cbz	r0, 8000786 <main+0x156>
 8000782:	b672      	cpsid	i
  while (1)
 8000784:	e7fe      	b.n	8000784 <main+0x154>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_10;
 8000786:	220a      	movs	r2, #10
 8000788:	2303      	movs	r3, #3
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800078a:	a914      	add	r1, sp, #80	; 0x50
 800078c:	4628      	mov	r0, r5
  sConfigInjected.InjectedChannel = ADC_CHANNEL_10;
 800078e:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000792:	f002 fe49 	bl	8003428 <HAL_ADCEx_InjectedConfigChannel>
 8000796:	b108      	cbz	r0, 800079c <main+0x16c>
 8000798:	b672      	cpsid	i
  while (1)
 800079a:	e7fe      	b.n	800079a <main+0x16a>
  sConfig.Channel = ADC_CHANNEL_1;
 800079c:	2201      	movs	r2, #1
 800079e:	2301      	movs	r3, #1
 80007a0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007a4:	a90c      	add	r1, sp, #48	; 0x30
  sConfig.Channel = ADC_CHANNEL_1;
 80007a6:	2202      	movs	r2, #2
 80007a8:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007aa:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_1;
 80007ac:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b0:	f002 fd8c 	bl	80032cc <HAL_ADC_ConfigChannel>
 80007b4:	b108      	cbz	r0, 80007ba <main+0x18a>
 80007b6:	b672      	cpsid	i
  while (1)
 80007b8:	e7fe      	b.n	80007b8 <main+0x188>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ba:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_12;
 80007bc:	220c      	movs	r2, #12
 80007be:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007c0:	a90c      	add	r1, sp, #48	; 0x30
  sConfig.Channel = ADC_CHANNEL_12;
 80007c2:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007c6:	f002 fd81 	bl	80032cc <HAL_ADC_ConfigChannel>
 80007ca:	4605      	mov	r5, r0
 80007cc:	b108      	cbz	r0, 80007d2 <main+0x1a2>
 80007ce:	b672      	cpsid	i
  while (1)
 80007d0:	e7fe      	b.n	80007d0 <main+0x1a0>
  htim1.Instance = TIM1;
 80007d2:	f8df 9144 	ldr.w	r9, [pc, #324]	; 8000918 <main+0x2e8>
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80007d6:	9006      	str	r0, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007d8:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
 80007dc:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
 80007e0:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80007e4:	e9cd 0007 	strd	r0, r0, [sp, #28]
 80007e8:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ec:	9004      	str	r0, [sp, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007ee:	9012      	str	r0, [sp, #72]	; 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007f0:	9005      	str	r0, [sp, #20]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007f2:	4601      	mov	r1, r0
 80007f4:	4642      	mov	r2, r8
 80007f6:	a814      	add	r0, sp, #80	; 0x50
 80007f8:	f008 fd30 	bl	800925c <memset>
  htim1.Instance = TIM1;
 80007fc:	4b45      	ldr	r3, [pc, #276]	; (8000914 <main+0x2e4>)
 80007fe:	f8c9 3000 	str.w	r3, [r9]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000802:	f640 2041 	movw	r0, #2625	; 0xa41
 8000806:	f44f 7380 	mov.w	r3, #256	; 0x100
 800080a:	e9c9 0303 	strd	r0, r3, [r9, #12]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800080e:	4648      	mov	r0, r9
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000810:	f8c9 8008 	str.w	r8, [r9, #8]
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 8000814:	f8c9 4014 	str.w	r4, [r9, #20]
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 8000818:	f8c9 5004 	str.w	r5, [r9, #4]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800081c:	f8c9 5018 	str.w	r5, [r9, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000820:	f003 fb88 	bl	8003f34 <HAL_TIM_Base_Init>
 8000824:	b108      	cbz	r0, 800082a <main+0x1fa>
 8000826:	b672      	cpsid	i
  while (1)
 8000828:	e7fe      	b.n	8000828 <main+0x1f8>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800082a:	4648      	mov	r0, r9
 800082c:	f003 fc36 	bl	800409c <HAL_TIM_PWM_Init>
 8000830:	b108      	cbz	r0, 8000836 <main+0x206>
 8000832:	b672      	cpsid	i
  while (1)
 8000834:	e7fe      	b.n	8000834 <main+0x204>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000836:	2206      	movs	r2, #6
 8000838:	2310      	movs	r3, #16
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800083a:	a906      	add	r1, sp, #24
 800083c:	4648      	mov	r0, r9
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800083e:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000842:	f003 fe5f 	bl	8004504 <HAL_TIM_SlaveConfigSynchro>
 8000846:	b108      	cbz	r0, 800084c <main+0x21c>
 8000848:	b672      	cpsid	i
  while (1)
 800084a:	e7fe      	b.n	800084a <main+0x21a>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800084c:	a904      	add	r1, sp, #16
 800084e:	4648      	mov	r0, r9
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000850:	e9cd 6704 	strd	r6, r7, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000854:	f004 f8b4 	bl	80049c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000858:	b108      	cbz	r0, 800085e <main+0x22e>
 800085a:	b672      	cpsid	i
  while (1)
 800085c:	e7fe      	b.n	800085c <main+0x22c>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800085e:	2260      	movs	r2, #96	; 0x60
 8000860:	2300      	movs	r3, #0
 8000862:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8000866:	2200      	movs	r2, #0
 8000868:	2308      	movs	r3, #8
 800086a:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800086e:	2600      	movs	r6, #0
 8000870:	2700      	movs	r7, #0
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8000872:	f44f 7300 	mov.w	r3, #512	; 0x200
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000876:	4828      	ldr	r0, [pc, #160]	; (8000918 <main+0x2e8>)
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8000878:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800087a:	2200      	movs	r2, #0
 800087c:	a90c      	add	r1, sp, #48	; 0x30
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800087e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000882:	f003 fc89 	bl	8004198 <HAL_TIM_PWM_ConfigChannel>
 8000886:	b108      	cbz	r0, 800088c <main+0x25c>
 8000888:	b672      	cpsid	i
  while (1)
 800088a:	e7fe      	b.n	800088a <main+0x25a>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800088c:	4822      	ldr	r0, [pc, #136]	; (8000918 <main+0x2e8>)
 800088e:	2204      	movs	r2, #4
 8000890:	a90c      	add	r1, sp, #48	; 0x30
 8000892:	f003 fc81 	bl	8004198 <HAL_TIM_PWM_ConfigChannel>
 8000896:	b108      	cbz	r0, 800089c <main+0x26c>
 8000898:	b672      	cpsid	i
  while (1)
 800089a:	e7fe      	b.n	800089a <main+0x26a>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800089c:	481e      	ldr	r0, [pc, #120]	; (8000918 <main+0x2e8>)
 800089e:	2208      	movs	r2, #8
 80008a0:	a90c      	add	r1, sp, #48	; 0x30
 80008a2:	f003 fc79 	bl	8004198 <HAL_TIM_PWM_ConfigChannel>
 80008a6:	b108      	cbz	r0, 80008ac <main+0x27c>
 80008a8:	b672      	cpsid	i
  while (1)
 80008aa:	e7fe      	b.n	80008aa <main+0x27a>
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008ac:	9012      	str	r0, [sp, #72]	; 0x48
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80008ae:	2470      	movs	r4, #112	; 0x70
 80008b0:	f44f 6524 	mov.w	r5, #2624	; 0xa40
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80008b4:	4818      	ldr	r0, [pc, #96]	; (8000918 <main+0x2e8>)
 80008b6:	220c      	movs	r2, #12
 80008b8:	a90c      	add	r1, sp, #48	; 0x30
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80008ba:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80008be:	f003 fc6b 	bl	8004198 <HAL_TIM_PWM_ConfigChannel>
 80008c2:	b108      	cbz	r0, 80008c8 <main+0x298>
 80008c4:	b672      	cpsid	i
  while (1)
 80008c6:	e7fe      	b.n	80008c6 <main+0x296>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 80008c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008d0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80008d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008d8:	2321      	movs	r3, #33	; 0x21
 80008da:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008de:	901b      	str	r0, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 80008e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80008e4:	2300      	movs	r3, #0
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008e6:	480c      	ldr	r0, [pc, #48]	; (8000918 <main+0x2e8>)
 80008e8:	a914      	add	r1, sp, #80	; 0x50
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 80008ea:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008ee:	f004 f89f 	bl	8004a30 <HAL_TIMEx_ConfigBreakDeadTime>
 80008f2:	4604      	mov	r4, r0
 80008f4:	b1a0      	cbz	r0, 8000920 <main+0x2f0>
 80008f6:	b672      	cpsid	i
  while (1)
 80008f8:	e7fe      	b.n	80008f8 <main+0x2c8>
 80008fa:	bf00      	nop
 80008fc:	40023800 	.word	0x40023800
 8000900:	40020000 	.word	0x40020000
 8000904:	20000d98 	.word	0x20000d98
 8000908:	40020400 	.word	0x40020400
 800090c:	40020800 	.word	0x40020800
 8000910:	0f000001 	.word	0x0f000001
 8000914:	40010000 	.word	0x40010000
 8000918:	20000de0 	.word	0x20000de0
 800091c:	40012000 	.word	0x40012000
  htim2.Instance = TIM2;
 8000920:	4d59      	ldr	r5, [pc, #356]	; (8000a88 <main+0x458>)
  HAL_TIM_MspPostInit(&htim1);
 8000922:	485a      	ldr	r0, [pc, #360]	; (8000a8c <main+0x45c>)
 8000924:	f001 fe34 	bl	8002590 <HAL_TIM_MspPostInit>
  htim2.Instance = TIM2;
 8000928:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800092c:	602b      	str	r3, [r5, #0]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800092e:	4628      	mov	r0, r5
  htim2.Init.Period = M1_HALL_TIM_PERIOD;
 8000930:	f64f 73ff 	movw	r3, #65535	; 0xffff
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000934:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
 8000938:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
  TIM_HallSensor_InitTypeDef sConfig = {0};
 800093c:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
 8000940:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000944:	e9cd 4406 	strd	r4, r4, [sp, #24]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000948:	e9c5 4401 	strd	r4, r4, [r5, #4]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800094c:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800094e:	61ac      	str	r4, [r5, #24]
  htim2.Init.Period = M1_HALL_TIM_PERIOD;
 8000950:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000952:	f003 faef 	bl	8003f34 <HAL_TIM_Base_Init>
 8000956:	b108      	cbz	r0, 800095c <main+0x32c>
 8000958:	b672      	cpsid	i
  while (1)
 800095a:	e7fe      	b.n	800095a <main+0x32a>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800095c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000960:	a914      	add	r1, sp, #80	; 0x50
 8000962:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000964:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000966:	f003 fd1d 	bl	80043a4 <HAL_TIM_ConfigClockSource>
 800096a:	b108      	cbz	r0, 8000970 <main+0x340>
 800096c:	b672      	cpsid	i
  while (1)
 800096e:	e7fe      	b.n	800096e <main+0x33e>
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000970:	220b      	movs	r2, #11
 8000972:	2300      	movs	r3, #0
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 8000974:	a90c      	add	r1, sp, #48	; 0x30
 8000976:	4628      	mov	r0, r5
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000978:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
 800097c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 8000980:	f003 ffba 	bl	80048f8 <HAL_TIMEx_HallSensor_Init>
 8000984:	b108      	cbz	r0, 800098a <main+0x35a>
 8000986:	b672      	cpsid	i
  while (1)
 8000988:	e7fe      	b.n	8000988 <main+0x358>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 800098a:	2250      	movs	r2, #80	; 0x50
 800098c:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800098e:	a906      	add	r1, sp, #24
 8000990:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8000992:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000996:	f004 f813 	bl	80049c0 <HAL_TIMEx_MasterConfigSynchronization>
 800099a:	4602      	mov	r2, r0
 800099c:	b108      	cbz	r0, 80009a2 <main+0x372>
 800099e:	b672      	cpsid	i
  while (1)
 80009a0:	e7fe      	b.n	80009a0 <main+0x370>
  huart2.Instance = USART2;
 80009a2:	483b      	ldr	r0, [pc, #236]	; (8000a90 <main+0x460>)
  huart2.Init.BaudRate = 115200;
 80009a4:	4b3b      	ldr	r3, [pc, #236]	; (8000a94 <main+0x464>)
 80009a6:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80009aa:	e9c0 3100 	strd	r3, r1, [r0]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009ae:	210c      	movs	r1, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009b0:	e9c0 2202 	strd	r2, r2, [r0, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009b4:	e9c0 2104 	strd	r2, r1, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b8:	e9c0 2206 	strd	r2, r2, [r0, #24]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009bc:	f004 f866 	bl	8004a8c <HAL_UART_Init>
 80009c0:	b108      	cbz	r0, 80009c6 <main+0x396>
 80009c2:	b672      	cpsid	i
  while (1)
 80009c4:	e7fe      	b.n	80009c4 <main+0x394>
  ESCOOTER_init();
 80009c6:	f004 fadb 	bl	8004f80 <ESCOOTER_init>
  MX_MotorControl_Init();
 80009ca:	f001 fb93 	bl	80020f4 <MX_MotorControl_Init>
  HAL_NVIC_SetPriority(ADC_IRQn, 7, 0);
 80009ce:	2200      	movs	r2, #0
 80009d0:	2107      	movs	r1, #7
 80009d2:	2012      	movs	r0, #18
 80009d4:	f002 fe12 	bl	80035fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 80009d8:	2012      	movs	r0, #18
 80009da:	f002 fe4d 	bl	8003678 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 80009de:	2200      	movs	r2, #0
 80009e0:	2105      	movs	r1, #5
 80009e2:	2019      	movs	r0, #25
 80009e4:	f002 fe0a 	bl	80035fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80009e8:	2019      	movs	r0, #25
 80009ea:	f002 fe45 	bl	8003678 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 9, 0);
 80009ee:	2200      	movs	r2, #0
 80009f0:	2109      	movs	r1, #9
 80009f2:	2018      	movs	r0, #24
 80009f4:	f002 fe02 	bl	80035fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80009f8:	2018      	movs	r0, #24
 80009fa:	f002 fe3d 	bl	8003678 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM2_IRQn, 8, 0);
 80009fe:	2200      	movs	r2, #0
 8000a00:	2108      	movs	r1, #8
 8000a02:	201c      	movs	r0, #28
 8000a04:	f002 fdfa 	bl	80035fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a08:	201c      	movs	r0, #28
 8000a0a:	f002 fe35 	bl	8003678 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART2_IRQn, 8, 0);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2108      	movs	r1, #8
 8000a12:	2026      	movs	r0, #38	; 0x26
 8000a14:	f002 fdf2 	bl	80035fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a18:	2026      	movs	r0, #38	; 0x26
 8000a1a:	f002 fe2d 	bl	8003678 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 8, 0);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2108      	movs	r1, #8
 8000a22:	2028      	movs	r0, #40	; 0x28
 8000a24:	f002 fdea 	bl	80035fc <HAL_NVIC_SetPriority>
  osThreadDef(mediumFrequency, startMediumFrequencyTask, osPriorityNormal, 0, 128);
 8000a28:	4c1b      	ldr	r4, [pc, #108]	; (8000a98 <main+0x468>)
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a2a:	2028      	movs	r0, #40	; 0x28
 8000a2c:	f002 fe24 	bl	8003678 <HAL_NVIC_EnableIRQ>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,GPIO_PIN_RESET);
 8000a30:	481a      	ldr	r0, [pc, #104]	; (8000a9c <main+0x46c>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	2120      	movs	r1, #32
 8000a36:	f002 ff4b 	bl	80038d0 <HAL_GPIO_WritePin>
  POWER_CONTROL_Init();
 8000a3a:	f008 fb9d 	bl	8009178 <POWER_CONTROL_Init>
  POWER_CONTROL_START_MONITORING();
 8000a3e:	f008 fbb1 	bl	80091a4 <POWER_CONTROL_START_MONITORING>
  retransmissionTimerStart();
 8000a42:	f008 faff 	bl	8009044 <retransmissionTimerStart>
  osThreadDef(mediumFrequency, startMediumFrequencyTask, osPriorityNormal, 0, 128);
 8000a46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a48:	ad0c      	add	r5, sp, #48	; 0x30
 8000a4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a4c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000a50:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  mediumFrequencyHandle = osThreadCreate(osThread(mediumFrequency), NULL);
 8000a54:	2100      	movs	r1, #0
 8000a56:	a80c      	add	r0, sp, #48	; 0x30
 8000a58:	f004 fad8 	bl	800500c <osThreadCreate>
 8000a5c:	4b10      	ldr	r3, [pc, #64]	; (8000aa0 <main+0x470>)
  osThreadDef(safety, StartSafetyTask, osPriorityAboveNormal, 0, 128);
 8000a5e:	340c      	adds	r4, #12
  mediumFrequencyHandle = osThreadCreate(osThread(mediumFrequency), NULL);
 8000a60:	6018      	str	r0, [r3, #0]
  osThreadDef(safety, StartSafetyTask, osPriorityAboveNormal, 0, 128);
 8000a62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a64:	ad14      	add	r5, sp, #80	; 0x50
 8000a66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a68:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000a6c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  safetyHandle = osThreadCreate(osThread(safety), NULL);
 8000a70:	2100      	movs	r1, #0
 8000a72:	a814      	add	r0, sp, #80	; 0x50
 8000a74:	f004 faca 	bl	800500c <osThreadCreate>
 8000a78:	4b0a      	ldr	r3, [pc, #40]	; (8000aa4 <main+0x474>)
 8000a7a:	6018      	str	r0, [r3, #0]
  ESCOOTER_RunCoreTask();
 8000a7c:	f004 fa82 	bl	8004f84 <ESCOOTER_RunCoreTask>
  osKernelStart();
 8000a80:	f004 fabe 	bl	8005000 <osKernelStart>
  while (1)
 8000a84:	e7fe      	b.n	8000a84 <main+0x454>
 8000a86:	bf00      	nop
 8000a88:	20000e28 	.word	0x20000e28
 8000a8c:	20000de0 	.word	0x20000de0
 8000a90:	20000e70 	.word	0x20000e70
 8000a94:	40004400 	.word	0x40004400
 8000a98:	08009408 	.word	0x08009408
 8000a9c:	40020000 	.word	0x40020000
 8000aa0:	20000eb4 	.word	0x20000eb4
 8000aa4:	20000eb8 	.word	0x20000eb8

08000aa8 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM5) {
 8000aa8:	4b03      	ldr	r3, [pc, #12]	; (8000ab8 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8000aaa:	6802      	ldr	r2, [r0, #0]
 8000aac:	429a      	cmp	r2, r3
 8000aae:	d000      	beq.n	8000ab2 <HAL_TIM_PeriodElapsedCallback+0xa>
}
 8000ab0:	4770      	bx	lr
    HAL_IncTick();
 8000ab2:	f002 bb39 	b.w	8003128 <HAL_IncTick>
 8000ab6:	bf00      	nop
 8000ab8:	40000c00 	.word	0x40000c00

08000abc <EXTI2_IRQHandler>:
}

uint8_t fuck = 0;
void EXTI2_IRQHandler(void)
{
   if(EXTI->PR & (1<<2))
 8000abc:	4b05      	ldr	r3, [pc, #20]	; (8000ad4 <EXTI2_IRQHandler+0x18>)
 8000abe:	695a      	ldr	r2, [r3, #20]
 8000ac0:	0752      	lsls	r2, r2, #29
 8000ac2:	d506      	bpl.n	8000ad2 <EXTI2_IRQHandler+0x16>
   {
	   EXTI->PR &= ~(1<<2);
 8000ac4:	695a      	ldr	r2, [r3, #20]
	   fuck = 1;
 8000ac6:	4904      	ldr	r1, [pc, #16]	; (8000ad8 <EXTI2_IRQHandler+0x1c>)
	   EXTI->PR &= ~(1<<2);
 8000ac8:	f022 0204 	bic.w	r2, r2, #4
	   fuck = 1;
 8000acc:	2001      	movs	r0, #1
	   EXTI->PR &= ~(1<<2);
 8000ace:	615a      	str	r2, [r3, #20]
	   fuck = 1;
 8000ad0:	7008      	strb	r0, [r1, #0]
   }
}
 8000ad2:	4770      	bx	lr
 8000ad4:	40013c00 	.word	0x40013c00
 8000ad8:	20000d94 	.word	0x20000d94

08000adc <suspend_SystemTask>:
   /*Start the timer*/
   TIM3->CR1 |= TIM_CR1_CEN;
}

void suspend_SystemTask(void)
{
 8000adc:	b508      	push	{r3, lr}
	vTaskSuspend(mediumFrequencyHandle);
 8000ade:	4b05      	ldr	r3, [pc, #20]	; (8000af4 <suspend_SystemTask+0x18>)
 8000ae0:	6818      	ldr	r0, [r3, #0]
 8000ae2:	f005 fea9 	bl	8006838 <vTaskSuspend>
	vTaskSuspend(safetyHandle);
 8000ae6:	4b04      	ldr	r3, [pc, #16]	; (8000af8 <suspend_SystemTask+0x1c>)
 8000ae8:	6818      	ldr	r0, [r3, #0]

}
 8000aea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	vTaskSuspend(safetyHandle);
 8000aee:	f005 bea3 	b.w	8006838 <vTaskSuspend>
 8000af2:	bf00      	nop
 8000af4:	20000eb4 	.word	0x20000eb4
 8000af8:	20000eb8 	.word	0x20000eb8

08000afc <MC_GetMecSpeedAverageMotor1>:
/**
 * @brief Returns the last computed average mechanical rotor speed for Motor 1, expressed in the unit defined by #SPEED_UNIT
 */
__weak int16_t MC_GetMecSpeedAverageMotor1(void)
{
	return MCI_GetAvrgMecSpeedUnit( pMCI[M1] );
 8000afc:	4b01      	ldr	r3, [pc, #4]	; (8000b04 <MC_GetMecSpeedAverageMotor1+0x8>)
 8000afe:	6818      	ldr	r0, [r3, #0]
 8000b00:	f000 b8a4 	b.w	8000c4c <MCI_GetAvrgMecSpeedUnit>
 8000b04:	20000fc4 	.word	0x20000fc4

08000b08 <MC_GetPhaseCurrentAmplitudeMotor1>:
 * @f]
 *
 */
__weak int16_t MC_GetPhaseCurrentAmplitudeMotor1(void)
{
	return MCI_GetPhaseCurrentAmplitude( pMCI[M1] );
 8000b08:	4b01      	ldr	r3, [pc, #4]	; (8000b10 <MC_GetPhaseCurrentAmplitudeMotor1+0x8>)
 8000b0a:	6818      	ldr	r0, [r3, #0]
 8000b0c:	f000 b902 	b.w	8000d14 <MCI_GetPhaseCurrentAmplitude>
 8000b10:	20000fc4 	.word	0x20000fc4

08000b14 <MC_GetPhaseVoltageAmplitudeMotor1>:
 * @f]
 *
 */
__weak int16_t MC_GetPhaseVoltageAmplitudeMotor1(void)
{
	return MCI_GetPhaseVoltageAmplitude( pMCI[M1] );
 8000b14:	4b01      	ldr	r3, [pc, #4]	; (8000b1c <MC_GetPhaseVoltageAmplitudeMotor1+0x8>)
 8000b16:	6818      	ldr	r0, [r3, #0]
 8000b18:	f000 b910 	b.w	8000d3c <MCI_GetPhaseVoltageAmplitude>
 8000b1c:	20000fc4 	.word	0x20000fc4

08000b20 <MC_GetSTMStateMotor1>:
/**
 * @brief returns the current state of Motor 1 state machine
 */
__weak State_t  MC_GetSTMStateMotor1(void)
{
	return MCI_GetSTMState( pMCI[M1] );
 8000b20:	4b01      	ldr	r3, [pc, #4]	; (8000b28 <MC_GetSTMStateMotor1+0x8>)
 8000b22:	6818      	ldr	r0, [r3, #0]
 8000b24:	f000 b880 	b.w	8000c28 <MCI_GetSTMState>
 8000b28:	20000fc4 	.word	0x20000fc4

08000b2c <MCI_Init>:
  pHandle->pSTM = pSTM;
  pHandle->pSTC = pSTC;
  pHandle->pFOCVars = pFOCVars;

  /* Buffer related initialization */
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8000b2c:	f04f 0c00 	mov.w	ip, #0
  pHandle->pSTC = pSTC;
 8000b30:	e9c0 1200 	strd	r1, r2, [r0]
  pHandle->pFOCVars = pFOCVars;
 8000b34:	6083      	str	r3, [r0, #8]
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8000b36:	f880 c00c 	strb.w	ip, [r0, #12]
  pHandle->hFinalSpeed = 0;
 8000b3a:	f8c0 c00e 	str.w	ip, [r0, #14]
  pHandle->hFinalTorque = 0;
  pHandle->hDurationms = 0;
 8000b3e:	f8a0 c016 	strh.w	ip, [r0, #22]
  pHandle->CommandState = MCI_BUFFER_EMPTY;
 8000b42:	f880 c018 	strb.w	ip, [r0, #24]
}
 8000b46:	4770      	bx	lr

08000b48 <MCI_ExecSpeedRamp>:
  *         value.
  * @retval none.
  */
__weak void MCI_ExecSpeedRamp( MCI_Handle_t * pHandle,  int16_t hFinalSpeed, uint16_t hDurationms )
{
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 8000b48:	f04f 0c01 	mov.w	ip, #1
  pHandle->hFinalSpeed = hFinalSpeed;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000b4c:	f240 1301 	movw	r3, #257	; 0x101
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 8000b50:	f880 c00c 	strb.w	ip, [r0, #12]
  pHandle->hFinalSpeed = hFinalSpeed;
 8000b54:	81c1      	strh	r1, [r0, #14]
  pHandle->hDurationms = hDurationms;
 8000b56:	82c2      	strh	r2, [r0, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000b58:	8303      	strh	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_SPEED_MODE;
}
 8000b5a:	4770      	bx	lr

08000b5c <MCI_ExecTorqueRamp>:
  *         value.
  * @retval none.
  */
__weak void MCI_ExecTorqueRamp( MCI_Handle_t * pHandle,  int16_t hFinalTorque, uint16_t hDurationms )
{
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 8000b5c:	f04f 0c02 	mov.w	ip, #2
  pHandle->hFinalTorque = hFinalTorque;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000b60:	2301      	movs	r3, #1
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 8000b62:	f880 c00c 	strb.w	ip, [r0, #12]
  pHandle->hFinalTorque = hFinalTorque;
 8000b66:	8201      	strh	r1, [r0, #16]
  pHandle->hDurationms = hDurationms;
 8000b68:	82c2      	strh	r2, [r0, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000b6a:	8303      	strh	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop

08000b70 <MCI_SetCurrentReferences>:
  * @param  Iqdref current references on qd reference frame in qd_t
  *         format.
  * @retval none.
  */
__weak void MCI_SetCurrentReferences( MCI_Handle_t * pHandle, qd_t Iqdref )
{
 8000b70:	b082      	sub	sp, #8
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 8000b72:	2203      	movs	r2, #3
  pHandle->Iqdref.q = Iqdref.q;
  pHandle->Iqdref.d = Iqdref.d;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000b74:	2301      	movs	r3, #1
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 8000b76:	7302      	strb	r2, [r0, #12]
  pHandle->Iqdref.q = Iqdref.q;
 8000b78:	f8c0 1012 	str.w	r1, [r0, #18]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000b7c:	8303      	strh	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 8000b7e:	b002      	add	sp, #8
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop

08000b84 <MCI_StartMotor>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StartMotor( MCI_Handle_t * pHandle )
{
 8000b84:	b510      	push	{r4, lr}
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 8000b86:	2103      	movs	r1, #3
{
 8000b88:	4604      	mov	r4, r0
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 8000b8a:	6800      	ldr	r0, [r0, #0]
 8000b8c:	f008 f882 	bl	8008c94 <STM_NextState>

  if ( RetVal == true )
 8000b90:	b108      	cbz	r0, 8000b96 <MCI_StartMotor+0x12>
  {
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000b92:	2301      	movs	r3, #1
 8000b94:	7623      	strb	r3, [r4, #24]
  }

  return RetVal;
}
 8000b96:	bd10      	pop	{r4, pc}

08000b98 <MCI_StopMotor>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StopMotor( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, ANY_STOP );
 8000b98:	6800      	ldr	r0, [r0, #0]
 8000b9a:	2107      	movs	r1, #7
 8000b9c:	f008 b87a 	b.w	8008c94 <STM_NextState>

08000ba0 <MCI_FaultAcknowledged>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_FaultAcknowledged( MCI_Handle_t * pHandle )
{
  return STM_FaultAcknowledged( pHandle->pSTM );
 8000ba0:	6800      	ldr	r0, [r0, #0]
 8000ba2:	f008 b8ed 	b.w	8008d80 <STM_FaultAcknowledged>
 8000ba6:	bf00      	nop

08000ba8 <MCI_EncoderAlign>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_EncoderAlign( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, IDLE_ALIGNMENT );
 8000ba8:	6800      	ldr	r0, [r0, #0]
 8000baa:	2101      	movs	r1, #1
 8000bac:	f008 b872 	b.w	8008c94 <STM_NextState>

08000bb0 <MCI_ExecBufferedCommands>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none.
  */
__weak void MCI_ExecBufferedCommands( MCI_Handle_t * pHandle )
{
  if ( pHandle != MC_NULL )
 8000bb0:	b178      	cbz	r0, 8000bd2 <MCI_ExecBufferedCommands+0x22>
{
 8000bb2:	b510      	push	{r4, lr}
  {
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8000bb4:	7e03      	ldrb	r3, [r0, #24]
 8000bb6:	2b01      	cmp	r3, #1
 8000bb8:	4604      	mov	r4, r0
 8000bba:	d000      	beq.n	8000bbe <MCI_ExecBufferedCommands+0xe>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
      }
    }
  }
}
 8000bbc:	bd10      	pop	{r4, pc}
      switch ( pHandle->lastCommand )
 8000bbe:	7b01      	ldrb	r1, [r0, #12]
 8000bc0:	2902      	cmp	r1, #2
 8000bc2:	d020      	beq.n	8000c06 <MCI_ExecBufferedCommands+0x56>
 8000bc4:	2903      	cmp	r1, #3
 8000bc6:	d005      	beq.n	8000bd4 <MCI_ExecBufferedCommands+0x24>
 8000bc8:	2901      	cmp	r1, #1
 8000bca:	d00c      	beq.n	8000be6 <MCI_ExecBufferedCommands+0x36>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 8000bcc:	2303      	movs	r3, #3
 8000bce:	7623      	strb	r3, [r4, #24]
}
 8000bd0:	bd10      	pop	{r4, pc}
 8000bd2:	4770      	bx	lr
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8000bd4:	6882      	ldr	r2, [r0, #8]
 8000bd6:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8000bda:	f8d0 3012 	ldr.w	r3, [r0, #18]
 8000bde:	6113      	str	r3, [r2, #16]
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
 8000be0:	2302      	movs	r3, #2
 8000be2:	7623      	strb	r3, [r4, #24]
}
 8000be4:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8000be6:	6883      	ldr	r3, [r0, #8]
 8000be8:	2200      	movs	r2, #0
 8000bea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_SPEED_MODE );
 8000bee:	6840      	ldr	r0, [r0, #4]
 8000bf0:	f007 ff8c 	bl	8008b0c <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms );
 8000bf4:	8ae2      	ldrh	r2, [r4, #22]
 8000bf6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000bfa:	6860      	ldr	r0, [r4, #4]
 8000bfc:	f007 ff8a 	bl	8008b14 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 8000c00:	2800      	cmp	r0, #0
 8000c02:	d0e3      	beq.n	8000bcc <MCI_ExecBufferedCommands+0x1c>
 8000c04:	e7ec      	b.n	8000be0 <MCI_ExecBufferedCommands+0x30>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8000c06:	6883      	ldr	r3, [r0, #8]
 8000c08:	2100      	movs	r1, #0
 8000c0a:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 8000c0e:	6840      	ldr	r0, [r0, #4]
 8000c10:	f007 ff7c 	bl	8008b0c <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms );
 8000c14:	8ae2      	ldrh	r2, [r4, #22]
 8000c16:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 8000c1a:	6860      	ldr	r0, [r4, #4]
 8000c1c:	f007 ff7a 	bl	8008b14 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 8000c20:	2800      	cmp	r0, #0
 8000c22:	d0d3      	beq.n	8000bcc <MCI_ExecBufferedCommands+0x1c>
 8000c24:	e7dc      	b.n	8000be0 <MCI_ExecBufferedCommands+0x30>
 8000c26:	bf00      	nop

08000c28 <MCI_GetSTMState>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval State_t It returns the current state of the related pSTM object.
  */
__weak State_t  MCI_GetSTMState( MCI_Handle_t * pHandle )
{
  return STM_GetState( pHandle->pSTM );
 8000c28:	6800      	ldr	r0, [r0, #0]
 8000c2a:	f008 b8a7 	b.w	8008d7c <STM_GetState>
 8000c2e:	bf00      	nop

08000c30 <MCI_GetControlMode>:
  *         these two values: STC_TORQUE_MODE or STC_SPEED_MODE.
  */
__weak STC_Modality_t MCI_GetControlMode( MCI_Handle_t * pHandle )
{
  return pHandle->LastModalitySetByUser;
}
 8000c30:	7e40      	ldrb	r0, [r0, #25]
 8000c32:	4770      	bx	lr

08000c34 <MCI_GetLastRampFinalSpeed>:
__weak int16_t MCI_GetLastRampFinalSpeed( MCI_Handle_t * pHandle )
{
  int16_t hRetVal = 0;

  /* Examine the last buffered commands */
  if ( pHandle->lastCommand == MCI_EXECSPEEDRAMP )
 8000c34:	7b03      	ldrb	r3, [r0, #12]
 8000c36:	2b01      	cmp	r3, #1
  {
    hRetVal = pHandle->hFinalSpeed;
 8000c38:	bf0c      	ite	eq
 8000c3a:	f9b0 000e 	ldrsheq.w	r0, [r0, #14]
  int16_t hRetVal = 0;
 8000c3e:	2000      	movne	r0, #0
  }
  return hRetVal;
}
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop

08000c44 <MCI_StopRamp>:
  * @brief  Stop the execution of ongoing ramp.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_StopRamp( MCI_Handle_t * pHandle)
{
   STC_StopRamp( pHandle->pSTC );
 8000c44:	6840      	ldr	r0, [r0, #4]
 8000c46:	f007 bfad 	b.w	8008ba4 <STC_StopRamp>
 8000c4a:	bf00      	nop

08000c4c <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit( MCI_Handle_t * pHandle )
{
 8000c4c:	b508      	push	{r3, lr}
  SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor( pHandle->pSTC );
 8000c4e:	6840      	ldr	r0, [r0, #4]
 8000c50:	f007 ff42 	bl	8008ad8 <STC_GetSpeedSensor>

  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
}
 8000c54:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
 8000c58:	f007 bee0 	b.w	8008a1c <SPD_GetAvrgMecSpeedUnit>

08000c5c <MCI_GetMecSpeedRefUnit>:
  * @param  pHandle Pointer on the component instance to work on.
  *
  */
__weak int16_t MCI_GetMecSpeedRefUnit( MCI_Handle_t * pHandle )
{
  return ( STC_GetMecSpeedRefUnit( pHandle->pSTC ) );
 8000c5c:	6840      	ldr	r0, [r0, #4]
 8000c5e:	f007 bf45 	b.w	8008aec <STC_GetMecSpeedRefUnit>
 8000c62:	bf00      	nop

08000c64 <MCI_GetIab>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval ab_t Stator current Iab
  */
__weak ab_t MCI_GetIab( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iab );
 8000c64:	6882      	ldr	r2, [r0, #8]
 8000c66:	6810      	ldr	r0, [r2, #0]
 8000c68:	2300      	movs	r3, #0
 8000c6a:	b282      	uxth	r2, r0
 8000c6c:	f362 030f 	bfi	r3, r2, #0, #16
 8000c70:	0c00      	lsrs	r0, r0, #16
 8000c72:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000c76:	b082      	sub	sp, #8
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	b002      	add	sp, #8
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop

08000c80 <MCI_GetIalphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Ialphabeta
  */
__weak alphabeta_t MCI_GetIalphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Ialphabeta );
 8000c80:	6882      	ldr	r2, [r0, #8]
 8000c82:	6850      	ldr	r0, [r2, #4]
 8000c84:	2300      	movs	r3, #0
 8000c86:	b282      	uxth	r2, r0
 8000c88:	f362 030f 	bfi	r3, r2, #0, #16
 8000c8c:	0c00      	lsrs	r0, r0, #16
 8000c8e:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000c92:	b082      	sub	sp, #8
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	b002      	add	sp, #8
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop

08000c9c <MCI_GetIqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqd
  */
__weak qd_t MCI_GetIqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqd );
 8000c9c:	6882      	ldr	r2, [r0, #8]
 8000c9e:	68d0      	ldr	r0, [r2, #12]
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	b282      	uxth	r2, r0
 8000ca4:	f362 030f 	bfi	r3, r2, #0, #16
 8000ca8:	0c00      	lsrs	r0, r0, #16
 8000caa:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000cae:	b082      	sub	sp, #8
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	b002      	add	sp, #8
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <MCI_GetIqdref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqdref
  */
__weak qd_t MCI_GetIqdref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqdref );
 8000cb8:	6882      	ldr	r2, [r0, #8]
 8000cba:	6910      	ldr	r0, [r2, #16]
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	b282      	uxth	r2, r0
 8000cc0:	f362 030f 	bfi	r3, r2, #0, #16
 8000cc4:	0c00      	lsrs	r0, r0, #16
 8000cc6:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000cca:	b082      	sub	sp, #8
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	b002      	add	sp, #8
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop

08000cd4 <MCI_GetVqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Vqd
  */
__weak qd_t MCI_GetVqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Vqd );
 8000cd4:	6882      	ldr	r2, [r0, #8]
 8000cd6:	f8d2 0016 	ldr.w	r0, [r2, #22]
 8000cda:	2300      	movs	r3, #0
 8000cdc:	b282      	uxth	r2, r0
 8000cde:	f362 030f 	bfi	r3, r2, #0, #16
 8000ce2:	0c00      	lsrs	r0, r0, #16
 8000ce4:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000ce8:	b082      	sub	sp, #8
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	b002      	add	sp, #8
 8000cee:	4770      	bx	lr

08000cf0 <MCI_GetValphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Valphabeta
  */
__weak alphabeta_t MCI_GetValphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Valphabeta );
 8000cf0:	6882      	ldr	r2, [r0, #8]
 8000cf2:	f8d2 001a 	ldr.w	r0, [r2, #26]
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	b282      	uxth	r2, r0
 8000cfa:	f362 030f 	bfi	r3, r2, #0, #16
 8000cfe:	0c00      	lsrs	r0, r0, #16
 8000d00:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000d04:	b082      	sub	sp, #8
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	b002      	add	sp, #8
 8000d0a:	4770      	bx	lr

08000d0c <MCI_GetTeref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval int16_t Teref
  */
__weak int16_t MCI_GetTeref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->hTeref );
 8000d0c:	6883      	ldr	r3, [r0, #8]
}
 8000d0e:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 8000d12:	4770      	bx	lr

08000d14 <MCI_GetPhaseCurrentAmplitude>:
__weak int16_t MCI_GetPhaseCurrentAmplitude( MCI_Handle_t * pHandle )
{
  alphabeta_t Local_Curr;
  int32_t wAux1, wAux2;

  Local_Curr = pHandle->pFOCVars->Ialphabeta;
 8000d14:	6882      	ldr	r2, [r0, #8]
{
 8000d16:	b508      	push	{r3, lr}
  Local_Curr = pHandle->pFOCVars->Ialphabeta;
 8000d18:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 8000d1c:	f9b2 0004 	ldrsh.w	r0, [r2, #4]
  wAux1 = ( int32_t )( Local_Curr.alpha ) * Local_Curr.alpha;
  wAux2 = ( int32_t )( Local_Curr.beta ) * Local_Curr.beta;
 8000d20:	fb03 f303 	mul.w	r3, r3, r3

  wAux1 += wAux2;
  wAux1 = MCM_Sqrt( wAux1 );
 8000d24:	fb00 3000 	mla	r0, r0, r0, r3
 8000d28:	f000 f90a 	bl	8000f40 <MCM_Sqrt>
  if ( wAux1 > INT16_MAX )
  {
    wAux1 = ( int32_t ) INT16_MAX;
  }

  return ( ( int16_t )wAux1 );
 8000d2c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8000d30:	4298      	cmp	r0, r3
 8000d32:	bfa8      	it	ge
 8000d34:	4618      	movge	r0, r3
}
 8000d36:	b200      	sxth	r0, r0
 8000d38:	bd08      	pop	{r3, pc}
 8000d3a:	bf00      	nop

08000d3c <MCI_GetPhaseVoltageAmplitude>:
__weak int16_t MCI_GetPhaseVoltageAmplitude( MCI_Handle_t * pHandle )
{
  alphabeta_t Local_Voltage;
  int32_t wAux1, wAux2;

  Local_Voltage = pHandle->pFOCVars->Valphabeta;
 8000d3c:	6882      	ldr	r2, [r0, #8]
{
 8000d3e:	b508      	push	{r3, lr}
  Local_Voltage = pHandle->pFOCVars->Valphabeta;
 8000d40:	f9b2 301c 	ldrsh.w	r3, [r2, #28]
 8000d44:	f9b2 001a 	ldrsh.w	r0, [r2, #26]
  wAux1 = ( int32_t )( Local_Voltage.alpha ) * Local_Voltage.alpha;
  wAux2 = ( int32_t )( Local_Voltage.beta ) * Local_Voltage.beta;
 8000d48:	fb03 f303 	mul.w	r3, r3, r3

  wAux1 += wAux2;
  wAux1 = MCM_Sqrt( wAux1 );
 8000d4c:	fb00 3000 	mla	r0, r0, r0, r3
 8000d50:	f000 f8f6 	bl	8000f40 <MCM_Sqrt>
  if ( wAux1 > INT16_MAX )
  {
    wAux1 = ( int32_t ) INT16_MAX;
  }

  return ( ( int16_t ) wAux1 );
 8000d54:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8000d58:	4298      	cmp	r0, r3
 8000d5a:	bfa8      	it	ge
 8000d5c:	4618      	movge	r0, r3
}
 8000d5e:	b200      	sxth	r0, r0
 8000d60:	bd08      	pop	{r3, pc}
 8000d62:	bf00      	nop

08000d64 <MCI_SetIdref>:
  * @param  int16_t New target Id value
  * @retval none
  */
__weak void MCI_SetIdref( MCI_Handle_t * pHandle, int16_t hNewIdref )
{
  pHandle->pFOCVars->Iqdref.d = hNewIdref;
 8000d64:	2300      	movs	r3, #0
 8000d66:	6882      	ldr	r2, [r0, #8]
 8000d68:	f361 030f 	bfi	r3, r1, #0, #16
 8000d6c:	f361 431f 	bfi	r3, r1, #16, #16
 8000d70:	f8c2 3012 	str.w	r3, [r2, #18]
  pHandle->pFOCVars->UserIdref = hNewIdref;
}
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop

08000d78 <MCI_Clear_Iqdref>:
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none
  */
__weak void MCI_Clear_Iqdref( MCI_Handle_t * pHandle )
{
 8000d78:	b510      	push	{r4, lr}
  pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref( pHandle->pSTC );
 8000d7a:	e9d0 0401 	ldrd	r0, r4, [r0, #4]
 8000d7e:	f007 ff51 	bl	8008c24 <STC_GetDefaultIqdref>
 8000d82:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8000d86:	8220      	strh	r0, [r4, #16]
 8000d88:	8263      	strh	r3, [r4, #18]
}
 8000d8a:	bd10      	pop	{r4, pc}

08000d8c <MCM_Clarke>:
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;

  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 8000d8c:	f644 11e6 	movw	r1, #18918	; 0x49e6
 8000d90:	b203      	sxth	r3, r0
  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;
 8000d92:	fb13 f201 	smulbb	r2, r3, r1
{
 8000d96:	f3c0 400f 	ubfx	r0, r0, #16, #16
  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 8000d9a:	fb10 f101 	smulbb	r1, r0, r1
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */

  wbeta_tmp = ( -( a_divSQRT3_tmp ) - ( b_divSQRT3_tmp ) -
 8000d9e:	4250      	negs	r0, r2
 8000da0:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
                 ( b_divSQRT3_tmp ) ) >> 15;
#endif

  /* Check saturation of Ibeta */
  if ( wbeta_tmp > INT16_MAX )
 8000da4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
{
 8000da8:	b084      	sub	sp, #16
  if ( wbeta_tmp > INT16_MAX )
 8000daa:	da05      	bge.n	8000db8 <MCM_Clarke+0x2c>
 8000dac:	13c1      	asrs	r1, r0, #15
  {
    hbeta_tmp = INT16_MAX;
  }
  else if ( wbeta_tmp < ( -32768 ) )
 8000dae:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
 8000db2:	da0c      	bge.n	8000dce <MCM_Clarke+0x42>
 8000db4:	4a09      	ldr	r2, [pc, #36]	; (8000ddc <MCM_Clarke+0x50>)
 8000db6:	e001      	b.n	8000dbc <MCM_Clarke+0x30>
 8000db8:	f647 72ff 	movw	r2, #32767	; 0x7fff
  if ( Output.beta == ( int16_t )( -32768 ) )
  {
    Output.beta = -32767;
  }

  return ( Output );
 8000dbc:	b29b      	uxth	r3, r3
 8000dbe:	2000      	movs	r0, #0
 8000dc0:	f363 000f 	bfi	r0, r3, #0, #16
 8000dc4:	b293      	uxth	r3, r2
 8000dc6:	f363 401f 	bfi	r0, r3, #16, #16
}
 8000dca:	b004      	add	sp, #16
 8000dcc:	4770      	bx	lr
    hbeta_tmp = ( int16_t )( wbeta_tmp );
 8000dce:	4803      	ldr	r0, [pc, #12]	; (8000ddc <MCM_Clarke+0x50>)
 8000dd0:	b20a      	sxth	r2, r1
 8000dd2:	4282      	cmp	r2, r0
 8000dd4:	bfb8      	it	lt
 8000dd6:	4602      	movlt	r2, r0
 8000dd8:	e7f0      	b.n	8000dbc <MCM_Clarke+0x30>
 8000dda:	bf00      	nop
 8000ddc:	ffff8001 	.word	0xffff8001

08000de0 <MCM_Trig_Functions>:
  uint16_t uhindex;

  Trig_Components Local_Components;

  /* 10 bit index computation  */
  shindex = ( ( int32_t )32768 + ( int32_t )hAngle );
 8000de0:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
  uhindex = ( uint16_t )shindex;
  uhindex /= ( uint16_t )64;
 8000de4:	f3c0 1089 	ubfx	r0, r0, #6, #10

  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8000de8:	f400 7140 	and.w	r1, r0, #768	; 0x300
 8000dec:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
{
 8000df0:	b082      	sub	sp, #8
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8000df2:	d028      	beq.n	8000e46 <MCM_Trig_Functions+0x66>
 8000df4:	f04f 0300 	mov.w	r3, #0
 8000df8:	461a      	mov	r2, r3
 8000dfa:	d816      	bhi.n	8000e2a <MCM_Trig_Functions+0x4a>
 8000dfc:	b361      	cbz	r1, 8000e58 <MCM_Trig_Functions+0x78>
 8000dfe:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8000e02:	d109      	bne.n	8000e18 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
      break;

    case U270_360:
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000e04:	b2c0      	uxtb	r0, r0
 8000e06:	43c2      	mvns	r2, r0
 8000e08:	491a      	ldr	r1, [pc, #104]	; (8000e74 <MCM_Trig_Functions+0x94>)
 8000e0a:	b2d2      	uxtb	r2, r2
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 8000e0c:	f931 3010 	ldrsh.w	r3, [r1, r0, lsl #1]
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000e10:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000e14:	4252      	negs	r2, r2
 8000e16:	b212      	sxth	r2, r2
      break;
    default:
      break;
  }
  return ( Local_Components );
 8000e18:	b29b      	uxth	r3, r3
 8000e1a:	2000      	movs	r0, #0
 8000e1c:	f363 000f 	bfi	r0, r3, #0, #16
 8000e20:	b292      	uxth	r2, r2
 8000e22:	f362 401f 	bfi	r0, r2, #16, #16
}
 8000e26:	b002      	add	sp, #8
 8000e28:	4770      	bx	lr
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8000e2a:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 8000e2e:	d1f3      	bne.n	8000e18 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000e30:	4910      	ldr	r1, [pc, #64]	; (8000e74 <MCM_Trig_Functions+0x94>)
 8000e32:	b2c0      	uxtb	r0, r0
 8000e34:	43c2      	mvns	r2, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000e36:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000e3a:	b2d2      	uxtb	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000e3c:	425b      	negs	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000e3e:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000e42:	b21b      	sxth	r3, r3
      break;
 8000e44:	e7e8      	b.n	8000e18 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8000e46:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000e48:	43c3      	mvns	r3, r0
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8000e4a:	490a      	ldr	r1, [pc, #40]	; (8000e74 <MCM_Trig_Functions+0x94>)
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000e4c:	b2db      	uxtb	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8000e4e:	f931 2010 	ldrsh.w	r2, [r1, r0, lsl #1]
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000e52:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
      break;
 8000e56:	e7df      	b.n	8000e18 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000e58:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000e5a:	43c3      	mvns	r3, r0
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000e5c:	4905      	ldr	r1, [pc, #20]	; (8000e74 <MCM_Trig_Functions+0x94>)
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000e5e:	b2db      	uxtb	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000e60:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000e64:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000e68:	4252      	negs	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000e6a:	425b      	negs	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000e6c:	b212      	sxth	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000e6e:	b21b      	sxth	r3, r3
      break;
 8000e70:	e7d2      	b.n	8000e18 <MCM_Trig_Functions+0x38>
 8000e72:	bf00      	nop
 8000e74:	080094ac 	.word	0x080094ac

08000e78 <MCM_Park>:
{
 8000e78:	b530      	push	{r4, r5, lr}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	4605      	mov	r5, r0
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8000e80:	4608      	mov	r0, r1
 8000e82:	141c      	asrs	r4, r3, #16
{
 8000e84:	9301      	str	r3, [sp, #4]
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8000e86:	f7ff ffab 	bl	8000de0 <MCM_Trig_Functions>
 8000e8a:	b22d      	sxth	r5, r5
 8000e8c:	fa0f fc80 	sxth.w	ip, r0
 8000e90:	1403      	asrs	r3, r0, #16
  q_tmp_1 = Input.alpha * ( int32_t )Local_Vector_Components.hCos;
 8000e92:	fb05 f10c 	mul.w	r1, r5, ip
  wqd_tmp = ( q_tmp_1 - q_tmp_2 ) >> 15;
 8000e96:	fb04 1113 	mls	r1, r4, r3, r1
  if ( wqd_tmp > INT16_MAX )
 8000e9a:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 8000e9e:	da05      	bge.n	8000eac <MCM_Park+0x34>
 8000ea0:	13ca      	asrs	r2, r1, #15
  else if ( wqd_tmp < ( -32768 ) )
 8000ea2:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
 8000ea6:	da22      	bge.n	8000eee <MCM_Park+0x76>
 8000ea8:	4914      	ldr	r1, [pc, #80]	; (8000efc <MCM_Park+0x84>)
 8000eaa:	e001      	b.n	8000eb0 <MCM_Park+0x38>
 8000eac:	f647 71ff 	movw	r1, #32767	; 0x7fff
  d_tmp_2 = Input.beta * ( int32_t )Local_Vector_Components.hCos;
 8000eb0:	fb0c f404 	mul.w	r4, ip, r4
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8000eb4:	fb05 4403 	mla	r4, r5, r3, r4
  if ( wqd_tmp > INT16_MAX )
 8000eb8:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8000ebc:	ea4f 32e4 	mov.w	r2, r4, asr #15
  if ( wqd_tmp > INT16_MAX )
 8000ec0:	da04      	bge.n	8000ecc <MCM_Park+0x54>
  else if ( wqd_tmp < ( -32768 ) )
 8000ec2:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
 8000ec6:	da0c      	bge.n	8000ee2 <MCM_Park+0x6a>
 8000ec8:	4b0c      	ldr	r3, [pc, #48]	; (8000efc <MCM_Park+0x84>)
 8000eca:	e001      	b.n	8000ed0 <MCM_Park+0x58>
 8000ecc:	f647 73ff 	movw	r3, #32767	; 0x7fff
  return ( Output );
 8000ed0:	b28a      	uxth	r2, r1
 8000ed2:	2000      	movs	r0, #0
 8000ed4:	f362 000f 	bfi	r0, r2, #0, #16
 8000ed8:	b29b      	uxth	r3, r3
 8000eda:	f363 401f 	bfi	r0, r3, #16, #16
}
 8000ede:	b005      	add	sp, #20
 8000ee0:	bd30      	pop	{r4, r5, pc}
    hqd_tmp = ( int16_t )( wqd_tmp );
 8000ee2:	4806      	ldr	r0, [pc, #24]	; (8000efc <MCM_Park+0x84>)
 8000ee4:	b213      	sxth	r3, r2
 8000ee6:	4283      	cmp	r3, r0
 8000ee8:	bfb8      	it	lt
 8000eea:	4603      	movlt	r3, r0
 8000eec:	e7f0      	b.n	8000ed0 <MCM_Park+0x58>
    hqd_tmp = ( int16_t )( wqd_tmp );
 8000eee:	4903      	ldr	r1, [pc, #12]	; (8000efc <MCM_Park+0x84>)
 8000ef0:	b212      	sxth	r2, r2
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	bfb8      	it	lt
 8000ef6:	4611      	movlt	r1, r2
 8000ef8:	e7da      	b.n	8000eb0 <MCM_Park+0x38>
 8000efa:	bf00      	nop
 8000efc:	ffff8001 	.word	0xffff8001

08000f00 <MCM_Rev_Park>:
{
 8000f00:	b530      	push	{r4, r5, lr}
 8000f02:	b085      	sub	sp, #20
 8000f04:	4604      	mov	r4, r0
 8000f06:	4605      	mov	r5, r0
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8000f08:	4608      	mov	r0, r1
{
 8000f0a:	9401      	str	r4, [sp, #4]
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8000f0c:	f7ff ff68 	bl	8000de0 <MCM_Trig_Functions>
 8000f10:	1424      	asrs	r4, r4, #16
 8000f12:	1402      	asrs	r2, r0, #16
 8000f14:	b22d      	sxth	r5, r5
 8000f16:	b200      	sxth	r0, r0
  alpha_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hSin;
 8000f18:	fb04 f302 	mul.w	r3, r4, r2
  Output.alpha = ( int16_t )( ( ( alpha_tmp1 ) + ( alpha_tmp2 ) ) >> 15 );
 8000f1c:	fb05 3300 	mla	r3, r5, r0, r3
  beta_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hCos;
 8000f20:	fb00 f404 	mul.w	r4, r0, r4
  Output.beta = ( int16_t )( ( beta_tmp2 - beta_tmp1 ) >> 15 );
 8000f24:	fb05 4412 	mls	r4, r5, r2, r4
  return ( Output );
 8000f28:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 8000f2c:	2000      	movs	r0, #0
 8000f2e:	f363 000f 	bfi	r0, r3, #0, #16
 8000f32:	f3c4 34cf 	ubfx	r4, r4, #15, #16
 8000f36:	f364 401f 	bfi	r0, r4, #16, #16
}
 8000f3a:	b005      	add	sp, #20
 8000f3c:	bd30      	pop	{r4, r5, pc}
 8000f3e:	bf00      	nop

08000f40 <MCM_Sqrt>:
  */
__weak int32_t MCM_Sqrt( int32_t wInput )
{
  int32_t wtemprootnew;

  if ( wInput > 0 )
 8000f40:	1e03      	subs	r3, r0, #0
 8000f42:	dd32      	ble.n	8000faa <MCM_Sqrt+0x6a>
    {
      wtemproot = ( int32_t )128;
    }
    else
    {
      wtemproot = ( int32_t )8192;
 8000f44:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000f48:	bfd4      	ite	le
 8000f4a:	2080      	movle	r0, #128	; 0x80
 8000f4c:	f44f 5000 	movgt.w	r0, #8192	; 0x2000
    }

    do
    {
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8000f50:	fb93 f2f0 	sdiv	r2, r3, r0
 8000f54:	4402      	add	r2, r0
      if ( wtemprootnew == wtemproot )
 8000f56:	ebb0 0f62 	cmp.w	r0, r2, asr #1
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8000f5a:	ea4f 0162 	mov.w	r1, r2, asr #1
      if ( wtemprootnew == wtemproot )
 8000f5e:	d025      	beq.n	8000fac <MCM_Sqrt+0x6c>
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8000f60:	fb93 f2f1 	sdiv	r2, r3, r1
 8000f64:	440a      	add	r2, r1
      if ( wtemprootnew == wtemproot )
 8000f66:	ebb1 0f62 	cmp.w	r1, r2, asr #1
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8000f6a:	ea4f 0062 	mov.w	r0, r2, asr #1
      if ( wtemprootnew == wtemproot )
 8000f6e:	d01d      	beq.n	8000fac <MCM_Sqrt+0x6c>
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8000f70:	fb93 f2f0 	sdiv	r2, r3, r0
 8000f74:	4402      	add	r2, r0
      if ( wtemprootnew == wtemproot )
 8000f76:	ebb0 0f62 	cmp.w	r0, r2, asr #1
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8000f7a:	ea4f 0162 	mov.w	r1, r2, asr #1
      if ( wtemprootnew == wtemproot )
 8000f7e:	d015      	beq.n	8000fac <MCM_Sqrt+0x6c>
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8000f80:	fb93 f2f1 	sdiv	r2, r3, r1
 8000f84:	440a      	add	r2, r1
      if ( wtemprootnew == wtemproot )
 8000f86:	ebb1 0f62 	cmp.w	r1, r2, asr #1
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8000f8a:	ea4f 0062 	mov.w	r0, r2, asr #1
      if ( wtemprootnew == wtemproot )
 8000f8e:	d00d      	beq.n	8000fac <MCM_Sqrt+0x6c>
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8000f90:	fb93 f2f0 	sdiv	r2, r3, r0
 8000f94:	4402      	add	r2, r0
      if ( wtemprootnew == wtemproot )
 8000f96:	ebb0 0f62 	cmp.w	r0, r2, asr #1
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8000f9a:	ea4f 0162 	mov.w	r1, r2, asr #1
      if ( wtemprootnew == wtemproot )
 8000f9e:	d005      	beq.n	8000fac <MCM_Sqrt+0x6c>
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8000fa0:	fb93 f0f1 	sdiv	r0, r3, r1
 8000fa4:	4408      	add	r0, r1
 8000fa6:	1040      	asrs	r0, r0, #1
      if ( wtemprootnew == wtemproot )
 8000fa8:	4770      	bx	lr
    while ( biter < 6u );

  }
  else
  {
    wtemprootnew = ( int32_t )0;
 8000faa:	2000      	movs	r0, #0
  }

  return ( wtemprootnew );
}
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop

08000fb0 <FOC_Clear>:
  ab_t NULL_ab = {(int16_t)0, (int16_t)0};
  qd_t NULL_qd = {(int16_t)0, (int16_t)0};
  alphabeta_t NULL_alphabeta = {(int16_t)0, (int16_t)0};

  FOCVars[bMotor].Iab = NULL_ab;
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
 8000fb0:	2226      	movs	r2, #38	; 0x26
{
 8000fb2:	b538      	push	{r3, r4, r5, lr}
 8000fb4:	fb00 f202 	mul.w	r2, r0, r2
 8000fb8:	4b15      	ldr	r3, [pc, #84]	; (8001010 <FOC_Clear+0x60>)
  FOCVars[bMotor].Iab = NULL_ab;
 8000fba:	2400      	movs	r4, #0
 8000fbc:	509c      	str	r4, [r3, r2]
{
 8000fbe:	4605      	mov	r5, r0
 8000fc0:	f102 0108 	add.w	r1, r2, #8
 8000fc4:	1898      	adds	r0, r3, r2
 8000fc6:	3210      	adds	r2, #16
 8000fc8:	4419      	add	r1, r3
 8000fca:	4413      	add	r3, r2
  FOCVars[bMotor].hTeref = (int16_t)0;
  FOCVars[bMotor].Vqd = NULL_qd;
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000fcc:	4a11      	ldr	r2, [pc, #68]	; (8001014 <FOC_Clear+0x64>)
  FOCVars[bMotor].Iab = NULL_ab;
 8000fce:	6044      	str	r4, [r0, #4]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000fd0:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
  FOCVars[bMotor].Iqd = NULL_qd;
 8000fd4:	604c      	str	r4, [r1, #4]
 8000fd6:	608c      	str	r4, [r1, #8]
  FOCVars[bMotor].Vqd = NULL_qd;
 8000fd8:	f8c3 4006 	str.w	r4, [r3, #6]
 8000fdc:	f8c3 400a 	str.w	r4, [r3, #10]
 8000fe0:	f8c3 400e 	str.w	r4, [r3, #14]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000fe4:	4621      	mov	r1, r4
 8000fe6:	f006 fd47 	bl	8007a78 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], (int32_t)0);
 8000fea:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <FOC_Clear+0x68>)
 8000fec:	4621      	mov	r1, r4
 8000fee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8000ff2:	f006 fd41 	bl	8007a78 <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 8000ff6:	4b09      	ldr	r3, [pc, #36]	; (800101c <FOC_Clear+0x6c>)
 8000ff8:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8000ffc:	f007 fd6e 	bl	8008adc <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001000:	4b07      	ldr	r3, [pc, #28]	; (8001020 <FOC_Clear+0x70>)
 8001002:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 8001006:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 800100a:	f006 bf4f 	b.w	8007eac <PWMC_SwitchOffPWM>
 800100e:	bf00      	nop
 8001010:	20000ee8 	.word	0x20000ee8
 8001014:	20000fa4 	.word	0x20000fa4
 8001018:	20000fa0 	.word	0x20000fa0
 800101c:	20000fb0 	.word	0x20000fb0
 8001020:	20000fb8 	.word	0x20000fb8

08001024 <MCboot>:
{
 8001024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  STM_Init(&STM[M1]);
 8001028:	4e5b      	ldr	r6, [pc, #364]	; (8001198 <MCboot+0x174>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 800102a:	4d5c      	ldr	r5, [pc, #368]	; (800119c <MCboot+0x178>)
  PID_HandleInit(&PIDSpeedHandle_M1);
 800102c:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 80011e4 <MCboot+0x1c0>
  HALL_Init (&HALL_M1);
 8001030:	4f5b      	ldr	r7, [pc, #364]	; (80011a0 <MCboot+0x17c>)
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 8001032:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 80011e8 <MCboot+0x1c4>
  PID_HandleInit(&PIDIqHandle_M1);
 8001036:	f8df b1b4 	ldr.w	fp, [pc, #436]	; 80011ec <MCboot+0x1c8>
  PID_HandleInit(&PIDIdHandle_M1);
 800103a:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 80011f0 <MCboot+0x1cc>
{
 800103e:	b087      	sub	sp, #28
 8001040:	4603      	mov	r3, r0
  STM_Init(&STM[M1]);
 8001042:	4630      	mov	r0, r6
{
 8001044:	e9cd 3101 	strd	r3, r1, [sp, #4]
  STM_Init(&STM[M1]);
 8001048:	f007 fe02 	bl	8008c50 <STM_Init>
  bMCBootCompleted = 0;
 800104c:	4a55      	ldr	r2, [pc, #340]	; (80011a4 <MCboot+0x180>)
  pCLM[M1] = &CircleLimitationM1;
 800104e:	4b56      	ldr	r3, [pc, #344]	; (80011a8 <MCboot+0x184>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8001050:	4856      	ldr	r0, [pc, #344]	; (80011ac <MCboot+0x188>)
 8001052:	6028      	str	r0, [r5, #0]
  bMCBootCompleted = 0;
 8001054:	2400      	movs	r4, #0
 8001056:	7014      	strb	r4, [r2, #0]
  pCLM[M1] = &CircleLimitationM1;
 8001058:	4a55      	ldr	r2, [pc, #340]	; (80011b0 <MCboot+0x18c>)
 800105a:	601a      	str	r2, [r3, #0]
  R3_1_Init(&PWM_Handle_M1);
 800105c:	f007 f9ac 	bl	80083b8 <R3_1_Init>
  pSTC[M1] = &SpeednTorqCtrlM1;
 8001060:	4d54      	ldr	r5, [pc, #336]	; (80011b4 <MCboot+0x190>)
  startTimers();
 8001062:	f006 fd91 	bl	8007b88 <startTimers>
  PID_HandleInit(&PIDSpeedHandle_M1);
 8001066:	4640      	mov	r0, r8
 8001068:	f006 fcf2 	bl	8007a50 <PID_HandleInit>
  pSTC[M1] = &SpeednTorqCtrlM1;
 800106c:	4b52      	ldr	r3, [pc, #328]	; (80011b8 <MCboot+0x194>)
 800106e:	602b      	str	r3, [r5, #0]
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 8001070:	f8c9 8000 	str.w	r8, [r9]
  HALL_Init (&HALL_M1);
 8001074:	4638      	mov	r0, r7
 8001076:	f006 f865 	bl	8007144 <HALL_Init>
  STC_Init(pSTC[M1],pPIDSpeed[M1], &HALL_M1._Super);
 800107a:	463a      	mov	r2, r7
 800107c:	f8d9 1000 	ldr.w	r1, [r9]
 8001080:	6828      	ldr	r0, [r5, #0]
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8001082:	f8df 8170 	ldr.w	r8, [pc, #368]	; 80011f4 <MCboot+0x1d0>
  STC_Init(pSTC[M1],pPIDSpeed[M1], &HALL_M1._Super);
 8001086:	f007 fd11 	bl	8008aac <STC_Init>
  PID_HandleInit(&PIDIqHandle_M1);
 800108a:	4658      	mov	r0, fp
 800108c:	f006 fce0 	bl	8007a50 <PID_HandleInit>
  PID_HandleInit(&PIDIdHandle_M1);
 8001090:	4650      	mov	r0, sl
 8001092:	f006 fcdd 	bl	8007a50 <PID_HandleInit>
  pPIDIq[M1] = &PIDIqHandle_M1;
 8001096:	4949      	ldr	r1, [pc, #292]	; (80011bc <MCboot+0x198>)
  pPIDId[M1] = &PIDIdHandle_M1;
 8001098:	4b49      	ldr	r3, [pc, #292]	; (80011c0 <MCboot+0x19c>)
  pPIDIq[M1] = &PIDIqHandle_M1;
 800109a:	f8c1 b000 	str.w	fp, [r1]
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 800109e:	4849      	ldr	r0, [pc, #292]	; (80011c4 <MCboot+0x1a0>)
  pPIDId[M1] = &PIDIdHandle_M1;
 80010a0:	f8c3 a000 	str.w	sl, [r3]
  NTC_Init(&TempSensorParamsM1);
 80010a4:	f8df b150 	ldr.w	fp, [pc, #336]	; 80011f8 <MCboot+0x1d4>
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 80010a8:	f8c8 0000 	str.w	r0, [r8]
  RVBS_Init(pBusSensorM1);
 80010ac:	f007 fc30 	bl	8008910 <RVBS_Init>
  pMPM[M1] = &PQD_MotorPowMeasM1;
 80010b0:	4a45      	ldr	r2, [pc, #276]	; (80011c8 <MCboot+0x1a4>)
 80010b2:	4b46      	ldr	r3, [pc, #280]	; (80011cc <MCboot+0x1a8>)
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 80010b4:	f8df a144 	ldr.w	sl, [pc, #324]	; 80011fc <MCboot+0x1d8>
  pMPM[M1] = &PQD_MotorPowMeasM1;
 80010b8:	6013      	str	r3, [r2, #0]
  NTC_Init(&TempSensorParamsM1);
 80010ba:	4658      	mov	r0, fp
  pMPM[M1]->pVBS = &(pBusSensorM1->_Super);
 80010bc:	f8d8 2000 	ldr.w	r2, [r8]
 80010c0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 80010c4:	f8c3 a10c 	str.w	sl, [r3, #268]	; 0x10c
  NTC_Init(&TempSensorParamsM1);
 80010c8:	f006 fc7e 	bl	80079c8 <NTC_Init>
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 80010cc:	4940      	ldr	r1, [pc, #256]	; (80011d0 <MCboot+0x1ac>)
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 80010ce:	4b41      	ldr	r3, [pc, #260]	; (80011d4 <MCboot+0x1b0>)
 80010d0:	4841      	ldr	r0, [pc, #260]	; (80011d8 <MCboot+0x1b4>)
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 80010d2:	f8c1 b000 	str.w	fp, [r1]
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 80010d6:	6018      	str	r0, [r3, #0]
  REMNG_Init(pREMNG[M1]);
 80010d8:	f007 fc68 	bl	80089ac <REMNG_Init>
  FOCVars[M1].bDriveInput = EXTERNAL;
 80010dc:	f04f 0b01 	mov.w	fp, #1
  FOC_Clear(M1);
 80010e0:	4620      	mov	r0, r4
 80010e2:	f7ff ff65 	bl	8000fb0 <FOC_Clear>
  FOCVars[M1].bDriveInput = EXTERNAL;
 80010e6:	f88a b024 	strb.w	fp, [sl, #36]	; 0x24
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 80010ea:	6828      	ldr	r0, [r5, #0]
 80010ec:	f007 fd9a 	bl	8008c24 <STC_GetDefaultIqdref>
 80010f0:	f8ca 0010 	str.w	r0, [sl, #16]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 80010f4:	6828      	ldr	r0, [r5, #0]
 80010f6:	f007 fd95 	bl	8008c24 <STC_GetDefaultIqdref>
 80010fa:	f3c0 400f 	ubfx	r0, r0, #16, #16
 80010fe:	f8aa 0014 	strh.w	r0, [sl, #20]
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 8001102:	4653      	mov	r3, sl
  oMCInterface[M1] = & Mci[M1];
 8001104:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 8001200 <MCboot+0x1dc>
 8001108:	4834      	ldr	r0, [pc, #208]	; (80011dc <MCboot+0x1b8>)
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 800110a:	682a      	ldr	r2, [r5, #0]
  oMCInterface[M1] = & Mci[M1];
 800110c:	f8ca 0000 	str.w	r0, [sl]
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 8001110:	4631      	mov	r1, r6
 8001112:	f7ff fd0b 	bl	8000b2c <MCI_Init>
  MCI_ExecSpeedRamp(oMCInterface[M1],
 8001116:	f8da 3000 	ldr.w	r3, [sl]
 800111a:	6828      	ldr	r0, [r5, #0]
 800111c:	9303      	str	r3, [sp, #12]
 800111e:	f007 fd77 	bl	8008c10 <STC_GetMecSpeedRefUnitDefault>
 8001122:	9b03      	ldr	r3, [sp, #12]
 8001124:	4601      	mov	r1, r0
 8001126:	4622      	mov	r2, r4
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff fd0d 	bl	8000b48 <MCI_ExecSpeedRamp>
  pMCIList[M1] = oMCInterface[M1];
 800112e:	9801      	ldr	r0, [sp, #4]
 8001130:	f8da 3000 	ldr.w	r3, [sl]
 8001134:	6003      	str	r3, [r0, #0]
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8001136:	4b19      	ldr	r3, [pc, #100]	; (800119c <MCboot+0x178>)
  MCT[M1].pPIDIq = pPIDIq[M1];
 8001138:	4820      	ldr	r0, [pc, #128]	; (80011bc <MCboot+0x198>)
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 800113a:	6819      	ldr	r1, [r3, #0]
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 800113c:	682a      	ldr	r2, [r5, #0]
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 800113e:	4b22      	ldr	r3, [pc, #136]	; (80011c8 <MCboot+0x1a4>)
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 8001140:	4d23      	ldr	r5, [pc, #140]	; (80011d0 <MCboot+0x1ac>)
  MCT[M1].pPIDIq = pPIDIq[M1];
 8001142:	f8d0 c000 	ldr.w	ip, [r0]
  MCT[M1].pPIDId = pPIDId[M1];
 8001146:	481e      	ldr	r0, [pc, #120]	; (80011c0 <MCboot+0x19c>)
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8001148:	f8d9 e000 	ldr.w	lr, [r9]
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 800114c:	682d      	ldr	r5, [r5, #0]
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 800114e:	f8d3 9000 	ldr.w	r9, [r3]
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 8001152:	f8d8 8000 	ldr.w	r8, [r8]
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8001156:	4b22      	ldr	r3, [pc, #136]	; (80011e0 <MCboot+0x1bc>)
  MCT[M1].pPIDId = pPIDId[M1];
 8001158:	6800      	ldr	r0, [r0, #0]
 800115a:	6098      	str	r0, [r3, #8]
  MCT[M1].pStateMachine = &STM[M1];
 800115c:	e9c3 2609 	strd	r2, r6, [r3, #36]	; 0x24
  MCT[M1].pPIDIq = pPIDIq[M1];
 8001160:	e9c3 ec00 	strd	lr, ip, [r3]
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 8001164:	e9c3 580b 	strd	r5, r8, [r3, #44]	; 0x2c
  MCT[M1].pSpeedSensorVirtual = MC_NULL;
 8001168:	e9c3 4407 	strd	r4, r4, [r3, #28]
  MCT[M1].pNTCRelay = MC_NULL;             /* relay is defined, oRelayM1*/
 800116c:	e9c3 440d 	strd	r4, r4, [r3, #52]	; 0x34
  MCT[M1].pFF = MC_NULL;
 8001170:	e9c3 4410 	strd	r4, r4, [r3, #64]	; 0x40
  MCT[M1].pSCC = MC_NULL;
 8001174:	e9c3 4412 	strd	r4, r4, [r3, #72]	; 0x48
  bMCBootCompleted = 1;
 8001178:	4a0a      	ldr	r2, [pc, #40]	; (80011a4 <MCboot+0x180>)
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 800117a:	6119      	str	r1, [r3, #16]
  MCT[M1].pSpeedSensorMain = (SpeednPosFdbk_Handle_t *) &HALL_M1;
 800117c:	619f      	str	r7, [r3, #24]
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 800117e:	f8c3 903c 	str.w	r9, [r3, #60]	; 0x3c
  MCT[M1].pPIDFluxWeakening = MC_NULL; /* if M1 doesn't has FW */
 8001182:	60dc      	str	r4, [r3, #12]
  MCT[M1].pRevupCtrl = MC_NULL;              /* only if M1 is not sensorless*/
 8001184:	615c      	str	r4, [r3, #20]
  MCT[M1].pOTT = MC_NULL;
 8001186:	651c      	str	r4, [r3, #80]	; 0x50
  pMCTList[M1] = &MCT[M1];
 8001188:	9902      	ldr	r1, [sp, #8]
 800118a:	600b      	str	r3, [r1, #0]
  bMCBootCompleted = 1;
 800118c:	f882 b000 	strb.w	fp, [r2]
}
 8001190:	b007      	add	sp, #28
 8001192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001196:	bf00      	nop
 8001198:	20000f80 	.word	0x20000f80
 800119c:	20000fb8 	.word	0x20000fb8
 80011a0:	200000b4 	.word	0x200000b4
 80011a4:	20000f86 	.word	0x20000f86
 80011a8:	20000f98 	.word	0x20000f98
 80011ac:	20000314 	.word	0x20000314
 80011b0:	20000000 	.word	0x20000000
 80011b4:	20000fb0 	.word	0x20000fb0
 80011b8:	200003d0 	.word	0x200003d0
 80011bc:	20000fa4 	.word	0x20000fa4
 80011c0:	20000fa0 	.word	0x20000fa0
 80011c4:	200003a8 	.word	0x200003a8
 80011c8:	20000f9c 	.word	0x20000f9c
 80011cc:	20000200 	.word	0x20000200
 80011d0:	20000fb4 	.word	0x20000fb4
 80011d4:	20000fac 	.word	0x20000fac
 80011d8:	20000390 	.word	0x20000390
 80011dc:	20000f64 	.word	0x20000f64
 80011e0:	20000f10 	.word	0x20000f10
 80011e4:	200001d4 	.word	0x200001d4
 80011e8:	20000fa8 	.word	0x20000fa8
 80011ec:	200001a8 	.word	0x200001a8
 80011f0:	2000017c 	.word	0x2000017c
 80011f4:	20000f94 	.word	0x20000f94
 80011f8:	20000404 	.word	0x20000404
 80011fc:	20000ee8 	.word	0x20000ee8
 8001200:	20000f90 	.word	0x20000f90

08001204 <FOC_InitAdditionalMethods>:
__weak void FOC_InitAdditionalMethods(uint8_t bMotor)
{
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
}
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop

08001208 <FOC_CalcCurrRef>:
  *         in oTSC parameters
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 8001208:	b510      	push	{r4, lr}

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 800120a:	4c08      	ldr	r4, [pc, #32]	; (800122c <FOC_CalcCurrRef+0x24>)
 800120c:	2326      	movs	r3, #38	; 0x26
 800120e:	fb03 4400 	mla	r4, r3, r0, r4
 8001212:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001216:	b103      	cbz	r3, 800121a <FOC_CalcCurrRef+0x12>

  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 8001218:	bd10      	pop	{r4, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 800121a:	4b05      	ldr	r3, [pc, #20]	; (8001230 <FOC_CalcCurrRef+0x28>)
 800121c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001220:	f007 fcc4 	bl	8008bac <STC_CalcTorqueReference>
 8001224:	83e0      	strh	r0, [r4, #30]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 8001226:	8220      	strh	r0, [r4, #16]
}
 8001228:	bd10      	pop	{r4, pc}
 800122a:	bf00      	nop
 800122c:	20000ee8 	.word	0x20000ee8
 8001230:	20000fb0 	.word	0x20000fb0

08001234 <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 8001234:	4b01      	ldr	r3, [pc, #4]	; (800123c <TSK_SetChargeBootCapDelayM1+0x8>)
 8001236:	8018      	strh	r0, [r3, #0]
}
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	20000f88 	.word	0x20000f88

08001240 <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (hBootCapDelayCounterM1 == 0)
 8001240:	4b03      	ldr	r3, [pc, #12]	; (8001250 <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 8001242:	8818      	ldrh	r0, [r3, #0]
 8001244:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8001246:	fab0 f080 	clz	r0, r0
 800124a:	0940      	lsrs	r0, r0, #5
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	20000f88 	.word	0x20000f88

08001254 <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 8001254:	4b01      	ldr	r3, [pc, #4]	; (800125c <TSK_SetStopPermanencyTimeM1+0x8>)
 8001256:	8018      	strh	r0, [r3, #0]
}
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	20000f8c 	.word	0x20000f8c

08001260 <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (hStopPermanencyCounterM1 == 0)
 8001260:	4b03      	ldr	r3, [pc, #12]	; (8001270 <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 8001262:	8818      	ldrh	r0, [r3, #0]
 8001264:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8001266:	fab0 f080 	clz	r0, r0
 800126a:	0940      	lsrs	r0, r0, #5
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	20000f8c 	.word	0x20000f8c

08001274 <TSK_MediumFrequencyTaskM1>:
{
 8001274:	b530      	push	{r4, r5, lr}
 8001276:	b083      	sub	sp, #12
  int16_t wAux = 0;
 8001278:	2300      	movs	r3, #0
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit( &HALL_M1, &wAux );
 800127a:	f10d 0106 	add.w	r1, sp, #6
 800127e:	484d      	ldr	r0, [pc, #308]	; (80013b4 <TSK_MediumFrequencyTaskM1+0x140>)
  int16_t wAux = 0;
 8001280:	f8ad 3006 	strh.w	r3, [sp, #6]
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit( &HALL_M1, &wAux );
 8001284:	f006 f8b4 	bl	80073f0 <HALL_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower( pMPM[M1] );
 8001288:	4d4b      	ldr	r5, [pc, #300]	; (80013b8 <TSK_MediumFrequencyTaskM1+0x144>)
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit( &HALL_M1, &wAux );
 800128a:	4604      	mov	r4, r0
  PQD_CalcElMotorPower( pMPM[M1] );
 800128c:	6828      	ldr	r0, [r5, #0]
 800128e:	f006 fc45 	bl	8007b1c <PQD_CalcElMotorPower>
  StateM1 = STM_GetState( &STM[M1] );
 8001292:	484a      	ldr	r0, [pc, #296]	; (80013bc <TSK_MediumFrequencyTaskM1+0x148>)
 8001294:	f007 fd72 	bl	8008d7c <STM_GetState>
  switch ( StateM1 )
 8001298:	1ec3      	subs	r3, r0, #3
 800129a:	2b0f      	cmp	r3, #15
 800129c:	d80d      	bhi.n	80012ba <TSK_MediumFrequencyTaskM1+0x46>
 800129e:	e8df f003 	tbb	[pc, r3]
 80012a2:	2b1f      	.short	0x2b1f
 80012a4:	65524330 	.word	0x65524330
 80012a8:	0c0c0c08 	.word	0x0c0c0c08
 80012ac:	6e0c0c0c 	.word	0x6e0c0c0c
 80012b0:	0e7c      	.short	0x0e7c
    STM_NextState( &STM[M1], IDLE );
 80012b2:	4842      	ldr	r0, [pc, #264]	; (80013bc <TSK_MediumFrequencyTaskM1+0x148>)
 80012b4:	2100      	movs	r1, #0
 80012b6:	f007 fced 	bl	8008c94 <STM_NextState>
}
 80012ba:	b003      	add	sp, #12
 80012bc:	bd30      	pop	{r4, r5, pc}
    HALL_Clear( &HALL_M1 );
 80012be:	483d      	ldr	r0, [pc, #244]	; (80013b4 <TSK_MediumFrequencyTaskM1+0x140>)
 80012c0:	f005 ffce 	bl	8007260 <HALL_Clear>
    if ( STM_NextState( &STM[M1], START ) == true )
 80012c4:	483d      	ldr	r0, [pc, #244]	; (80013bc <TSK_MediumFrequencyTaskM1+0x148>)
 80012c6:	2104      	movs	r1, #4
 80012c8:	f007 fce4 	bl	8008c94 <STM_NextState>
 80012cc:	2800      	cmp	r0, #0
 80012ce:	d0f4      	beq.n	80012ba <TSK_MediumFrequencyTaskM1+0x46>
      FOC_Clear( M1 );
 80012d0:	2000      	movs	r0, #0
 80012d2:	f7ff fe6d 	bl	8000fb0 <FOC_Clear>
      R3_1_SwitchOnPWM( pwmcHandle[M1] );
 80012d6:	4b3a      	ldr	r3, [pc, #232]	; (80013c0 <TSK_MediumFrequencyTaskM1+0x14c>)
 80012d8:	6818      	ldr	r0, [r3, #0]
 80012da:	f006 ff4b 	bl	8008174 <R3_1_SwitchOnPWM>
 80012de:	e7ec      	b.n	80012ba <TSK_MediumFrequencyTaskM1+0x46>
    R3_1_TurnOnLowSides( pwmcHandle[M1] );
 80012e0:	4b37      	ldr	r3, [pc, #220]	; (80013c0 <TSK_MediumFrequencyTaskM1+0x14c>)
 80012e2:	6818      	ldr	r0, [r3, #0]
 80012e4:	f006 ff1c 	bl	8008120 <R3_1_TurnOnLowSides>
    TSK_SetChargeBootCapDelayM1( CHARGE_BOOT_CAP_TICKS );
 80012e8:	2014      	movs	r0, #20
 80012ea:	f7ff ffa3 	bl	8001234 <TSK_SetChargeBootCapDelayM1>
    STM_NextState( &STM[M1], CHARGE_BOOT_CAP );
 80012ee:	2110      	movs	r1, #16
 80012f0:	4832      	ldr	r0, [pc, #200]	; (80013bc <TSK_MediumFrequencyTaskM1+0x148>)
 80012f2:	f007 fccf 	bl	8008c94 <STM_NextState>
    break;
 80012f6:	e7e0      	b.n	80012ba <TSK_MediumFrequencyTaskM1+0x46>
        STM_NextState( &STM[M1], START_RUN ); /* only for sensored*/
 80012f8:	2105      	movs	r1, #5
 80012fa:	4830      	ldr	r0, [pc, #192]	; (80013bc <TSK_MediumFrequencyTaskM1+0x148>)
 80012fc:	f007 fcca 	bl	8008c94 <STM_NextState>
    break;
 8001300:	e7db      	b.n	80012ba <TSK_MediumFrequencyTaskM1+0x46>
	  FOC_InitAdditionalMethods(M1);
 8001302:	2000      	movs	r0, #0
 8001304:	f7ff ff7e 	bl	8001204 <FOC_InitAdditionalMethods>
      FOC_CalcCurrRef( M1 );
 8001308:	2000      	movs	r0, #0
 800130a:	f7ff ff7d 	bl	8001208 <FOC_CalcCurrRef>
      STM_NextState( &STM[M1], RUN );
 800130e:	2106      	movs	r1, #6
 8001310:	482a      	ldr	r0, [pc, #168]	; (80013bc <TSK_MediumFrequencyTaskM1+0x148>)
 8001312:	f007 fcbf 	bl	8008c94 <STM_NextState>
    STC_ForceSpeedReferenceToCurrentSpeed( pSTC[M1] ); /* Init the reference speed to current speed */
 8001316:	4b2b      	ldr	r3, [pc, #172]	; (80013c4 <TSK_MediumFrequencyTaskM1+0x150>)
 8001318:	6818      	ldr	r0, [r3, #0]
 800131a:	f007 fc91 	bl	8008c40 <STC_ForceSpeedReferenceToCurrentSpeed>
    MCI_ExecBufferedCommands( oMCInterface[M1] ); /* Exec the speed ramp after changing of the speed sensor */
 800131e:	4b2a      	ldr	r3, [pc, #168]	; (80013c8 <TSK_MediumFrequencyTaskM1+0x154>)
 8001320:	6818      	ldr	r0, [r3, #0]
 8001322:	f7ff fc45 	bl	8000bb0 <MCI_ExecBufferedCommands>
    break;
 8001326:	e7c8      	b.n	80012ba <TSK_MediumFrequencyTaskM1+0x46>
    MCI_ExecBufferedCommands( oMCInterface[M1] );
 8001328:	4b27      	ldr	r3, [pc, #156]	; (80013c8 <TSK_MediumFrequencyTaskM1+0x154>)
 800132a:	6818      	ldr	r0, [r3, #0]
 800132c:	f7ff fc40 	bl	8000bb0 <MCI_ExecBufferedCommands>
    FOC_CalcCurrRef( M1 );
 8001330:	2000      	movs	r0, #0
 8001332:	f7ff ff69 	bl	8001208 <FOC_CalcCurrRef>
    if( !IsSpeedReliable )
 8001336:	2c00      	cmp	r4, #0
 8001338:	d1bf      	bne.n	80012ba <TSK_MediumFrequencyTaskM1+0x46>
      STM_FaultProcessing( &STM[M1], MC_SPEED_FDBK, 0 );
 800133a:	4622      	mov	r2, r4
 800133c:	2120      	movs	r1, #32
 800133e:	481f      	ldr	r0, [pc, #124]	; (80013bc <TSK_MediumFrequencyTaskM1+0x148>)
 8001340:	f007 fc8c 	bl	8008c5c <STM_FaultProcessing>
 8001344:	e7b9      	b.n	80012ba <TSK_MediumFrequencyTaskM1+0x46>
    R3_1_SwitchOffPWM( pwmcHandle[M1] );
 8001346:	4b1e      	ldr	r3, [pc, #120]	; (80013c0 <TSK_MediumFrequencyTaskM1+0x14c>)
 8001348:	6818      	ldr	r0, [r3, #0]
 800134a:	f006 ff5d 	bl	8008208 <R3_1_SwitchOffPWM>
    FOC_Clear( M1 );
 800134e:	2000      	movs	r0, #0
 8001350:	f7ff fe2e 	bl	8000fb0 <FOC_Clear>
    MPM_Clear( (MotorPowMeas_Handle_t*) pMPM[M1] );
 8001354:	6828      	ldr	r0, [r5, #0]
 8001356:	f006 faf5 	bl	8007944 <MPM_Clear>
    TSK_SetStopPermanencyTimeM1( STOPPERMANENCY_TICKS );
 800135a:	f44f 7048 	mov.w	r0, #800	; 0x320
 800135e:	f7ff ff79 	bl	8001254 <TSK_SetStopPermanencyTimeM1>
    STM_NextState( &STM[M1], STOP );
 8001362:	2108      	movs	r1, #8
 8001364:	4815      	ldr	r0, [pc, #84]	; (80013bc <TSK_MediumFrequencyTaskM1+0x148>)
 8001366:	f007 fc95 	bl	8008c94 <STM_NextState>
    break;
 800136a:	e7a6      	b.n	80012ba <TSK_MediumFrequencyTaskM1+0x46>
    if ( TSK_StopPermanencyTimeHasElapsedM1() )
 800136c:	f7ff ff78 	bl	8001260 <TSK_StopPermanencyTimeHasElapsedM1>
 8001370:	2800      	cmp	r0, #0
 8001372:	d0a2      	beq.n	80012ba <TSK_MediumFrequencyTaskM1+0x46>
      STM_NextState( &STM[M1], STOP_IDLE );
 8001374:	2109      	movs	r1, #9
 8001376:	4811      	ldr	r0, [pc, #68]	; (80013bc <TSK_MediumFrequencyTaskM1+0x148>)
 8001378:	f007 fc8c 	bl	8008c94 <STM_NextState>
 800137c:	e79d      	b.n	80012ba <TSK_MediumFrequencyTaskM1+0x46>
    if ( TSK_ChargeBootCapDelayHasElapsedM1() )
 800137e:	f7ff ff5f 	bl	8001240 <TSK_ChargeBootCapDelayHasElapsedM1>
 8001382:	2800      	cmp	r0, #0
 8001384:	d099      	beq.n	80012ba <TSK_MediumFrequencyTaskM1+0x46>
      PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_START );
 8001386:	4b0e      	ldr	r3, [pc, #56]	; (80013c0 <TSK_MediumFrequencyTaskM1+0x14c>)
 8001388:	2100      	movs	r1, #0
 800138a:	6818      	ldr	r0, [r3, #0]
 800138c:	f006 fd90 	bl	8007eb0 <PWMC_CurrentReadingCalibr>
      STM_NextState(&STM[M1],OFFSET_CALIB);
 8001390:	2111      	movs	r1, #17
 8001392:	480a      	ldr	r0, [pc, #40]	; (80013bc <TSK_MediumFrequencyTaskM1+0x148>)
 8001394:	f007 fc7e 	bl	8008c94 <STM_NextState>
 8001398:	e78f      	b.n	80012ba <TSK_MediumFrequencyTaskM1+0x46>
    if ( PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_EXEC ) )
 800139a:	4b09      	ldr	r3, [pc, #36]	; (80013c0 <TSK_MediumFrequencyTaskM1+0x14c>)
 800139c:	2101      	movs	r1, #1
 800139e:	6818      	ldr	r0, [r3, #0]
 80013a0:	f006 fd86 	bl	8007eb0 <PWMC_CurrentReadingCalibr>
 80013a4:	2800      	cmp	r0, #0
 80013a6:	d088      	beq.n	80012ba <TSK_MediumFrequencyTaskM1+0x46>
      STM_NextState( &STM[M1], CLEAR );
 80013a8:	2112      	movs	r1, #18
 80013aa:	4804      	ldr	r0, [pc, #16]	; (80013bc <TSK_MediumFrequencyTaskM1+0x148>)
 80013ac:	f007 fc72 	bl	8008c94 <STM_NextState>
 80013b0:	e783      	b.n	80012ba <TSK_MediumFrequencyTaskM1+0x46>
 80013b2:	bf00      	nop
 80013b4:	200000b4 	.word	0x200000b4
 80013b8:	20000f9c 	.word	0x20000f9c
 80013bc:	20000f80 	.word	0x20000f80
 80013c0:	20000fb8 	.word	0x20000fb8
 80013c4:	20000fb0 	.word	0x20000fb0
 80013c8:	20000f90 	.word	0x20000f90

080013cc <MC_Scheduler>:
{
 80013cc:	b538      	push	{r3, r4, r5, lr}
  if (bMCBootCompleted == 1)
 80013ce:	4b11      	ldr	r3, [pc, #68]	; (8001414 <MC_Scheduler+0x48>)
 80013d0:	781c      	ldrb	r4, [r3, #0]
 80013d2:	2c01      	cmp	r4, #1
 80013d4:	d000      	beq.n	80013d8 <MC_Scheduler+0xc>
}
 80013d6:	bd38      	pop	{r3, r4, r5, pc}
    if(hMFTaskCounterM1 > 0u)
 80013d8:	4d0f      	ldr	r5, [pc, #60]	; (8001418 <MC_Scheduler+0x4c>)
 80013da:	882b      	ldrh	r3, [r5, #0]
 80013dc:	b29b      	uxth	r3, r3
 80013de:	b1ab      	cbz	r3, 800140c <MC_Scheduler+0x40>
      hMFTaskCounterM1--;
 80013e0:	882b      	ldrh	r3, [r5, #0]
 80013e2:	3b01      	subs	r3, #1
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	802b      	strh	r3, [r5, #0]
    if(hBootCapDelayCounterM1 > 0u)
 80013e8:	4a0c      	ldr	r2, [pc, #48]	; (800141c <MC_Scheduler+0x50>)
 80013ea:	8813      	ldrh	r3, [r2, #0]
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	b11b      	cbz	r3, 80013f8 <MC_Scheduler+0x2c>
      hBootCapDelayCounterM1--;
 80013f0:	8813      	ldrh	r3, [r2, #0]
 80013f2:	3b01      	subs	r3, #1
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	8013      	strh	r3, [r2, #0]
    if(hStopPermanencyCounterM1 > 0u)
 80013f8:	4a09      	ldr	r2, [pc, #36]	; (8001420 <MC_Scheduler+0x54>)
 80013fa:	8813      	ldrh	r3, [r2, #0]
 80013fc:	b29b      	uxth	r3, r3
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d0e9      	beq.n	80013d6 <MC_Scheduler+0xa>
      hStopPermanencyCounterM1--;
 8001402:	8813      	ldrh	r3, [r2, #0]
 8001404:	3b01      	subs	r3, #1
 8001406:	b29b      	uxth	r3, r3
 8001408:	8013      	strh	r3, [r2, #0]
}
 800140a:	bd38      	pop	{r3, r4, r5, pc}
      TSK_MediumFrequencyTaskM1();
 800140c:	f7ff ff32 	bl	8001274 <TSK_MediumFrequencyTaskM1>
      hMFTaskCounterM1 = MF_TASK_OCCURENCE_TICKS;
 8001410:	802c      	strh	r4, [r5, #0]
 8001412:	e7e9      	b.n	80013e8 <MC_Scheduler+0x1c>
 8001414:	20000f86 	.word	0x20000f86
 8001418:	20000f8a 	.word	0x20000f8a
 800141c:	20000f88 	.word	0x20000f88
 8001420:	20000f8c 	.word	0x20000f8c

08001424 <MC_RunMotorControlTasks>:
{
 8001424:	b508      	push	{r3, lr}
  if ( bMCBootCompleted ) {
 8001426:	4b05      	ldr	r3, [pc, #20]	; (800143c <MC_RunMotorControlTasks+0x18>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	b903      	cbnz	r3, 800142e <MC_RunMotorControlTasks+0xa>
}
 800142c:	bd08      	pop	{r3, pc}
    MC_Scheduler();
 800142e:	f7ff ffcd 	bl	80013cc <MC_Scheduler>
}
 8001432:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    UI_Scheduler();
 8001436:	f001 baab 	b.w	8002990 <UI_Scheduler>
 800143a:	bf00      	nop
 800143c:	20000f86 	.word	0x20000f86

08001440 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 8001440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* USER CODE END HighFrequencyTask 0 */

  uint8_t bMotorNbr = 0;
  uint16_t hFOCreturn;

  HALL_CalcElAngle (&HALL_M1);
 8001444:	4830      	ldr	r0, [pc, #192]	; (8001508 <TSK_HighFrequencyTask+0xc8>)
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;

  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
  hElAngle = SPD_GetElAngle(speedHandle);
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001446:	4f31      	ldr	r7, [pc, #196]	; (800150c <TSK_HighFrequencyTask+0xcc>)
  Ialphabeta = MCM_Clarke(Iab);
  Iqd = MCM_Park(Ialphabeta, hElAngle);
  Vqd.q = PI_Controller(pPIDIq[M1],
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001448:	4c31      	ldr	r4, [pc, #196]	; (8001510 <TSK_HighFrequencyTask+0xd0>)
{
 800144a:	b086      	sub	sp, #24
  HALL_CalcElAngle (&HALL_M1);
 800144c:	f005 ffb2 	bl	80073b4 <HALL_CalcElAngle>
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8001450:	4b30      	ldr	r3, [pc, #192]	; (8001514 <TSK_HighFrequencyTask+0xd4>)
 8001452:	6818      	ldr	r0, [r3, #0]
 8001454:	f007 fb40 	bl	8008ad8 <STC_GetSpeedSensor>
 8001458:	4605      	mov	r5, r0
  hElAngle = SPD_GetElAngle(speedHandle);
 800145a:	f007 fadb 	bl	8008a14 <SPD_GetElAngle>
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 800145e:	a903      	add	r1, sp, #12
  hElAngle = SPD_GetElAngle(speedHandle);
 8001460:	4606      	mov	r6, r0
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001462:	6838      	ldr	r0, [r7, #0]
 8001464:	f006 fbea 	bl	8007c3c <PWMC_GetPhaseCurrents>
  Ialphabeta = MCM_Clarke(Iab);
 8001468:	9803      	ldr	r0, [sp, #12]
 800146a:	f7ff fc8f 	bl	8000d8c <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 800146e:	4631      	mov	r1, r6
  Ialphabeta = MCM_Clarke(Iab);
 8001470:	9004      	str	r0, [sp, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001472:	f7ff fd01 	bl	8000e78 <MCM_Park>
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001476:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 800147a:	9001      	str	r0, [sp, #4]
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 800147c:	b203      	sxth	r3, r0
  Vqd.q = PI_Controller(pPIDIq[M1],
 800147e:	1ac9      	subs	r1, r1, r3
 8001480:	4b25      	ldr	r3, [pc, #148]	; (8001518 <TSK_HighFrequencyTask+0xd8>)
 8001482:	6818      	ldr	r0, [r3, #0]
 8001484:	f006 fb04 	bl	8007a90 <PI_Controller>

  Vqd.d = PI_Controller(pPIDId[M1],
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8001488:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 800148c:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
  Vqd.d = PI_Controller(pPIDId[M1],
 8001490:	1ac9      	subs	r1, r1, r3
 8001492:	4b22      	ldr	r3, [pc, #136]	; (800151c <TSK_HighFrequencyTask+0xdc>)
  Vqd.q = PI_Controller(pPIDIq[M1],
 8001494:	4680      	mov	r8, r0
  Vqd.d = PI_Controller(pPIDId[M1],
 8001496:	6818      	ldr	r0, [r3, #0]
 8001498:	f006 fafa 	bl	8007a90 <PI_Controller>

  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 800149c:	4b20      	ldr	r3, [pc, #128]	; (8001520 <TSK_HighFrequencyTask+0xe0>)
 800149e:	f8ad 8008 	strh.w	r8, [sp, #8]
 80014a2:	f8ad 000a 	strh.w	r0, [sp, #10]
 80014a6:	9902      	ldr	r1, [sp, #8]
 80014a8:	6818      	ldr	r0, [r3, #0]
 80014aa:	f005 fdf1 	bl	8007090 <Circle_Limitation>
 80014ae:	4603      	mov	r3, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 80014b0:	4628      	mov	r0, r5
  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 80014b2:	fa0f f883 	sxth.w	r8, r3
 80014b6:	141d      	asrs	r5, r3, #16
 80014b8:	9302      	str	r3, [sp, #8]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 80014ba:	f007 fab3 	bl	8008a24 <SPD_GetInstElSpeedDpp>
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 80014be:	4631      	mov	r1, r6
 80014c0:	9802      	ldr	r0, [sp, #8]
 80014c2:	f7ff fd1d 	bl	8000f00 <MCM_Rev_Park>
 80014c6:	4601      	mov	r1, r0
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 80014c8:	6838      	ldr	r0, [r7, #0]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 80014ca:	9105      	str	r1, [sp, #20]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 80014cc:	f006 fbb8 	bl	8007c40 <PWMC_SetPhaseVoltage>
  FOCVars[M1].Vqd = Vqd;
  FOCVars[M1].Iab = Iab;
 80014d0:	9b03      	ldr	r3, [sp, #12]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 80014d2:	9a04      	ldr	r2, [sp, #16]
  FOCVars[M1].Iab = Iab;
 80014d4:	6023      	str	r3, [r4, #0]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 80014d6:	4601      	mov	r1, r0
  FOCVars[M1].Iqd = Iqd;
 80014d8:	9b01      	ldr	r3, [sp, #4]
  FOCVars[M1].Valphabeta = Valphabeta;
 80014da:	9805      	ldr	r0, [sp, #20]
  FOCVars[M1].Vqd = Vqd;
 80014dc:	f8a4 8016 	strh.w	r8, [r4, #22]
  if(hFOCreturn == MC_FOC_DURATION)
 80014e0:	2901      	cmp	r1, #1
  FOCVars[M1].Vqd = Vqd;
 80014e2:	8325      	strh	r5, [r4, #24]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 80014e4:	6062      	str	r2, [r4, #4]
  FOCVars[M1].Iqd = Iqd;
 80014e6:	60e3      	str	r3, [r4, #12]
  FOCVars[M1].Valphabeta = Valphabeta;
 80014e8:	f8c4 001a 	str.w	r0, [r4, #26]
  FOCVars[M1].hElAngle = hElAngle;
 80014ec:	8426      	strh	r6, [r4, #32]
  if(hFOCreturn == MC_FOC_DURATION)
 80014ee:	d003      	beq.n	80014f8 <TSK_HighFrequencyTask+0xb8>
}
 80014f0:	2000      	movs	r0, #0
 80014f2:	b006      	add	sp, #24
 80014f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    STM_FaultProcessing(&STM[M1], MC_FOC_DURATION, 0);
 80014f8:	2200      	movs	r2, #0
 80014fa:	480a      	ldr	r0, [pc, #40]	; (8001524 <TSK_HighFrequencyTask+0xe4>)
 80014fc:	f007 fbae 	bl	8008c5c <STM_FaultProcessing>
}
 8001500:	2000      	movs	r0, #0
 8001502:	b006      	add	sp, #24
 8001504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001508:	200000b4 	.word	0x200000b4
 800150c:	20000fb8 	.word	0x20000fb8
 8001510:	20000ee8 	.word	0x20000ee8
 8001514:	20000fb0 	.word	0x20000fb0
 8001518:	20000fa4 	.word	0x20000fa4
 800151c:	20000fa0 	.word	0x20000fa0
 8001520:	20000f98 	.word	0x20000f98
 8001524:	20000f80 	.word	0x20000f80

08001528 <TSK_SafetyTask_PWMOFF>:
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink
  * @retval None
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 8001528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */

  uint16_t CodeReturn = MC_NO_ERROR;
  uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};

  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 800152a:	4b20      	ldr	r3, [pc, #128]	; (80015ac <TSK_SafetyTask_PWMOFF+0x84>)
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 800152c:	4e20      	ldr	r6, [pc, #128]	; (80015b0 <TSK_SafetyTask_PWMOFF+0x88>)
{
 800152e:	4604      	mov	r4, r0
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8001530:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001534:	f006 fa5a 	bl	80079ec <NTC_CalcAvTemp>
 8001538:	4605      	mov	r5, r0
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 800153a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800153e:	f006 fce1 	bl	8007f04 <PWMC_CheckOverCurrent>
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8001542:	f005 050e 	and.w	r5, r5, #14
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8001546:	4328      	orrs	r0, r5
 8001548:	b285      	uxth	r5, r0
                                                                                 (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if(bMotor == M1)
 800154a:	b334      	cbz	r4, 800159a <TSK_SafetyTask_PWMOFF+0x72>
  {
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(pBusSensorM1);
  }

  STM_FaultProcessing(&STM[bMotor], CodeReturn, ~CodeReturn); /* Update the STM according error code */
 800154c:	4f19      	ldr	r7, [pc, #100]	; (80015b4 <TSK_SafetyTask_PWMOFF+0x8c>)
 800154e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8001552:	eb07 0743 	add.w	r7, r7, r3, lsl #1
 8001556:	43ea      	mvns	r2, r5
 8001558:	b292      	uxth	r2, r2
 800155a:	4629      	mov	r1, r5
 800155c:	4638      	mov	r0, r7
 800155e:	f007 fb7d 	bl	8008c5c <STM_FaultProcessing>
  switch (STM_GetState(&STM[bMotor])) /* Acts on PWM outputs in case of faults */
 8001562:	4638      	mov	r0, r7
 8001564:	f007 fc0a 	bl	8008d7c <STM_GetState>
 8001568:	280a      	cmp	r0, #10
 800156a:	d002      	beq.n	8001572 <TSK_SafetyTask_PWMOFF+0x4a>
 800156c:	280b      	cmp	r0, #11
 800156e:	d00e      	beq.n	800158e <TSK_SafetyTask_PWMOFF+0x66>
    break;
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 8001570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001572:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8001576:	f006 fc99 	bl	8007eac <PWMC_SwitchOffPWM>
    FOC_Clear(bMotor);
 800157a:	4620      	mov	r0, r4
 800157c:	f7ff fd18 	bl	8000fb0 <FOC_Clear>
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 8001580:	4b0d      	ldr	r3, [pc, #52]	; (80015b8 <TSK_SafetyTask_PWMOFF+0x90>)
 8001582:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
 8001586:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 800158a:	f006 b9db 	b.w	8007944 <MPM_Clear>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 800158e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
}
 8001592:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001596:	f006 bc89 	b.w	8007eac <PWMC_SwitchOffPWM>
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(pBusSensorM1);
 800159a:	4b08      	ldr	r3, [pc, #32]	; (80015bc <TSK_SafetyTask_PWMOFF+0x94>)
 800159c:	6818      	ldr	r0, [r3, #0]
 800159e:	f007 f9cf 	bl	8008940 <RVBS_CalcAvVbus>
 80015a2:	f000 000e 	and.w	r0, r0, #14
 80015a6:	4305      	orrs	r5, r0
 80015a8:	e7d0      	b.n	800154c <TSK_SafetyTask_PWMOFF+0x24>
 80015aa:	bf00      	nop
 80015ac:	20000fb4 	.word	0x20000fb4
 80015b0:	20000fb8 	.word	0x20000fb8
 80015b4:	20000f80 	.word	0x20000f80
 80015b8:	20000f9c 	.word	0x20000f9c
 80015bc:	20000f94 	.word	0x20000f94

080015c0 <TSK_SafetyTask>:
{
 80015c0:	b508      	push	{r3, lr}
  if (bMCBootCompleted == 1)
 80015c2:	4b06      	ldr	r3, [pc, #24]	; (80015dc <TSK_SafetyTask+0x1c>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d000      	beq.n	80015cc <TSK_SafetyTask+0xc>
}
 80015ca:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_PWMOFF(M1);
 80015cc:	2000      	movs	r0, #0
 80015ce:	f7ff ffab 	bl	8001528 <TSK_SafetyTask_PWMOFF>
}
 80015d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv ();
 80015d6:	f000 becf 	b.w	8002378 <RCM_ExecUserConv>
 80015da:	bf00      	nop
 80015dc:	20000f86 	.word	0x20000f86

080015e0 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 80015e0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */

  R3_1_SwitchOffPWM(pwmcHandle[M1]);
 80015e2:	4b05      	ldr	r3, [pc, #20]	; (80015f8 <TSK_HardwareFaultTask+0x18>)
 80015e4:	6818      	ldr	r0, [r3, #0]
 80015e6:	f006 fe0f 	bl	8008208 <R3_1_SwitchOffPWM>
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 80015ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
 80015ee:	4803      	ldr	r0, [pc, #12]	; (80015fc <TSK_HardwareFaultTask+0x1c>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	2180      	movs	r1, #128	; 0x80
 80015f4:	f007 bb32 	b.w	8008c5c <STM_FaultProcessing>
 80015f8:	20000fb8 	.word	0x20000fb8
 80015fc:	20000f80 	.word	0x20000f80

08001600 <startMediumFrequencyTask>:

/* startMediumFrequencyTask function */
void startMediumFrequencyTask(void const * argument)
{
 8001600:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MF task 1 */
  /* Infinite loop */
  for(;;)
  {
    /* delay of 500us */
    vTaskDelay(1);
 8001602:	2001      	movs	r0, #1
 8001604:	f004 ffd4 	bl	80065b0 <vTaskDelay>
    MC_RunMotorControlTasks();
 8001608:	f7ff ff0c 	bl	8001424 <MC_RunMotorControlTasks>
  for(;;)
 800160c:	e7f9      	b.n	8001602 <startMediumFrequencyTask+0x2>
 800160e:	bf00      	nop

08001610 <StartSafetyTask>:
  /* USER CODE END MF task 1 */
}

/* startSafetyTask function */
void StartSafetyTask(void const * argument)
{
 8001610:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SF task 1 */
  /* Infinite loop */
  for(;;)
  {
    /* delay of 500us */
    vTaskDelay(1);
 8001612:	2001      	movs	r0, #1
 8001614:	f004 ffcc 	bl	80065b0 <vTaskDelay>
    TSK_SafetyTask();
 8001618:	f7ff ffd2 	bl	80015c0 <TSK_SafetyTask>
  for(;;)
 800161c:	e7f9      	b.n	8001612 <StartSafetyTask+0x2>
 800161e:	bf00      	nop

08001620 <mc_lock_pins>:

 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration
  */
__weak void mc_lock_pins (void)
{
 8001620:	b470      	push	{r4, r5, r6}
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001622:	4a3e      	ldr	r2, [pc, #248]	; (800171c <mc_lock_pins+0xfc>)
 8001624:	4b3e      	ldr	r3, [pc, #248]	; (8001720 <mc_lock_pins+0x100>)
 8001626:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001628:	2108      	movs	r1, #8
 800162a:	b091      	sub	sp, #68	; 0x44
 800162c:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800162e:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001630:	69d3      	ldr	r3, [r2, #28]
 8001632:	930f      	str	r3, [sp, #60]	; 0x3c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001634:	f44f 3082 	mov.w	r0, #66560	; 0x10400
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001638:	f44f 6580 	mov.w	r5, #1024	; 0x400
  (void) temp;
 800163c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800163e:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001640:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001642:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001644:	69d1      	ldr	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001646:	4b37      	ldr	r3, [pc, #220]	; (8001724 <mc_lock_pins+0x104>)
  temp = READ_REG(GPIOx->LCKR);
 8001648:	910e      	str	r1, [sp, #56]	; 0x38
  (void) temp;
 800164a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800164c:	f44f 31c0 	mov.w	r1, #98304	; 0x18000
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001650:	f44f 4400 	mov.w	r4, #32768	; 0x8000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001654:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001656:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001658:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800165a:	69d9      	ldr	r1, [r3, #28]
 800165c:	910d      	str	r1, [sp, #52]	; 0x34
  (void) temp;
 800165e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001660:	4931      	ldr	r1, [pc, #196]	; (8001728 <mc_lock_pins+0x108>)
 8001662:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001664:	f44f 7480 	mov.w	r4, #256	; 0x100
 8001668:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800166a:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800166c:	69d9      	ldr	r1, [r3, #28]
 800166e:	910c      	str	r1, [sp, #48]	; 0x30
  (void) temp;
 8001670:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001672:	f44f 3181 	mov.w	r1, #66048	; 0x10200
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001676:	f44f 7400 	mov.w	r4, #512	; 0x200
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800167a:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800167c:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800167e:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001680:	69d9      	ldr	r1, [r3, #28]
 8001682:	910b      	str	r1, [sp, #44]	; 0x2c
  (void) temp;
 8001684:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001686:	4929      	ldr	r1, [pc, #164]	; (800172c <mc_lock_pins+0x10c>)
 8001688:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800168a:	2440      	movs	r4, #64	; 0x40
 800168c:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800168e:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001690:	69d9      	ldr	r1, [r3, #28]
 8001692:	910a      	str	r1, [sp, #40]	; 0x28
  (void) temp;
 8001694:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001696:	f04f 1101 	mov.w	r1, #65537	; 0x10001
  WRITE_REG(GPIOx->LCKR, PinMask);
 800169a:	2401      	movs	r4, #1
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800169c:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800169e:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80016a0:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80016a2:	69d6      	ldr	r6, [r2, #28]
 80016a4:	9609      	str	r6, [sp, #36]	; 0x24
  (void) temp;
 80016a6:	9e09      	ldr	r6, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80016a8:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80016aa:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80016ac:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80016ae:	69d8      	ldr	r0, [r3, #28]
 80016b0:	9008      	str	r0, [sp, #32]
  (void) temp;
 80016b2:	9d08      	ldr	r5, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80016b4:	481e      	ldr	r0, [pc, #120]	; (8001730 <mc_lock_pins+0x110>)
 80016b6:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80016b8:	2502      	movs	r5, #2
 80016ba:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80016bc:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80016be:	69d2      	ldr	r2, [r2, #28]
 80016c0:	9207      	str	r2, [sp, #28]
  (void) temp;
 80016c2:	9a07      	ldr	r2, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80016c4:	4a1b      	ldr	r2, [pc, #108]	; (8001734 <mc_lock_pins+0x114>)
 80016c6:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80016c8:	2680      	movs	r6, #128	; 0x80
 80016ca:	61de      	str	r6, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80016cc:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80016ce:	69da      	ldr	r2, [r3, #28]
 80016d0:	9206      	str	r2, [sp, #24]
  (void) temp;
 80016d2:	9a06      	ldr	r2, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80016d4:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80016d6:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80016d8:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80016da:	69da      	ldr	r2, [r3, #28]
 80016dc:	9205      	str	r2, [sp, #20]
  (void) temp;
 80016de:	9a05      	ldr	r2, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80016e0:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80016e2:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80016e4:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80016e6:	69db      	ldr	r3, [r3, #28]
 80016e8:	9304      	str	r3, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80016ea:	4b13      	ldr	r3, [pc, #76]	; (8001738 <mc_lock_pins+0x118>)
  (void) temp;
 80016ec:	9a04      	ldr	r2, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80016ee:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80016f0:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80016f2:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80016f4:	69da      	ldr	r2, [r3, #28]
 80016f6:	9203      	str	r2, [sp, #12]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80016f8:	2004      	movs	r0, #4
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80016fa:	4a10      	ldr	r2, [pc, #64]	; (800173c <mc_lock_pins+0x11c>)
  (void) temp;
 80016fc:	9d03      	ldr	r5, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80016fe:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001700:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001702:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001704:	69da      	ldr	r2, [r3, #28]
 8001706:	9202      	str	r2, [sp, #8]
  (void) temp;
 8001708:	9a02      	ldr	r2, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800170a:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800170c:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800170e:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001710:	69db      	ldr	r3, [r3, #28]
 8001712:	9301      	str	r3, [sp, #4]
  (void) temp;
 8001714:	9b01      	ldr	r3, [sp, #4]
LL_GPIO_LockPin(M1_CURR_AMPL_U_GPIO_Port, M1_CURR_AMPL_U_Pin);
LL_GPIO_LockPin(M1_BUS_VOLTAGE_GPIO_Port, M1_BUS_VOLTAGE_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_V_GPIO_Port, M1_CURR_AMPL_V_Pin);
LL_GPIO_LockPin(M1_TEMPERATURE_GPIO_Port, M1_TEMPERATURE_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_W_GPIO_Port, M1_CURR_AMPL_W_Pin);
}
 8001716:	b011      	add	sp, #68	; 0x44
 8001718:	bc70      	pop	{r4, r5, r6}
 800171a:	4770      	bx	lr
 800171c:	40020400 	.word	0x40020400
 8001720:	00010008 	.word	0x00010008
 8001724:	40020000 	.word	0x40020000
 8001728:	00010100 	.word	0x00010100
 800172c:	00010040 	.word	0x00010040
 8001730:	00010002 	.word	0x00010002
 8001734:	00010080 	.word	0x00010080
 8001738:	40020800 	.word	0x40020800
 800173c:	00010004 	.word	0x00010004

08001740 <MCP_ReceivedFrame>:
* @param  Code code value of frame to send.
* @param  buffer frame data buffer.
* @param  Size size of data frame.
*/
__weak void MCP_ReceivedFrame(MCP_Handle_t *pHandle, uint8_t Code, uint8_t *buffer, uint8_t Size)
{
 8001740:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001742:	460c      	mov	r4, r1
 8001744:	b08d      	sub	sp, #52	; 0x34
 8001746:	4616      	mov	r6, r2
  bool RequireAck = true;
  bool bNoError = false; // Default is error
 8001748:	2100      	movs	r1, #0
  uint8_t bErrorCode;

  /* Protocol version >3.3 motor selection inside Frame ID */
  uint8_t bMotorSelection = (Code & 0xE0) >> 5; /* Mask: 1110|0000 */
  if (bMotorSelection != 0)
 800174a:	0962      	lsrs	r2, r4, #5
{
 800174c:	4605      	mov	r5, r0
 800174e:	461f      	mov	r7, r3
  bool bNoError = false; // Default is error
 8001750:	f88d 1009 	strb.w	r1, [sp, #9]
  if (bMotorSelection != 0)
 8001754:	d122      	bne.n	800179c <MCP_ReceivedFrame+0x5c>
      Code = MC_PROTOCOL_CODE_NONE; /* Error */
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
    }
  }

  switch (Code)
 8001756:	2c1e      	cmp	r4, #30
 8001758:	d871      	bhi.n	800183e <MCP_ReceivedFrame+0xfe>
 800175a:	e8df f014 	tbh	[pc, r4, lsl #1]
 800175e:	0064      	.short	0x0064
 8001760:	019102ad 	.word	0x019102ad
 8001764:	0070017d 	.word	0x0070017d
 8001768:	01530070 	.word	0x01530070
 800176c:	0036013e 	.word	0x0036013e
 8001770:	010b011c 	.word	0x010b011c
 8001774:	00d300f4 	.word	0x00d300f4
 8001778:	00af00c3 	.word	0x00af00c3
 800177c:	00700070 	.word	0x00700070
 8001780:	00640070 	.word	0x00640070
 8001784:	007f0090 	.word	0x007f0090
 8001788:	00700070 	.word	0x00700070
 800178c:	00700070 	.word	0x00700070
 8001790:	00700070 	.word	0x00700070
 8001794:	00700070 	.word	0x00700070
 8001798:	00760070 	.word	0x00760070
    if (UI_SetReg(&pHandle->_Super, MC_PROTOCOL_REG_TARGET_MOTOR, bMotorSelection - 1))
 800179c:	3a01      	subs	r2, #1
 800179e:	f001 f937 	bl	8002a10 <UI_SetReg>
 80017a2:	b110      	cbz	r0, 80017aa <MCP_ReceivedFrame+0x6a>
      Code &= 0x1F; /* Mask: 0001|1111 */
 80017a4:	f004 041f 	and.w	r4, r4, #31
 80017a8:	e7d5      	b.n	8001756 <MCP_ReceivedFrame+0x16>
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
 80017aa:	230b      	movs	r3, #11
    break;
  }

  if (RequireAck)
  {
    if (bNoError)
 80017ac:	f89d 0009 	ldrb.w	r0, [sp, #9]
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
 80017b0:	f88d 300e 	strb.w	r3, [sp, #14]
    if (bNoError)
 80017b4:	2800      	cmp	r0, #0
 80017b6:	d13a      	bne.n	800182e <MCP_ReceivedFrame+0xee>
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
    }
    else
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_ERROR, &bErrorCode, 1);
 80017b8:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 80017bc:	2301      	movs	r3, #1
 80017be:	f10d 020e 	add.w	r2, sp, #14
 80017c2:	21ff      	movs	r1, #255	; 0xff
 80017c4:	47a0      	blx	r4
    }
  }
}
 80017c6:	b00d      	add	sp, #52	; 0x34
 80017c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      UI_GetRevupData(&pHandle->_Super, buffer[0], &Durationms, &FinalMecSpeedUnit, &FinalTorque);
 80017ca:	f10d 000e 	add.w	r0, sp, #14
 80017ce:	7831      	ldrb	r1, [r6, #0]
 80017d0:	9000      	str	r0, [sp, #0]
 80017d2:	ab03      	add	r3, sp, #12
 80017d4:	f10d 020a 	add.w	r2, sp, #10
 80017d8:	4628      	mov	r0, r5
 80017da:	f001 fc37 	bl	800304c <UI_GetRevupData>
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 80017de:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
      outBuff[4] = (uint8_t)(FinalTorque);
 80017e2:	f9bd 100e 	ldrsh.w	r1, [sp, #14]
      outBuff[6] = (uint8_t)(Durationms);
 80017e6:	f8bd 200a 	ldrh.w	r2, [sp, #10]
      outBuff[4] = (uint8_t)(FinalTorque);
 80017ea:	f88d 1014 	strb.w	r1, [sp, #20]
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 80017ee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80017f2:	005b      	lsls	r3, r3, #1
      outBuff[1] = (uint8_t)(rpm >> 8);
 80017f4:	1218      	asrs	r0, r3, #8
      outBuff[0] = (uint8_t)(rpm);
 80017f6:	f88d 3010 	strb.w	r3, [sp, #16]
      outBuff[1] = (uint8_t)(rpm >> 8);
 80017fa:	f88d 0011 	strb.w	r0, [sp, #17]
      outBuff[2] = (uint8_t)(rpm >> 16);
 80017fe:	1418      	asrs	r0, r3, #16
      outBuff[3] = (uint8_t)(rpm >> 24);
 8001800:	161b      	asrs	r3, r3, #24
      outBuff[2] = (uint8_t)(rpm >> 16);
 8001802:	f88d 0012 	strb.w	r0, [sp, #18]
      outBuff[3] = (uint8_t)(rpm >> 24);
 8001806:	f88d 3013 	strb.w	r3, [sp, #19]
      outBuff[5] = (uint8_t)(FinalTorque >> 8);
 800180a:	1208      	asrs	r0, r1, #8
      outBuff[7] = (uint8_t)(Durationms >> 8);
 800180c:	0a13      	lsrs	r3, r2, #8
      outBuff[5] = (uint8_t)(FinalTorque >> 8);
 800180e:	f88d 0015 	strb.w	r0, [sp, #21]
      outBuff[6] = (uint8_t)(Durationms);
 8001812:	f88d 2016 	strb.w	r2, [sp, #22]
      outBuff[7] = (uint8_t)(Durationms >> 8);
 8001816:	f88d 3017 	strb.w	r3, [sp, #23]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 8 );
 800181a:	69ec      	ldr	r4, [r5, #28]
 800181c:	69a8      	ldr	r0, [r5, #24]
 800181e:	2308      	movs	r3, #8
 8001820:	aa04      	add	r2, sp, #16
 8001822:	21f0      	movs	r1, #240	; 0xf0
 8001824:	47a0      	blx	r4
    if (bNoError)
 8001826:	f89d 0009 	ldrb.w	r0, [sp, #9]
 800182a:	2800      	cmp	r0, #0
 800182c:	d0c4      	beq.n	80017b8 <MCP_ReceivedFrame+0x78>
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
 800182e:	2300      	movs	r3, #0
 8001830:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8001834:	461a      	mov	r2, r3
 8001836:	21f0      	movs	r1, #240	; 0xf0
 8001838:	47a0      	blx	r4
}
 800183a:	b00d      	add	sp, #52	; 0x34
 800183c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      bErrorCode = ERROR_BAD_FRAME_ID;
 800183e:	2301      	movs	r3, #1
    if (bNoError)
 8001840:	f89d 0009 	ldrb.w	r0, [sp, #9]
      bErrorCode = ERROR_BAD_FRAME_ID;
 8001844:	f88d 300e 	strb.w	r3, [sp, #14]
  if (RequireAck)
 8001848:	e7b4      	b.n	80017b4 <MCP_ReceivedFrame+0x74>
    	switch(bSysID)
 800184a:	7833      	ldrb	r3, [r6, #0]
 800184c:	2b03      	cmp	r3, #3
 800184e:	d8ea      	bhi.n	8001826 <MCP_ReceivedFrame+0xe6>
 8001850:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001854:	038c0397 	.word	0x038c0397
 8001858:	03700381 	.word	0x03700381
    	int16_t throttle_IQ = buffer[4] + (buffer[5] << 8) + (buffer[6] << 16) + (buffer[7] << 24);
 800185c:	7973      	ldrb	r3, [r6, #5]
 800185e:	7930      	ldrb	r0, [r6, #4]
 8001860:	eb00 2003 	add.w	r0, r0, r3, lsl #8
    	bNoError = true;
 8001864:	2401      	movs	r4, #1
    	ESCOOTER_InputThrottleSignal(throttle_IQ);
 8001866:	b200      	sxth	r0, r0
    	bNoError = true;
 8001868:	f88d 4009 	strb.w	r4, [sp, #9]
    	ESCOOTER_InputThrottleSignal(throttle_IQ);
 800186c:	f003 fa14 	bl	8004c98 <ESCOOTER_InputThrottleSignal>
    	pHandle -> fFcpSend(pHandle->pFCP,ACK_NOERROR, &THROTTLE_SIGNAL_RECEIVED,1);
 8001870:	69ee      	ldr	r6, [r5, #28]
 8001872:	4a7e      	ldr	r2, [pc, #504]	; (8001a6c <MCP_ReceivedFrame+0x32c>)
 8001874:	69a8      	ldr	r0, [r5, #24]
 8001876:	4623      	mov	r3, r4
 8001878:	21f0      	movs	r1, #240	; 0xf0
 800187a:	47b0      	blx	r6
  if (RequireAck)
 800187c:	e7a3      	b.n	80017c6 <MCP_ReceivedFrame+0x86>
    	uint16_t time_Ramp = buffer[8] + (buffer[9] << 8);
 800187e:	7a71      	ldrb	r1, [r6, #9]
 8001880:	7a32      	ldrb	r2, [r6, #8]
    	int16_t  max_Speed = buffer[4] + (buffer[5] << 8) + (buffer[6] << 16) + (buffer[7] << 24);
 8001882:	7973      	ldrb	r3, [r6, #5]
    	int16_t  max_IQ    = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001884:	7830      	ldrb	r0, [r6, #0]
    	uint16_t time_Ramp = buffer[8] + (buffer[9] << 8);
 8001886:	eb02 2201 	add.w	r2, r2, r1, lsl #8
    	int16_t  max_Speed = buffer[4] + (buffer[5] << 8) + (buffer[6] << 16) + (buffer[7] << 24);
 800188a:	7931      	ldrb	r1, [r6, #4]
 800188c:	eb01 2103 	add.w	r1, r1, r3, lsl #8
    	int16_t  max_IQ    = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001890:	7873      	ldrb	r3, [r6, #1]
 8001892:	eb00 2003 	add.w	r0, r0, r3, lsl #8
    	bNoError = true;
 8001896:	2401      	movs	r4, #1
    	ESCOOTER_DriveModeConfig(max_IQ,max_Speed,time_Ramp);
 8001898:	b292      	uxth	r2, r2
 800189a:	b209      	sxth	r1, r1
 800189c:	b200      	sxth	r0, r0
    	bNoError = true;
 800189e:	f88d 4009 	strb.w	r4, [sp, #9]
    	ESCOOTER_DriveModeConfig(max_IQ,max_Speed,time_Ramp);
 80018a2:	f003 f9ef 	bl	8004c84 <ESCOOTER_DriveModeConfig>
    	pHandle -> fFcpSend(pHandle->pFCP, ACK_NOERROR, &DRIVE_MODE_CONFIG_SUCCESS,1);
 80018a6:	69ee      	ldr	r6, [r5, #28]
 80018a8:	4a71      	ldr	r2, [pc, #452]	; (8001a70 <MCP_ReceivedFrame+0x330>)
 80018aa:	69a8      	ldr	r0, [r5, #24]
 80018ac:	4623      	mov	r3, r4
 80018ae:	21f0      	movs	r1, #240	; 0xf0
 80018b0:	47b0      	blx	r6
    	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80018b2:	4870      	ldr	r0, [pc, #448]	; (8001a74 <MCP_ReceivedFrame+0x334>)
 80018b4:	2120      	movs	r1, #32
 80018b6:	f002 f80f 	bl	80038d8 <HAL_GPIO_TogglePin>
  if (RequireAck)
 80018ba:	e784      	b.n	80017c6 <MCP_ReceivedFrame+0x86>
    	switch(bSysID)
 80018bc:	7833      	ldrb	r3, [r6, #0]
 80018be:	2b06      	cmp	r3, #6
 80018c0:	d8b1      	bhi.n	8001826 <MCP_ReceivedFrame+0xe6>
 80018c2:	a201      	add	r2, pc, #4	; (adr r2, 80018c8 <MCP_ReceivedFrame+0x188>)
 80018c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018c8:	08001ff7 	.word	0x08001ff7
 80018cc:	08001fe9 	.word	0x08001fe9
 80018d0:	08001fc1 	.word	0x08001fc1
 80018d4:	080017c7 	.word	0x080017c7
 80018d8:	080017c7 	.word	0x080017c7
 80018dc:	080017c7 	.word	0x080017c7
 80018e0:	080017c7 	.word	0x080017c7
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 80018e4:	7870      	ldrb	r0, [r6, #1]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 80018e6:	7973      	ldrb	r3, [r6, #5]
 80018e8:	7932      	ldrb	r2, [r6, #4]
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 80018ea:	7831      	ldrb	r1, [r6, #0]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 80018ec:	eb02 2203 	add.w	r2, r2, r3, lsl #8
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 80018f0:	eb01 2100 	add.w	r1, r1, r0, lsl #8
      bNoError = UI_ExecTorqueRamp(&pHandle->_Super, torque,duration);
 80018f4:	b292      	uxth	r2, r2
 80018f6:	b209      	sxth	r1, r1
 80018f8:	4628      	mov	r0, r5
 80018fa:	f001 fb9d 	bl	8003038 <UI_ExecTorqueRamp>
 80018fe:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 8001902:	e757      	b.n	80017b4 <MCP_ReceivedFrame+0x74>
 8001904:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
 8001908:	ac04      	add	r4, sp, #16
 800190a:	3b01      	subs	r3, #1
 800190c:	4622      	mov	r2, r4
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 800190e:	2000      	movs	r0, #0
 8001910:	e004      	b.n	800191c <MCP_ReceivedFrame+0x1dc>
 8001912:	3001      	adds	r0, #1
 8001914:	2820      	cmp	r0, #32
        outBuff[i] = pHandle->s_fwVer[i];
 8001916:	f802 1b01 	strb.w	r1, [r2], #1
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 800191a:	d00a      	beq.n	8001932 <MCP_ReceivedFrame+0x1f2>
 800191c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8001920:	b2c6      	uxtb	r6, r0
 8001922:	2900      	cmp	r1, #0
 8001924:	d1f5      	bne.n	8001912 <MCP_ReceivedFrame+0x1d2>
        outBuff[i] = 0;
 8001926:	f1c6 0220 	rsb	r2, r6, #32
 800192a:	b2d2      	uxtb	r2, r2
 800192c:	4420      	add	r0, r4
 800192e:	f007 fc95 	bl	800925c <memset>
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 8001932:	69ee      	ldr	r6, [r5, #28]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 8001934:	69a8      	ldr	r0, [r5, #24]
 8001936:	2320      	movs	r3, #32
 8001938:	4622      	mov	r2, r4
 800193a:	21f0      	movs	r1, #240	; 0xf0
 800193c:	47b0      	blx	r6
      bNoError = true;
 800193e:	2301      	movs	r3, #1
 8001940:	f88d 3009 	strb.w	r3, [sp, #9]
  if (RequireAck)
 8001944:	e773      	b.n	800182e <MCP_ReceivedFrame+0xee>
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8001946:	4c4c      	ldr	r4, [pc, #304]	; (8001a78 <MCP_ReceivedFrame+0x338>)
      stepList.data = buffer;
 8001948:	9604      	str	r6, [sp, #16]
      bErrorCode = ERROR_MP_NOT_ENABLED;
 800194a:	230c      	movs	r3, #12
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 800194c:	4621      	mov	r1, r4
 800194e:	a804      	add	r0, sp, #16
      stepList.len = Size;
 8001950:	f88d 7014 	strb.w	r7, [sp, #20]
      bErrorCode = ERROR_MP_NOT_ENABLED;
 8001954:	f88d 300e 	strb.w	r3, [sp, #14]
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8001958:	f001 fbc0 	bl	80030dc <UI_GetMPInfo>
 800195c:	f88d 0009 	strb.w	r0, [sp, #9]
      if (bNoError)
 8001960:	2800      	cmp	r0, #0
 8001962:	f43f af29 	beq.w	80017b8 <MCP_ReceivedFrame+0x78>
        pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MPInfo.data, MPInfo.len);
 8001966:	69ee      	ldr	r6, [r5, #28]
 8001968:	7923      	ldrb	r3, [r4, #4]
 800196a:	6822      	ldr	r2, [r4, #0]
 800196c:	69a8      	ldr	r0, [r5, #24]
 800196e:	21f0      	movs	r1, #240	; 0xf0
 8001970:	47b0      	blx	r6
  if (RequireAck)
 8001972:	e728      	b.n	80017c6 <MCP_ReceivedFrame+0x86>
      hIdRef = buffer[2] + (buffer[3] << 8);
 8001974:	78f3      	ldrb	r3, [r6, #3]
      hIqRef = buffer[0] + (buffer[1] << 8);
 8001976:	7870      	ldrb	r0, [r6, #1]
      hIdRef = buffer[2] + (buffer[3] << 8);
 8001978:	78b2      	ldrb	r2, [r6, #2]
      hIqRef = buffer[0] + (buffer[1] << 8);
 800197a:	7831      	ldrb	r1, [r6, #0]
      hIdRef = buffer[2] + (buffer[3] << 8);
 800197c:	eb02 2203 	add.w	r2, r2, r3, lsl #8
      hIqRef = buffer[0] + (buffer[1] << 8);
 8001980:	eb01 2100 	add.w	r1, r1, r0, lsl #8
      UI_SetCurrentReferences(&pHandle->_Super, hIqRef, hIdRef);
 8001984:	b212      	sxth	r2, r2
 8001986:	b209      	sxth	r1, r1
 8001988:	4628      	mov	r0, r5
 800198a:	f001 fb99 	bl	80030c0 <UI_SetCurrentReferences>
      bNoError = true;
 800198e:	2301      	movs	r3, #1
 8001990:	f88d 3009 	strb.w	r3, [sp, #9]
  if (RequireAck)
 8001994:	e74b      	b.n	800182e <MCP_ReceivedFrame+0xee>
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8001996:	78b1      	ldrb	r1, [r6, #2]
 8001998:	7873      	ldrb	r3, [r6, #1]
 800199a:	78f2      	ldrb	r2, [r6, #3]
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 800199c:	7970      	ldrb	r0, [r6, #5]
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 800199e:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80019a2:	7931      	ldrb	r1, [r6, #4]
 80019a4:	eb03 4302 	add.w	r3, r3, r2, lsl #16
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 80019a8:	4a34      	ldr	r2, [pc, #208]	; (8001a7c <MCP_ReceivedFrame+0x33c>)
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 80019aa:	eb03 6301 	add.w	r3, r3, r1, lsl #24
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 80019ae:	fb82 1203 	smull	r1, r2, r2, r3
 80019b2:	eba2 73e3 	sub.w	r3, r2, r3, asr #31
      hDurationms = buffer[7] + (buffer[8] << 8);
 80019b6:	7a31      	ldrb	r1, [r6, #8]
 80019b8:	79f2      	ldrb	r2, [r6, #7]
 80019ba:	eb02 2201 	add.w	r2, r2, r1, lsl #8
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 80019be:	79b1      	ldrb	r1, [r6, #6]
 80019c0:	eb00 2001 	add.w	r0, r0, r1, lsl #8
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 80019c4:	b200      	sxth	r0, r0
 80019c6:	7831      	ldrb	r1, [r6, #0]
 80019c8:	9000      	str	r0, [sp, #0]
 80019ca:	b21b      	sxth	r3, r3
 80019cc:	b292      	uxth	r2, r2
 80019ce:	4628      	mov	r0, r5
 80019d0:	f001 fb5a 	bl	8003088 <UI_SetRevupData>
 80019d4:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 80019d8:	e6ec      	b.n	80017b4 <MCP_ReceivedFrame+0x74>
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 80019da:	7871      	ldrb	r1, [r6, #1]
 80019dc:	7833      	ldrb	r3, [r6, #0]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 80019de:	7970      	ldrb	r0, [r6, #5]
 80019e0:	7932      	ldrb	r2, [r6, #4]
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 80019e2:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80019e6:	78b1      	ldrb	r1, [r6, #2]
 80019e8:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 80019ec:	78f1      	ldrb	r1, [r6, #3]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 80019ee:	eb02 2200 	add.w	r2, r2, r0, lsl #8
      bNoError = UI_ExecSpeedRamp(&pHandle->_Super, rpm,duration);
 80019f2:	eb03 6101 	add.w	r1, r3, r1, lsl #24
 80019f6:	b292      	uxth	r2, r2
 80019f8:	4628      	mov	r0, r5
 80019fa:	f001 fb0b 	bl	8003014 <UI_ExecSpeedRamp>
 80019fe:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 8001a02:	e6d7      	b.n	80017b4 <MCP_ReceivedFrame+0x74>
        outBuff[i] = 0;
 8001a04:	ac04      	add	r4, sp, #16
 8001a06:	2100      	movs	r1, #0
 8001a08:	2220      	movs	r2, #32
 8001a0a:	4620      	mov	r0, r4
 8001a0c:	f007 fc26 	bl	800925c <memset>
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 8001a10:	f8d5 70a8 	ldr.w	r7, [r5, #168]	; 0xa8
 8001a14:	f10d 0012 	add.w	r0, sp, #18
 8001a18:	1e79      	subs	r1, r7, #1
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	e004      	b.n	8001a28 <MCP_ReceivedFrame+0x2e8>
 8001a1e:	2b1d      	cmp	r3, #29
        outBuff[3+i] = pHandle->s_fwVer[i];
 8001a20:	f800 2f01 	strb.w	r2, [r0, #1]!
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 8001a24:	f000 8324 	beq.w	8002070 <MCP_ReceivedFrame+0x930>
 8001a28:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8001a2c:	2a09      	cmp	r2, #9
 8001a2e:	b2de      	uxtb	r6, r3
 8001a30:	f103 0301 	add.w	r3, r3, #1
 8001a34:	d1f3      	bne.n	8001a1e <MCP_ReceivedFrame+0x2de>
      outBuff[0] = pHandle->s_fwVer[i+5];
 8001a36:	1d72      	adds	r2, r6, #5
      outBuff[1] = pHandle->s_fwVer[i+7];
 8001a38:	1df3      	adds	r3, r6, #7
      outBuff[2] = pHandle->s_fwVer[i+9];
 8001a3a:	3609      	adds	r6, #9
      outBuff[0] = pHandle->s_fwVer[i+5];
 8001a3c:	b2d2      	uxtb	r2, r2
      outBuff[1] = pHandle->s_fwVer[i+7];
 8001a3e:	b2db      	uxtb	r3, r3
      outBuff[2] = pHandle->s_fwVer[i+9];
 8001a40:	b2f6      	uxtb	r6, r6
      outBuff[0] = pHandle->s_fwVer[i+5];
 8001a42:	5cba      	ldrb	r2, [r7, r2]
 8001a44:	f88d 2010 	strb.w	r2, [sp, #16]
      outBuff[1] = pHandle->s_fwVer[i+7];
 8001a48:	5cfb      	ldrb	r3, [r7, r3]
 8001a4a:	f88d 3011 	strb.w	r3, [sp, #17]
      outBuff[2] = pHandle->s_fwVer[i+9];
 8001a4e:	5dbb      	ldrb	r3, [r7, r6]
 8001a50:	f88d 3012 	strb.w	r3, [sp, #18]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 8001a54:	69ee      	ldr	r6, [r5, #28]
 8001a56:	e76d      	b.n	8001934 <MCP_ReceivedFrame+0x1f4>
      bErrorCode = ERROR_CODE_WRONG_CMD;
 8001a58:	2307      	movs	r3, #7
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 8001a5a:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_WRONG_CMD;
 8001a5c:	f88d 300e 	strb.w	r3, [sp, #14]
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 8001a60:	4628      	mov	r0, r5
 8001a62:	f001 fa9b 	bl	8002f9c <UI_ExecCmd>
 8001a66:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 8001a6a:	e6a3      	b.n	80017b4 <MCP_ReceivedFrame+0x74>
 8001a6c:	2000056a 	.word	0x2000056a
 8001a70:	20000569 	.word	0x20000569
 8001a74:	40020000 	.word	0x40020000
 8001a78:	20000fbc 	.word	0x20000fbc
 8001a7c:	2aaaaaab 	.word	0x2aaaaaab
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 8001a80:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_GET_WRITE_ONLY;
 8001a82:	2303      	movs	r3, #3
 8001a84:	f88d 300e 	strb.w	r3, [sp, #14]
      switch (bRegID)
 8001a88:	2988      	cmp	r1, #136	; 0x88
 8001a8a:	f63f aecc 	bhi.w	8001826 <MCP_ReceivedFrame+0xe6>
 8001a8e:	a301      	add	r3, pc, #4	; (adr r3, 8001a94 <MCP_ReceivedFrame+0x354>)
 8001a90:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8001a94:	08002029 	.word	0x08002029
 8001a98:	08001f9d 	.word	0x08001f9d
 8001a9c:	08002029 	.word	0x08002029
 8001aa0:	08002029 	.word	0x08002029
 8001aa4:	08001f9d 	.word	0x08001f9d
 8001aa8:	08001ef1 	.word	0x08001ef1
 8001aac:	08001ef1 	.word	0x08001ef1
 8001ab0:	08001ef1 	.word	0x08001ef1
 8001ab4:	08001ef1 	.word	0x08001ef1
 8001ab8:	08001ef1 	.word	0x08001ef1
 8001abc:	08001ef1 	.word	0x08001ef1
 8001ac0:	08001ef1 	.word	0x08001ef1
 8001ac4:	08001ef1 	.word	0x08001ef1
 8001ac8:	08001ef1 	.word	0x08001ef1
 8001acc:	08001ef1 	.word	0x08001ef1
 8001ad0:	08001ef1 	.word	0x08001ef1
 8001ad4:	08001ef1 	.word	0x08001ef1
 8001ad8:	08001ef1 	.word	0x08001ef1
 8001adc:	08001ef1 	.word	0x08001ef1
 8001ae0:	08001ef1 	.word	0x08001ef1
 8001ae4:	08001ef1 	.word	0x08001ef1
 8001ae8:	08001ef1 	.word	0x08001ef1
 8001aec:	08001ef1 	.word	0x08001ef1
 8001af0:	08001ef1 	.word	0x08001ef1
 8001af4:	08001ef1 	.word	0x08001ef1
 8001af8:	08001ef1 	.word	0x08001ef1
 8001afc:	08001ef1 	.word	0x08001ef1
 8001b00:	08001ef1 	.word	0x08001ef1
 8001b04:	08001827 	.word	0x08001827
 8001b08:	08001827 	.word	0x08001827
 8001b0c:	08001f9d 	.word	0x08001f9d
 8001b10:	08001ef1 	.word	0x08001ef1
 8001b14:	08001ef1 	.word	0x08001ef1
 8001b18:	08001ef1 	.word	0x08001ef1
 8001b1c:	08002029 	.word	0x08002029
 8001b20:	08001827 	.word	0x08001827
 8001b24:	08001827 	.word	0x08001827
 8001b28:	08001827 	.word	0x08001827
 8001b2c:	08001827 	.word	0x08001827
 8001b30:	08001827 	.word	0x08001827
 8001b34:	08001827 	.word	0x08001827
 8001b38:	08001827 	.word	0x08001827
 8001b3c:	08001827 	.word	0x08001827
 8001b40:	08001827 	.word	0x08001827
 8001b44:	08001827 	.word	0x08001827
 8001b48:	08001827 	.word	0x08001827
 8001b4c:	08001827 	.word	0x08001827
 8001b50:	08001827 	.word	0x08001827
 8001b54:	08001827 	.word	0x08001827
 8001b58:	08001827 	.word	0x08001827
 8001b5c:	08001827 	.word	0x08001827
 8001b60:	08001827 	.word	0x08001827
 8001b64:	08001827 	.word	0x08001827
 8001b68:	08001827 	.word	0x08001827
 8001b6c:	08001827 	.word	0x08001827
 8001b70:	08001827 	.word	0x08001827
 8001b74:	08001827 	.word	0x08001827
 8001b78:	08001827 	.word	0x08001827
 8001b7c:	08001827 	.word	0x08001827
 8001b80:	08001827 	.word	0x08001827
 8001b84:	08001827 	.word	0x08001827
 8001b88:	08001827 	.word	0x08001827
 8001b8c:	08001827 	.word	0x08001827
 8001b90:	08001827 	.word	0x08001827
 8001b94:	08001827 	.word	0x08001827
 8001b98:	08001ef1 	.word	0x08001ef1
 8001b9c:	08001827 	.word	0x08001827
 8001ba0:	08001827 	.word	0x08001827
 8001ba4:	08001827 	.word	0x08001827
 8001ba8:	08001827 	.word	0x08001827
 8001bac:	08001f9d 	.word	0x08001f9d
 8001bb0:	08001f9d 	.word	0x08001f9d
 8001bb4:	08001f9d 	.word	0x08001f9d
 8001bb8:	08001ef1 	.word	0x08001ef1
 8001bbc:	08001ef1 	.word	0x08001ef1
 8001bc0:	08001ef1 	.word	0x08001ef1
 8001bc4:	08001ef1 	.word	0x08001ef1
 8001bc8:	08002029 	.word	0x08002029
 8001bcc:	08001f9d 	.word	0x08001f9d
 8001bd0:	08001ef1 	.word	0x08001ef1
 8001bd4:	08001ef1 	.word	0x08001ef1
 8001bd8:	08001ef1 	.word	0x08001ef1
 8001bdc:	08001ef1 	.word	0x08001ef1
 8001be0:	08001ef1 	.word	0x08001ef1
 8001be4:	08001ef1 	.word	0x08001ef1
 8001be8:	08001ef1 	.word	0x08001ef1
 8001bec:	08001ef1 	.word	0x08001ef1
 8001bf0:	08001ef1 	.word	0x08001ef1
 8001bf4:	08001ef1 	.word	0x08001ef1
 8001bf8:	08001ef1 	.word	0x08001ef1
 8001bfc:	08002029 	.word	0x08002029
 8001c00:	08001f9d 	.word	0x08001f9d
 8001c04:	08001827 	.word	0x08001827
 8001c08:	08001ef1 	.word	0x08001ef1
 8001c0c:	08001ef1 	.word	0x08001ef1
 8001c10:	08001ef1 	.word	0x08001ef1
 8001c14:	08001ef1 	.word	0x08001ef1
 8001c18:	08001ef1 	.word	0x08001ef1
 8001c1c:	08001827 	.word	0x08001827
 8001c20:	08001827 	.word	0x08001827
 8001c24:	08001ef1 	.word	0x08001ef1
 8001c28:	08001ef1 	.word	0x08001ef1
 8001c2c:	08002029 	.word	0x08002029
 8001c30:	08002029 	.word	0x08002029
 8001c34:	08001f9d 	.word	0x08001f9d
 8001c38:	08001f9d 	.word	0x08001f9d
 8001c3c:	08001f9d 	.word	0x08001f9d
 8001c40:	08001f9d 	.word	0x08001f9d
 8001c44:	08001f9d 	.word	0x08001f9d
 8001c48:	08002029 	.word	0x08002029
 8001c4c:	08001ef1 	.word	0x08001ef1
 8001c50:	08001ef1 	.word	0x08001ef1
 8001c54:	08001f9d 	.word	0x08001f9d
 8001c58:	08001827 	.word	0x08001827
 8001c5c:	08001ef1 	.word	0x08001ef1
 8001c60:	08001ef1 	.word	0x08001ef1
 8001c64:	08002029 	.word	0x08002029
 8001c68:	08001f9d 	.word	0x08001f9d
 8001c6c:	08001f9d 	.word	0x08001f9d
 8001c70:	08001f9d 	.word	0x08001f9d
 8001c74:	08001f9d 	.word	0x08001f9d
 8001c78:	08001f9d 	.word	0x08001f9d
 8001c7c:	08001f9d 	.word	0x08001f9d
 8001c80:	08001f9d 	.word	0x08001f9d
 8001c84:	08001f9d 	.word	0x08001f9d
 8001c88:	08001f9d 	.word	0x08001f9d
 8001c8c:	08001f9d 	.word	0x08001f9d
 8001c90:	08001f9d 	.word	0x08001f9d
 8001c94:	08002029 	.word	0x08002029
 8001c98:	08001827 	.word	0x08001827
 8001c9c:	08002029 	.word	0x08002029
 8001ca0:	08001f9d 	.word	0x08001f9d
 8001ca4:	08001f9d 	.word	0x08001f9d
 8001ca8:	08001f9d 	.word	0x08001f9d
 8001cac:	08001ef1 	.word	0x08001ef1
 8001cb0:	08001ef1 	.word	0x08001ef1
 8001cb4:	08001ef1 	.word	0x08001ef1
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 8001cb8:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_WRONG_SET;
 8001cba:	2305      	movs	r3, #5
 8001cbc:	f88d 300e 	strb.w	r3, [sp, #14]
      switch (bRegID)
 8001cc0:	2988      	cmp	r1, #136	; 0x88
 8001cc2:	f200 8127 	bhi.w	8001f14 <MCP_ReceivedFrame+0x7d4>
 8001cc6:	a301      	add	r3, pc, #4	; (adr r3, 8001ccc <MCP_ReceivedFrame+0x58c>)
 8001cc8:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8001ccc:	0800205f 	.word	0x0800205f
 8001cd0:	08001f15 	.word	0x08001f15
 8001cd4:	08001f15 	.word	0x08001f15
 8001cd8:	0800204f 	.word	0x0800204f
 8001cdc:	08001f15 	.word	0x08001f15
 8001ce0:	08001f21 	.word	0x08001f21
 8001ce4:	08001f21 	.word	0x08001f21
 8001ce8:	08001f21 	.word	0x08001f21
 8001cec:	08001f21 	.word	0x08001f21
 8001cf0:	08001f21 	.word	0x08001f21
 8001cf4:	08001f21 	.word	0x08001f21
 8001cf8:	08001f21 	.word	0x08001f21
 8001cfc:	08001f21 	.word	0x08001f21
 8001d00:	08001f21 	.word	0x08001f21
 8001d04:	08001f21 	.word	0x08001f21
 8001d08:	08001f21 	.word	0x08001f21
 8001d0c:	08002007 	.word	0x08002007
 8001d10:	08002007 	.word	0x08002007
 8001d14:	08001f15 	.word	0x08001f15
 8001d18:	08001f15 	.word	0x08001f15
 8001d1c:	08001f21 	.word	0x08001f21
 8001d20:	08001f21 	.word	0x08001f21
 8001d24:	08001f21 	.word	0x08001f21
 8001d28:	08001f21 	.word	0x08001f21
 8001d2c:	08001f21 	.word	0x08001f21
 8001d30:	08001f15 	.word	0x08001f15
 8001d34:	08001f15 	.word	0x08001f15
 8001d38:	08001f15 	.word	0x08001f15
 8001d3c:	0800193f 	.word	0x0800193f
 8001d40:	0800193f 	.word	0x0800193f
 8001d44:	08001f15 	.word	0x08001f15
 8001d48:	08001f15 	.word	0x08001f15
 8001d4c:	08001f15 	.word	0x08001f15
 8001d50:	08001f15 	.word	0x08001f15
 8001d54:	08001f15 	.word	0x08001f15
 8001d58:	08001f15 	.word	0x08001f15
 8001d5c:	08001f15 	.word	0x08001f15
 8001d60:	08001f15 	.word	0x08001f15
 8001d64:	08001f15 	.word	0x08001f15
 8001d68:	08001f15 	.word	0x08001f15
 8001d6c:	08001f15 	.word	0x08001f15
 8001d70:	08001f15 	.word	0x08001f15
 8001d74:	08001f15 	.word	0x08001f15
 8001d78:	08001f15 	.word	0x08001f15
 8001d7c:	08001f15 	.word	0x08001f15
 8001d80:	08001f15 	.word	0x08001f15
 8001d84:	08001f15 	.word	0x08001f15
 8001d88:	08001f15 	.word	0x08001f15
 8001d8c:	08001f15 	.word	0x08001f15
 8001d90:	08001f15 	.word	0x08001f15
 8001d94:	08001f15 	.word	0x08001f15
 8001d98:	08001f15 	.word	0x08001f15
 8001d9c:	08001f15 	.word	0x08001f15
 8001da0:	08001f15 	.word	0x08001f15
 8001da4:	08001f15 	.word	0x08001f15
 8001da8:	08001f15 	.word	0x08001f15
 8001dac:	08001f15 	.word	0x08001f15
 8001db0:	08001f15 	.word	0x08001f15
 8001db4:	08001f15 	.word	0x08001f15
 8001db8:	08001f15 	.word	0x08001f15
 8001dbc:	08001f15 	.word	0x08001f15
 8001dc0:	08001f15 	.word	0x08001f15
 8001dc4:	08001f15 	.word	0x08001f15
 8001dc8:	08001f15 	.word	0x08001f15
 8001dcc:	08001f15 	.word	0x08001f15
 8001dd0:	08001f21 	.word	0x08001f21
 8001dd4:	08001f15 	.word	0x08001f15
 8001dd8:	08001f15 	.word	0x08001f15
 8001ddc:	08001f15 	.word	0x08001f15
 8001de0:	08001f15 	.word	0x08001f15
 8001de4:	08002007 	.word	0x08002007
 8001de8:	08002007 	.word	0x08002007
 8001dec:	08002007 	.word	0x08002007
 8001df0:	08001f15 	.word	0x08001f15
 8001df4:	08001f15 	.word	0x08001f15
 8001df8:	08001f15 	.word	0x08001f15
 8001dfc:	08001f15 	.word	0x08001f15
 8001e00:	08001f15 	.word	0x08001f15
 8001e04:	08001f15 	.word	0x08001f15
 8001e08:	08001f21 	.word	0x08001f21
 8001e0c:	08001f15 	.word	0x08001f15
 8001e10:	08001f15 	.word	0x08001f15
 8001e14:	08001f15 	.word	0x08001f15
 8001e18:	08001f21 	.word	0x08001f21
 8001e1c:	08001f21 	.word	0x08001f21
 8001e20:	08001f21 	.word	0x08001f21
 8001e24:	08001f21 	.word	0x08001f21
 8001e28:	08001f21 	.word	0x08001f21
 8001e2c:	08001f21 	.word	0x08001f21
 8001e30:	08001f21 	.word	0x08001f21
 8001e34:	08001f15 	.word	0x08001f15
 8001e38:	08002007 	.word	0x08002007
 8001e3c:	08001f15 	.word	0x08001f15
 8001e40:	08001f15 	.word	0x08001f15
 8001e44:	08001f15 	.word	0x08001f15
 8001e48:	08001f15 	.word	0x08001f15
 8001e4c:	08001f15 	.word	0x08001f15
 8001e50:	08001f21 	.word	0x08001f21
 8001e54:	08001f15 	.word	0x08001f15
 8001e58:	08001f15 	.word	0x08001f15
 8001e5c:	08001f21 	.word	0x08001f21
 8001e60:	08001f21 	.word	0x08001f21
 8001e64:	08001f15 	.word	0x08001f15
 8001e68:	08001f15 	.word	0x08001f15
 8001e6c:	08001f15 	.word	0x08001f15
 8001e70:	08001f15 	.word	0x08001f15
 8001e74:	08001f15 	.word	0x08001f15
 8001e78:	08001f15 	.word	0x08001f15
 8001e7c:	08001f15 	.word	0x08001f15
 8001e80:	08001f15 	.word	0x08001f15
 8001e84:	08001f15 	.word	0x08001f15
 8001e88:	08001f15 	.word	0x08001f15
 8001e8c:	08001f15 	.word	0x08001f15
 8001e90:	08001f15 	.word	0x08001f15
 8001e94:	08001f15 	.word	0x08001f15
 8001e98:	08001f15 	.word	0x08001f15
 8001e9c:	0800204f 	.word	0x0800204f
 8001ea0:	08002007 	.word	0x08002007
 8001ea4:	08002007 	.word	0x08002007
 8001ea8:	08002007 	.word	0x08002007
 8001eac:	08002007 	.word	0x08002007
 8001eb0:	08002007 	.word	0x08002007
 8001eb4:	08001f15 	.word	0x08001f15
 8001eb8:	08001f15 	.word	0x08001f15
 8001ebc:	08001f15 	.word	0x08001f15
 8001ec0:	08002007 	.word	0x08002007
 8001ec4:	08002007 	.word	0x08002007
 8001ec8:	08001f15 	.word	0x08001f15
 8001ecc:	08001f15 	.word	0x08001f15
 8001ed0:	08001f15 	.word	0x08001f15
 8001ed4:	08001f15 	.word	0x08001f15
 8001ed8:	08001f15 	.word	0x08001f15
 8001edc:	08001f15 	.word	0x08001f15
 8001ee0:	08001f15 	.word	0x08001f15
 8001ee4:	08001f21 	.word	0x08001f21
 8001ee8:	08001f21 	.word	0x08001f21
 8001eec:	08001f21 	.word	0x08001f21
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001ef0:	f10d 0209 	add.w	r2, sp, #9
 8001ef4:	4628      	mov	r0, r5
 8001ef6:	f000 fe4b 	bl	8002b90 <UI_GetReg>
          if ( bNoError == true )
 8001efa:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001efe:	9004      	str	r0, [sp, #16]
          if ( bNoError == true )
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	f43f ac59 	beq.w	80017b8 <MCP_ReceivedFrame+0x78>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 2);
 8001f06:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	aa04      	add	r2, sp, #16
 8001f0e:	21f0      	movs	r1, #240	; 0xf0
 8001f10:	47a0      	blx	r4
  if (RequireAck)
 8001f12:	e458      	b.n	80017c6 <MCP_ReceivedFrame+0x86>
          bErrorCode = ERROR_CODE_SET_READ_ONLY;
 8001f14:	2302      	movs	r3, #2
    if (bNoError)
 8001f16:	f89d 0009 	ldrb.w	r0, [sp, #9]
          bErrorCode = ERROR_CODE_SET_READ_ONLY;
 8001f1a:	f88d 300e 	strb.w	r3, [sp, #14]
  if (RequireAck)
 8001f1e:	e449      	b.n	80017b4 <MCP_ReceivedFrame+0x74>
          int32_t wValue = buffer[1] + (buffer[2] << 8);
 8001f20:	78b2      	ldrb	r2, [r6, #2]
 8001f22:	7873      	ldrb	r3, [r6, #1]
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8001f24:	4628      	mov	r0, r5
 8001f26:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 8001f2a:	f000 fd71 	bl	8002a10 <UI_SetReg>
 8001f2e:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 8001f32:	e43f      	b.n	80017b4 <MCP_ReceivedFrame+0x74>
               bNoError = true;
 8001f34:	2301      	movs	r3, #1
               pHandle -> fFcpSend(pHandle->pFCP, ACK_NOERROR, &debug_torque_output,1);
 8001f36:	69ec      	ldr	r4, [r5, #28]
 8001f38:	4a4f      	ldr	r2, [pc, #316]	; (8002078 <MCP_ReceivedFrame+0x938>)
 8001f3a:	69a8      	ldr	r0, [r5, #24]
               bNoError = true;
 8001f3c:	f88d 3009 	strb.w	r3, [sp, #9]
               pHandle -> fFcpSend(pHandle->pFCP, ACK_NOERROR, &debug_torque_output,1);
 8001f40:	21f0      	movs	r1, #240	; 0xf0
 8001f42:	47a0      	blx	r4
               ESCOOTER_DriveModeConfig(11450,480,3000);
 8001f44:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001f48:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8001f4c:	f642 40ba 	movw	r0, #11450	; 0x2cba
 8001f50:	f002 fe98 	bl	8004c84 <ESCOOTER_DriveModeConfig>
  if (RequireAck)
 8001f54:	e437      	b.n	80017c6 <MCP_ReceivedFrame+0x86>
    		   bNoError = true;
 8001f56:	2301      	movs	r3, #1
    		   pHandle -> fFcpSend(pHandle->pFCP, ACK_NOERROR,&release_Brake,1);
 8001f58:	4a48      	ldr	r2, [pc, #288]	; (800207c <MCP_ReceivedFrame+0x93c>)
    		   bNoError = true;
 8001f5a:	f88d 3009 	strb.w	r3, [sp, #9]
    		   pHandle -> fFcpSend(pHandle->pFCP, ACK_NOERROR,&release_Brake,1);
 8001f5e:	21f0      	movs	r1, #240	; 0xf0
 8001f60:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8001f64:	47a0      	blx	r4
    		   ESCOOTER_DEBUG_CancelBrakeSignal();
 8001f66:	f002 feb7 	bl	8004cd8 <ESCOOTER_DEBUG_CancelBrakeSignal>
  if (RequireAck)
 8001f6a:	e42c      	b.n	80017c6 <MCP_ReceivedFrame+0x86>
              bNoError = true;
 8001f6c:	2301      	movs	r3, #1
              pHandle -> fFcpSend(pHandle->pFCP, ACK_NOERROR,&BRAKE_SIGNAL_RECEIVED,1);
 8001f6e:	4a44      	ldr	r2, [pc, #272]	; (8002080 <MCP_ReceivedFrame+0x940>)
              bNoError = true;
 8001f70:	f88d 3009 	strb.w	r3, [sp, #9]
              pHandle -> fFcpSend(pHandle->pFCP, ACK_NOERROR,&BRAKE_SIGNAL_RECEIVED,1);
 8001f74:	21f0      	movs	r1, #240	; 0xf0
 8001f76:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8001f7a:	47a0      	blx	r4
              ESCOOTER_InputBrakeSignal();
 8001f7c:	f002 fea0 	bl	8004cc0 <ESCOOTER_InputBrakeSignal>
  if (RequireAck)
 8001f80:	e421      	b.n	80017c6 <MCP_ReceivedFrame+0x86>
               bNoError = true;
 8001f82:	2301      	movs	r3, #1
               pHandle -> fFcpSend(pHandle->pFCP, ACK_NOERROR,&THROTTLE_SIGNAL_RECEIVED,1);
 8001f84:	69ec      	ldr	r4, [r5, #28]
 8001f86:	4a3f      	ldr	r2, [pc, #252]	; (8002084 <MCP_ReceivedFrame+0x944>)
 8001f88:	69a8      	ldr	r0, [r5, #24]
               bNoError = true;
 8001f8a:	f88d 3009 	strb.w	r3, [sp, #9]
               pHandle -> fFcpSend(pHandle->pFCP, ACK_NOERROR,&THROTTLE_SIGNAL_RECEIVED,1);
 8001f8e:	21f0      	movs	r1, #240	; 0xf0
 8001f90:	47a0      	blx	r4
               ESCOOTER_InputThrottleSignal(7600);
 8001f92:	f641 50b0 	movw	r0, #7600	; 0x1db0
 8001f96:	f002 fe7f 	bl	8004c98 <ESCOOTER_InputThrottleSignal>
  if (RequireAck)
 8001f9a:	e414      	b.n	80017c6 <MCP_ReceivedFrame+0x86>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 8001f9c:	f10d 0209 	add.w	r2, sp, #9
 8001fa0:	4628      	mov	r0, r5
 8001fa2:	f000 fdf5 	bl	8002b90 <UI_GetReg>
          if ( bNoError == true )
 8001fa6:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 8001faa:	9004      	str	r0, [sp, #16]
          if ( bNoError == true )
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	f43f ac03 	beq.w	80017b8 <MCP_ReceivedFrame+0x78>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 4);
 8001fb2:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8001fb6:	2304      	movs	r3, #4
 8001fb8:	aa04      	add	r2, sp, #16
 8001fba:	21f0      	movs	r1, #240	; 0xf0
 8001fbc:	47a0      	blx	r4
  if (RequireAck)
 8001fbe:	e402      	b.n	80017c6 <MCP_ReceivedFrame+0x86>
                bNoError = true;
 8001fc0:	2401      	movs	r4, #1
                uint8_t heartbeat = 0x20;
 8001fc2:	2620      	movs	r6, #32
                bNoError = true;
 8001fc4:	f88d 4009 	strb.w	r4, [sp, #9]
                POWER_PACKET_ACK();
 8001fc8:	f007 f84a 	bl	8009060 <POWER_PACKET_ACK>
                Stop_RetransmissionTimer();
 8001fcc:	f007 f82e 	bl	800902c <Stop_RetransmissionTimer>
                pHandle -> fFcpSend(pHandle->pFCP, ACK_NOERROR,&heartbeat,1);
 8001fd0:	4623      	mov	r3, r4
 8001fd2:	aa04      	add	r2, sp, #16
 8001fd4:	21f0      	movs	r1, #240	; 0xf0
 8001fd6:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
                uint8_t heartbeat = 0x20;
 8001fda:	f88d 6010 	strb.w	r6, [sp, #16]
                pHandle -> fFcpSend(pHandle->pFCP, ACK_NOERROR,&heartbeat,1);
 8001fde:	47a0      	blx	r4
                retransmissionTimerStart();
 8001fe0:	f007 f830 	bl	8009044 <retransmissionTimerStart>
  if (RequireAck)
 8001fe4:	f7ff bbef 	b.w	80017c6 <MCP_ReceivedFrame+0x86>
    	    	pHandle -> fFcpSend(pHandle->pFCP, ACK_NOERROR,&BRAKE_SIGNAL_RECEIVED,1);
 8001fe8:	69ec      	ldr	r4, [r5, #28]
 8001fea:	4a25      	ldr	r2, [pc, #148]	; (8002080 <MCP_ReceivedFrame+0x940>)
 8001fec:	69a8      	ldr	r0, [r5, #24]
 8001fee:	2301      	movs	r3, #1
 8001ff0:	21f0      	movs	r1, #240	; 0xf0
 8001ff2:	47a0      	blx	r4
 8001ff4:	e417      	b.n	8001826 <MCP_ReceivedFrame+0xe6>
                 bNoError = true;
 8001ff6:	2301      	movs	r3, #1
                 POWER_CHANGE_STATE(POWER_OFF);
 8001ff8:	2000      	movs	r0, #0
                 bNoError = true;
 8001ffa:	f88d 3009 	strb.w	r3, [sp, #9]
                 POWER_CHANGE_STATE(POWER_OFF);
 8001ffe:	f007 f80f 	bl	8009020 <POWER_CHANGE_STATE>
  if (RequireAck)
 8002002:	f7ff bbe0 	b.w	80017c6 <MCP_ReceivedFrame+0x86>
          int32_t wValue = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8002006:	78b2      	ldrb	r2, [r6, #2]
 8002008:	7873      	ldrb	r3, [r6, #1]
 800200a:	78f0      	ldrb	r0, [r6, #3]
 800200c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002010:	7932      	ldrb	r2, [r6, #4]
 8002012:	eb03 4300 	add.w	r3, r3, r0, lsl #16
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8002016:	eb03 6202 	add.w	r2, r3, r2, lsl #24
 800201a:	4628      	mov	r0, r5
 800201c:	f000 fcf8 	bl	8002a10 <UI_SetReg>
 8002020:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 8002024:	f7ff bbc6 	b.w	80017b4 <MCP_ReceivedFrame+0x74>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8002028:	f10d 0209 	add.w	r2, sp, #9
 800202c:	4628      	mov	r0, r5
 800202e:	f000 fdaf 	bl	8002b90 <UI_GetReg>
           if ( bNoError == true )
 8002032:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8002036:	9004      	str	r0, [sp, #16]
           if ( bNoError == true )
 8002038:	2b00      	cmp	r3, #0
 800203a:	f43f abbd 	beq.w	80017b8 <MCP_ReceivedFrame+0x78>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 800203e:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8002042:	2301      	movs	r3, #1
 8002044:	aa04      	add	r2, sp, #16
 8002046:	21f0      	movs	r1, #240	; 0xf0
 8002048:	47a0      	blx	r4
  if (RequireAck)
 800204a:	f7ff bbbc 	b.w	80017c6 <MCP_ReceivedFrame+0x86>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, (int32_t)(buffer[1]));
 800204e:	7872      	ldrb	r2, [r6, #1]
 8002050:	4628      	mov	r0, r5
 8002052:	f000 fcdd 	bl	8002a10 <UI_SetReg>
 8002056:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 800205a:	f7ff bbab 	b.w	80017b4 <MCP_ReceivedFrame+0x74>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 800205e:	7872      	ldrb	r2, [r6, #1]
 8002060:	2100      	movs	r1, #0
 8002062:	4628      	mov	r0, r5
 8002064:	f000 fcd4 	bl	8002a10 <UI_SetReg>
 8002068:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 800206c:	f7ff bba2 	b.w	80017b4 <MCP_ReceivedFrame+0x74>
 8002070:	2626      	movs	r6, #38	; 0x26
 8002072:	2324      	movs	r3, #36	; 0x24
 8002074:	2222      	movs	r2, #34	; 0x22
 8002076:	e4e4      	b.n	8001a42 <MCP_ReceivedFrame+0x302>
 8002078:	2000056b 	.word	0x2000056b
 800207c:	2000056c 	.word	0x2000056c
 8002080:	20000568 	.word	0x20000568
 8002084:	2000056a 	.word	0x2000056a

08002088 <MCP_WaitNextFrame>:
{
 8002088:	b510      	push	{r4, lr}
 800208a:	4604      	mov	r4, r0
  pHandle->fFcpAbortReceive(pHandle->pFCP);
 800208c:	6980      	ldr	r0, [r0, #24]
 800208e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002090:	4798      	blx	r3
  pHandle->BufferSize = FCP_MAX_PAYLOAD_SIZE;
 8002092:	2280      	movs	r2, #128	; 0x80
 8002094:	f884 20ac 	strb.w	r2, [r4, #172]	; 0xac
  pHandle->fFcpReceive(pHandle->pFCP);
 8002098:	6a23      	ldr	r3, [r4, #32]
 800209a:	69a0      	ldr	r0, [r4, #24]
}
 800209c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pHandle->fFcpReceive(pHandle->pFCP);
 80020a0:	4718      	bx	r3
 80020a2:	bf00      	nop

080020a4 <MCP_Init>:
{
 80020a4:	b570      	push	{r4, r5, r6, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	4604      	mov	r4, r0
 80020aa:	461d      	mov	r5, r3
 80020ac:	9b07      	ldr	r3, [sp, #28]
  pHandle->s_fwVer = s_fwVer;
 80020ae:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
  FCP_SetClient( pFCP, pHandle,
 80020b2:	4b09      	ldr	r3, [pc, #36]	; (80020d8 <MCP_Init+0x34>)
  pHandle->pFCP = pFCP;
 80020b4:	61a1      	str	r1, [r4, #24]
{
 80020b6:	4608      	mov	r0, r1
 80020b8:	4616      	mov	r6, r2
  FCP_SetClient( pFCP, pHandle,
 80020ba:	9300      	str	r3, [sp, #0]
 80020bc:	4a07      	ldr	r2, [pc, #28]	; (80020dc <MCP_Init+0x38>)
 80020be:	4b08      	ldr	r3, [pc, #32]	; (80020e0 <MCP_Init+0x3c>)
 80020c0:	4621      	mov	r1, r4
 80020c2:	f005 f821 	bl	8007108 <FCP_SetClient>
  pHandle->fFcpAbortReceive = fFcpAbortReceive;
 80020c6:	9b06      	ldr	r3, [sp, #24]
 80020c8:	6263      	str	r3, [r4, #36]	; 0x24
  pHandle->fFcpReceive = fFcpReceive;
 80020ca:	e9c4 6507 	strd	r6, r5, [r4, #28]
  MCP_WaitNextFrame(pHandle);
 80020ce:	4620      	mov	r0, r4
 80020d0:	f7ff ffda 	bl	8002088 <MCP_WaitNextFrame>
}
 80020d4:	b002      	add	sp, #8
 80020d6:	bd70      	pop	{r4, r5, r6, pc}
 80020d8:	080020e5 	.word	0x080020e5
 80020dc:	080020ed 	.word	0x080020ed
 80020e0:	08001741 	.word	0x08001741

080020e4 <MCP_OnTimeOut>:
{
 80020e4:	b508      	push	{r3, lr}
     MCP_WaitNextFrame(pHandle);
 80020e6:	f7ff ffcf 	bl	8002088 <MCP_WaitNextFrame>
}
 80020ea:	bd08      	pop	{r3, pc}

080020ec <MCP_SentFrame>:
{
 80020ec:	b508      	push	{r3, lr}
    MCP_WaitNextFrame(pHandle);
 80020ee:	f7ff ffcb 	bl	8002088 <MCP_WaitNextFrame>
}
 80020f2:	bd08      	pop	{r3, pc}

080020f4 <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 80020f4:	b500      	push	{lr}
  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI,pMCT);
 80020f6:	4b0a      	ldr	r3, [pc, #40]	; (8002120 <MX_MotorControl_Init+0x2c>)
 80020f8:	4a0a      	ldr	r2, [pc, #40]	; (8002124 <MX_MotorControl_Init+0x30>)
{
 80020fa:	b083      	sub	sp, #12
  MCboot(pMCI,pMCT);
 80020fc:	4619      	mov	r1, r3
 80020fe:	4610      	mov	r0, r2
 8002100:	f7fe ff90 	bl	8001024 <MCboot>
  mc_lock_pins();
 8002104:	f7ff fa8c 	bl	8001620 <mc_lock_pins>

  /* Initialize the MC User Interface */
  UI_TaskInit(wConfig,NBR_OF_MOTORS,pMCI,pMCT,s_fwVer);
 8002108:	4907      	ldr	r1, [pc, #28]	; (8002128 <MX_MotorControl_Init+0x34>)
 800210a:	9100      	str	r1, [sp, #0]
 800210c:	4807      	ldr	r0, [pc, #28]	; (800212c <MX_MotorControl_Init+0x38>)
 800210e:	4b04      	ldr	r3, [pc, #16]	; (8002120 <MX_MotorControl_Init+0x2c>)
 8002110:	4a04      	ldr	r2, [pc, #16]	; (8002124 <MX_MotorControl_Init+0x30>)
 8002112:	2101      	movs	r1, #1
 8002114:	f000 fbfa 	bl	800290c <UI_TaskInit>
}
 8002118:	b003      	add	sp, #12
 800211a:	f85d fb04 	ldr.w	pc, [sp], #4
 800211e:	bf00      	nop
 8002120:	20000fc8 	.word	0x20000fc8
 8002124:	20000fc4 	.word	0x20000fc4
 8002128:	0800971c 	.word	0x0800971c
 800212c:	20000570 	.word	0x20000570

08002130 <vPortSetupTimerInterrupt>:

void vPortSetupTimerInterrupt( void )
{
 8002130:	b508      	push	{r3, lr}
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 8002132:	f001 feb7 	bl	8003ea4 <HAL_RCC_GetHCLKFreq>
 8002136:	4b04      	ldr	r3, [pc, #16]	; (8002148 <vPortSetupTimerInterrupt+0x18>)
 8002138:	fba3 3000 	umull	r3, r0, r3, r0
 800213c:	09c0      	lsrs	r0, r0, #7
}
 800213e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 8002142:	f001 bab9 	b.w	80036b8 <HAL_SYSTICK_Config>
 8002146:	bf00      	nop
 8002148:	10624dd3 	.word	0x10624dd3

0800214c <RCM_RegisterRegConv>:

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800214c:	4b6b      	ldr	r3, [pc, #428]	; (80022fc <RCM_RegisterRegConv+0x1b0>)
 800214e:	681a      	ldr	r2, [r3, #0]
{
 8002150:	b570      	push	{r4, r5, r6, lr}
 8002152:	4601      	mov	r1, r0
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002154:	2a00      	cmp	r2, #0
 8002156:	d02f      	beq.n	80021b8 <RCM_RegisterRegConv+0x6c>
        handle = i; /* First location available, but still looping to check that this config does not already exist*/
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault. */
      if (  RCM_handle_array [i] != 0 )
      {
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002158:	f890 c004 	ldrb.w	ip, [r0, #4]
 800215c:	7910      	ldrb	r0, [r2, #4]
 800215e:	4584      	cmp	ip, r0
 8002160:	d01d      	beq.n	800219e <RCM_RegisterRegConv+0x52>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002162:	685c      	ldr	r4, [r3, #4]
 8002164:	2c00      	cmp	r4, #0
 8002166:	f000 80ac 	beq.w	80022c2 <RCM_RegisterRegConv+0x176>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 800216a:	7922      	ldrb	r2, [r4, #4]
 800216c:	4562      	cmp	r2, ip
  uint8_t handle=255;
 800216e:	f04f 00ff 	mov.w	r0, #255	; 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002172:	d02b      	beq.n	80021cc <RCM_RegisterRegConv+0x80>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002174:	689c      	ldr	r4, [r3, #8]
 8002176:	2c00      	cmp	r4, #0
 8002178:	f000 808f 	beq.w	800229a <RCM_RegisterRegConv+0x14e>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 800217c:	7922      	ldrb	r2, [r4, #4]
 800217e:	4562      	cmp	r2, ip
 8002180:	d02a      	beq.n	80021d8 <RCM_RegisterRegConv+0x8c>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002182:	68dc      	ldr	r4, [r3, #12]
 8002184:	2c00      	cmp	r4, #0
 8002186:	f000 8091 	beq.w	80022ac <RCM_RegisterRegConv+0x160>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 800218a:	7922      	ldrb	r2, [r4, #4]
 800218c:	4562      	cmp	r2, ip
 800218e:	f000 8092 	beq.w	80022b6 <RCM_RegisterRegConv+0x16a>
           i = RCM_MAX_CONV; /* we can skip the rest of the loop*/
          }
      }
      i++;
    }
    if (handle < RCM_MAX_CONV )
 8002192:	2803      	cmp	r0, #3
 8002194:	bf88      	it	hi
 8002196:	20ff      	movhi	r0, #255	; 0xff
 8002198:	f240 80a1 	bls.w	80022de <RCM_RegisterRegConv+0x192>
    else
    {
      /* Nothing to do handle is already set to error value : 255 */
    }
  return handle;
}
 800219c:	bd70      	pop	{r4, r5, r6, pc}
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 800219e:	6810      	ldr	r0, [r2, #0]
 80021a0:	680a      	ldr	r2, [r1, #0]
 80021a2:	4290      	cmp	r0, r2
 80021a4:	d01e      	beq.n	80021e4 <RCM_RegisterRegConv+0x98>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80021a6:	685c      	ldr	r4, [r3, #4]
 80021a8:	2c00      	cmp	r4, #0
 80021aa:	d1de      	bne.n	800216a <RCM_RegisterRegConv+0x1e>
 80021ac:	689c      	ldr	r4, [r3, #8]
 80021ae:	2c00      	cmp	r4, #0
 80021b0:	f000 809a 	beq.w	80022e8 <RCM_RegisterRegConv+0x19c>
      i++;
 80021b4:	2001      	movs	r0, #1
 80021b6:	e7e1      	b.n	800217c <RCM_RegisterRegConv+0x30>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80021b8:	685c      	ldr	r4, [r3, #4]
 80021ba:	2c00      	cmp	r4, #0
 80021bc:	f000 808d 	beq.w	80022da <RCM_RegisterRegConv+0x18e>
 80021c0:	f890 c004 	ldrb.w	ip, [r0, #4]
  uint8_t i=0;
 80021c4:	4610      	mov	r0, r2
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80021c6:	7922      	ldrb	r2, [r4, #4]
 80021c8:	4562      	cmp	r2, ip
 80021ca:	d1d3      	bne.n	8002174 <RCM_RegisterRegConv+0x28>
 80021cc:	6824      	ldr	r4, [r4, #0]
 80021ce:	680a      	ldr	r2, [r1, #0]
 80021d0:	4294      	cmp	r4, r2
 80021d2:	d1cf      	bne.n	8002174 <RCM_RegisterRegConv+0x28>
      i++;
 80021d4:	2001      	movs	r0, #1
    if (handle < RCM_MAX_CONV )
 80021d6:	e006      	b.n	80021e6 <RCM_RegisterRegConv+0x9a>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80021d8:	6824      	ldr	r4, [r4, #0]
 80021da:	680a      	ldr	r2, [r1, #0]
 80021dc:	4294      	cmp	r4, r2
 80021de:	d1d0      	bne.n	8002182 <RCM_RegisterRegConv+0x36>
      i++;
 80021e0:	2002      	movs	r0, #2
 80021e2:	e000      	b.n	80021e6 <RCM_RegisterRegConv+0x9a>
  uint8_t i=0;
 80021e4:	2000      	movs	r0, #0
      RCM_handle_array [handle] = regConv;
 80021e6:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 80021ea:	6893      	ldr	r3, [r2, #8]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 80021ec:	4c44      	ldr	r4, [pc, #272]	; (8002300 <RCM_RegisterRegConv+0x1b4>)
 80021ee:	2500      	movs	r5, #0
      if (LL_ADC_IsEnabled(regConv->regADC) == 0 )
 80021f0:	07db      	lsls	r3, r3, #31
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 80021f2:	f844 5030 	str.w	r5, [r4, r0, lsl #3]
      if (LL_ADC_IsEnabled(regConv->regADC) == 0 )
 80021f6:	d411      	bmi.n	800221c <RCM_RegisterRegConv+0xd0>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOCS(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 80021f8:	6853      	ldr	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 80021fa:	f06f 0402 	mvn.w	r4, #2
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 80021fe:	f023 0320 	bic.w	r3, r3, #32
 8002202:	6053      	str	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 8002204:	6014      	str	r4, [r2, #0]
{
  /* Note: on this STM32 series, there is no flag ADC group injected          */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "JEOC" is corresponding to flag "JEOS"               */
  /*       in other STM32 families).                                          */
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8002206:	6853      	ldr	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8002208:	f06f 0404 	mvn.w	r4, #4
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 800220c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002210:	6053      	str	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8002212:	6014      	str	r4, [r2, #0]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8002214:	6893      	ldr	r3, [r2, #8]
 8002216:	f043 0301 	orr.w	r3, r3, #1
 800221a:	6093      	str	r3, [r2, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800221c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800221e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002222:	62d3      	str	r3, [r2, #44]	; 0x2c
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 8002224:	790b      	ldrb	r3, [r1, #4]
 8002226:	2b09      	cmp	r3, #9
 8002228:	d82d      	bhi.n	8002286 <RCM_RegisterRegConv+0x13a>
 800222a:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 800222e:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
 8002232:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002236:	f04f 7e00 	mov.w	lr, #33554432	; 0x2000000
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223a:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 800223e:	fa94 f4a4 	rbit	r4, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8002242:	fab4 f484 	clz	r4, r4
 8002246:	fa2e fe04 	lsr.w	lr, lr, r4
 800224a:	320c      	adds	r2, #12
  MODIFY_REG(*preg,
 800224c:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8002250:	f852 402e 	ldr.w	r4, [r2, lr, lsl #2]
 8002254:	f04f 7cf8 	mov.w	ip, #32505856	; 0x1f00000
 8002258:	fa9c f5ac 	rbit	r5, ip
 800225c:	fab5 f585 	clz	r5, r5
 8002260:	fa9c fcac 	rbit	ip, ip
 8002264:	688e      	ldr	r6, [r1, #8]
 8002266:	fabc fc8c 	clz	ip, ip
 800226a:	fa23 f105 	lsr.w	r1, r3, r5
 800226e:	fa23 f30c 	lsr.w	r3, r3, ip
 8002272:	fa06 f503 	lsl.w	r5, r6, r3
 8002276:	2307      	movs	r3, #7
 8002278:	408b      	lsls	r3, r1
 800227a:	ea24 0303 	bic.w	r3, r4, r3
 800227e:	432b      	orrs	r3, r5
 8002280:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
}
 8002284:	bd70      	pop	{r4, r5, r6, pc}
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 8002286:	2403      	movs	r4, #3
 8002288:	f06f 051d 	mvn.w	r5, #29
 800228c:	fb14 5403 	smlabb	r4, r4, r3, r5
 8002290:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8002294:	f003 7e00 	and.w	lr, r3, #33554432	; 0x2000000
 8002298:	e7cf      	b.n	800223a <RCM_RegisterRegConv+0xee>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800229a:	2804      	cmp	r0, #4
 800229c:	d917      	bls.n	80022ce <RCM_RegisterRegConv+0x182>
 800229e:	68dc      	ldr	r4, [r3, #12]
 80022a0:	b114      	cbz	r4, 80022a8 <RCM_RegisterRegConv+0x15c>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80022a2:	7922      	ldrb	r2, [r4, #4]
 80022a4:	4562      	cmp	r2, ip
 80022a6:	d01c      	beq.n	80022e2 <RCM_RegisterRegConv+0x196>
 80022a8:	680a      	ldr	r2, [r1, #0]
 80022aa:	e799      	b.n	80021e0 <RCM_RegisterRegConv+0x94>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80022ac:	2804      	cmp	r0, #4
 80022ae:	680a      	ldr	r2, [r1, #0]
 80022b0:	d999      	bls.n	80021e6 <RCM_RegisterRegConv+0x9a>
      i++;
 80022b2:	2003      	movs	r0, #3
 80022b4:	e797      	b.n	80021e6 <RCM_RegisterRegConv+0x9a>
 80022b6:	680a      	ldr	r2, [r1, #0]
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80022b8:	6824      	ldr	r4, [r4, #0]
 80022ba:	4294      	cmp	r4, r2
 80022bc:	f47f af69 	bne.w	8002192 <RCM_RegisterRegConv+0x46>
 80022c0:	e7f7      	b.n	80022b2 <RCM_RegisterRegConv+0x166>
      i++;
 80022c2:	2001      	movs	r0, #1
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80022c4:	689c      	ldr	r4, [r3, #8]
 80022c6:	b11c      	cbz	r4, 80022d0 <RCM_RegisterRegConv+0x184>
 80022c8:	f891 c004 	ldrb.w	ip, [r1, #4]
 80022cc:	e756      	b.n	800217c <RCM_RegisterRegConv+0x30>
 80022ce:	4620      	mov	r0, r4
 80022d0:	68dc      	ldr	r4, [r3, #12]
 80022d2:	b124      	cbz	r4, 80022de <RCM_RegisterRegConv+0x192>
 80022d4:	f891 c004 	ldrb.w	ip, [r1, #4]
 80022d8:	e757      	b.n	800218a <RCM_RegisterRegConv+0x3e>
  uint8_t i=0;
 80022da:	4620      	mov	r0, r4
 80022dc:	e7f2      	b.n	80022c4 <RCM_RegisterRegConv+0x178>
 80022de:	680a      	ldr	r2, [r1, #0]
 80022e0:	e781      	b.n	80021e6 <RCM_RegisterRegConv+0x9a>
 80022e2:	680a      	ldr	r2, [r1, #0]
      i++;
 80022e4:	2002      	movs	r0, #2
 80022e6:	e7e7      	b.n	80022b8 <RCM_RegisterRegConv+0x16c>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80022e8:	68dc      	ldr	r4, [r3, #12]
 80022ea:	2c00      	cmp	r4, #0
 80022ec:	f43f af72 	beq.w	80021d4 <RCM_RegisterRegConv+0x88>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80022f0:	7920      	ldrb	r0, [r4, #4]
 80022f2:	4560      	cmp	r0, ip
 80022f4:	f47f af6e 	bne.w	80021d4 <RCM_RegisterRegConv+0x88>
      i++;
 80022f8:	2001      	movs	r0, #1
 80022fa:	e7dd      	b.n	80022b8 <RCM_RegisterRegConv+0x16c>
 80022fc:	20000ff0 	.word	0x20000ff0
 8002300:	20000fcc 	.word	0x20000fcc

08002304 <RCM_ExecRegularConv>:
 */
uint16_t RCM_ExecRegularConv (uint8_t handle)
{
  uint16_t retVal;

  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8002304:	4b1b      	ldr	r3, [pc, #108]	; (8002374 <RCM_ExecRegularConv+0x70>)
 8002306:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
                                LL_ADC_REG_RANK_1,
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 800230a:	7913      	ldrb	r3, [r2, #4]
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 800230c:	6812      	ldr	r2, [r2, #0]
 800230e:	2b09      	cmp	r3, #9
 8002310:	d827      	bhi.n	8002362 <RCM_ExecRegularConv+0x5e>
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8002312:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8002316:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 800231a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800231e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8002322:	fa91 f1a1 	rbit	r1, r1
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8002326:	f44f 7c00 	mov.w	ip, #512	; 0x200
 800232a:	fab1 f181 	clz	r1, r1
 800232e:	f102 002c 	add.w	r0, r2, #44	; 0x2c
 8002332:	fa2c fc01 	lsr.w	ip, ip, r1
  MODIFY_REG(*preg,
 8002336:	f003 031f 	and.w	r3, r3, #31
 800233a:	f850 102c 	ldr.w	r1, [r0, ip, lsl #2]
 800233e:	f021 011f 	bic.w	r1, r1, #31
 8002342:	430b      	orrs	r3, r1

  LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );

  /* Bit banding access equivalent to LL_ADC_REG_StartConversionSWStart */
  BB_REG_BIT_SET ( &RCM_handle_array[handle]->regADC->CR2, ADC_CR2_SWSTART_Pos );
 8002344:	0151      	lsls	r1, r2, #5
 8002346:	f840 302c 	str.w	r3, [r0, ip, lsl #2]
 800234a:	f101 4184 	add.w	r1, r1, #1107296256	; 0x42000000
 800234e:	2301      	movs	r3, #1
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8002350:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 8002352:	f8c1 3178 	str.w	r3, [r1, #376]	; 0x178
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOCS) == (LL_ADC_FLAG_EOCS));
 8002356:	6813      	ldr	r3, [r2, #0]
  /* Wait until end of regular conversion */
  while ( LL_ADC_IsActiveFlag_EOCS( RCM_handle_array[handle]->regADC ) == 0u ) {}
 8002358:	079b      	lsls	r3, r3, #30
 800235a:	d5fc      	bpl.n	8002356 <RCM_ExecRegularConv+0x52>
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 800235c:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
  retVal = LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );
return retVal;
}
 800235e:	b280      	uxth	r0, r0
 8002360:	4770      	bx	lr
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8002362:	2103      	movs	r1, #3
 8002364:	f06f 001d 	mvn.w	r0, #29
 8002368:	fb11 0103 	smlabb	r1, r1, r3, r0
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 800236c:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 8002370:	e7d5      	b.n	800231e <RCM_ExecRegularConv+0x1a>
 8002372:	bf00      	nop
 8002374:	20000ff0 	.word	0x20000ff0

08002378 <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv ()
{
 8002378:	b570      	push	{r4, r5, r6, lr}
  if (RCM_UserConvState == RCM_USERCONV_REQUESTED)
 800237a:	4c0f      	ldr	r4, [pc, #60]	; (80023b8 <RCM_ExecUserConv+0x40>)
 800237c:	7823      	ldrb	r3, [r4, #0]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d000      	beq.n	8002384 <RCM_ExecUserConv+0xc>
    {
      RCM_UserConvState = RCM_USERCONV_IDLE;
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
    }
  }
}
 8002382:	bd70      	pop	{r4, r5, r6, pc}
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8002384:	4d0d      	ldr	r5, [pc, #52]	; (80023bc <RCM_ExecUserConv+0x44>)
 8002386:	7828      	ldrb	r0, [r5, #0]
 8002388:	f7ff ffbc 	bl	8002304 <RCM_ExecRegularConv>
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 800238c:	f895 c000 	ldrb.w	ip, [r5]
 8002390:	4b0b      	ldr	r3, [pc, #44]	; (80023c0 <RCM_ExecUserConv+0x48>)
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8002392:	4a0c      	ldr	r2, [pc, #48]	; (80023c4 <RCM_ExecUserConv+0x4c>)
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8002394:	f853 503c 	ldr.w	r5, [r3, ip, lsl #3]
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8002398:	8010      	strh	r0, [r2, #0]
    RCM_UserConvState = RCM_USERCONV_EOC;
 800239a:	2202      	movs	r2, #2
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 800239c:	4601      	mov	r1, r0
    RCM_UserConvState = RCM_USERCONV_EOC;
 800239e:	7022      	strb	r2, [r4, #0]
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 80023a0:	2d00      	cmp	r5, #0
 80023a2:	d0ee      	beq.n	8002382 <RCM_ExecUserConv+0xa>
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 80023a4:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 80023a8:	4660      	mov	r0, ip
 80023aa:	685a      	ldr	r2, [r3, #4]
      RCM_UserConvState = RCM_USERCONV_IDLE;
 80023ac:	2300      	movs	r3, #0
 80023ae:	7023      	strb	r3, [r4, #0]
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 80023b0:	462b      	mov	r3, r5
}
 80023b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 80023b6:	4718      	bx	r3
 80023b8:	20000fed 	.word	0x20000fed
 80023bc:	20000fec 	.word	0x20000fec
 80023c0:	20000fcc 	.word	0x20000fcc
 80023c4:	20000fee 	.word	0x20000fee

080023c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023c8:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ca:	4b0e      	ldr	r3, [pc, #56]	; (8002404 <HAL_MspInit+0x3c>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	9200      	str	r2, [sp, #0]
 80023d0:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80023d2:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80023d6:	6459      	str	r1, [r3, #68]	; 0x44
 80023d8:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80023da:	f400 4080 	and.w	r0, r0, #16384	; 0x4000
 80023de:	9000      	str	r0, [sp, #0]
 80023e0:	9800      	ldr	r0, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023e2:	9201      	str	r2, [sp, #4]
 80023e4:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80023e6:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 80023ea:	6418      	str	r0, [r3, #64]	; 0x40
 80023ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f2:	9301      	str	r3, [sp, #4]
 80023f4:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80023f6:	210f      	movs	r1, #15
 80023f8:	f06f 0001 	mvn.w	r0, #1

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023fc:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80023fe:	f001 b8fd 	b.w	80035fc <HAL_NVIC_SetPriority>
 8002402:	bf00      	nop
 8002404:	40023800 	.word	0x40023800

08002408 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002408:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 800240a:	4b20      	ldr	r3, [pc, #128]	; (800248c <HAL_ADC_MspInit+0x84>)
 800240c:	6802      	ldr	r2, [r0, #0]
{
 800240e:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002410:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 8002412:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002414:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8002418:	e9cd 4406 	strd	r4, r4, [sp, #24]
 800241c:	9408      	str	r4, [sp, #32]
  if(hadc->Instance==ADC1)
 800241e:	d001      	beq.n	8002424 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002420:	b00a      	add	sp, #40	; 0x28
 8002422:	bd10      	pop	{r4, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002424:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8002428:	9401      	str	r4, [sp, #4]
 800242a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800242c:	4818      	ldr	r0, [pc, #96]	; (8002490 <HAL_ADC_MspInit+0x88>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 800242e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002432:	645a      	str	r2, [r3, #68]	; 0x44
 8002434:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002436:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800243a:	9201      	str	r2, [sp, #4]
 800243c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800243e:	9402      	str	r4, [sp, #8]
 8002440:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002442:	f042 0204 	orr.w	r2, r2, #4
 8002446:	631a      	str	r2, [r3, #48]	; 0x30
 8002448:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800244a:	f002 0204 	and.w	r2, r2, #4
 800244e:	9202      	str	r2, [sp, #8]
 8002450:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002452:	9403      	str	r4, [sp, #12]
 8002454:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002456:	f042 0201 	orr.w	r2, r2, #1
 800245a:	631a      	str	r2, [r3, #48]	; 0x30
 800245c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002464:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin|M1_CURR_AMPL_V_Pin|M1_TEMPERATURE_Pin;
 8002466:	2207      	movs	r2, #7
 8002468:	2303      	movs	r3, #3
 800246a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800246e:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002470:	f001 f93c 	bl	80036ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin|M1_BUS_VOLTAGE_Pin;
 8002474:	2203      	movs	r2, #3
 8002476:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002478:	4806      	ldr	r0, [pc, #24]	; (8002494 <HAL_ADC_MspInit+0x8c>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247a:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800247c:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin|M1_BUS_VOLTAGE_Pin;
 800247e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002482:	f001 f933 	bl	80036ec <HAL_GPIO_Init>
}
 8002486:	b00a      	add	sp, #40	; 0x28
 8002488:	bd10      	pop	{r4, pc}
 800248a:	bf00      	nop
 800248c:	40012000 	.word	0x40012000
 8002490:	40020800 	.word	0x40020800
 8002494:	40020000 	.word	0x40020000

08002498 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002498:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM1)
 800249a:	6802      	ldr	r2, [r0, #0]
 800249c:	4938      	ldr	r1, [pc, #224]	; (8002580 <HAL_TIM_Base_MspInit+0xe8>)
{
 800249e:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a0:	2300      	movs	r3, #0
  if(htim_base->Instance==TIM1)
 80024a2:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a4:	e9cd 3306 	strd	r3, r3, [sp, #24]
 80024a8:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80024ac:	930a      	str	r3, [sp, #40]	; 0x28
  if(htim_base->Instance==TIM1)
 80024ae:	d004      	beq.n	80024ba <HAL_TIM_Base_MspInit+0x22>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 80024b0:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80024b4:	d021      	beq.n	80024fa <HAL_TIM_Base_MspInit+0x62>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80024b6:	b00c      	add	sp, #48	; 0x30
 80024b8:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 80024ba:	4a32      	ldr	r2, [pc, #200]	; (8002584 <HAL_TIM_Base_MspInit+0xec>)
 80024bc:	9301      	str	r3, [sp, #4]
 80024be:	6c50      	ldr	r0, [r2, #68]	; 0x44
 80024c0:	f040 0001 	orr.w	r0, r0, #1
 80024c4:	6450      	str	r0, [r2, #68]	; 0x44
 80024c6:	6c50      	ldr	r0, [r2, #68]	; 0x44
 80024c8:	f000 0001 	and.w	r0, r0, #1
 80024cc:	9001      	str	r0, [sp, #4]
 80024ce:	9801      	ldr	r0, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024d0:	9302      	str	r3, [sp, #8]
 80024d2:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 80024d4:	482c      	ldr	r0, [pc, #176]	; (8002588 <HAL_TIM_Base_MspInit+0xf0>)
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024d6:	2401      	movs	r4, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024d8:	4323      	orrs	r3, r4
 80024da:	6313      	str	r3, [r2, #48]	; 0x30
 80024dc:	6b13      	ldr	r3, [r2, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024de:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 80024e0:	ed9f 7b25 	vldr	d7, [pc, #148]	; 8002578 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024e4:	4023      	ands	r3, r4
 80024e6:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 80024e8:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 80024ea:	ed8d 7b06 	vstr	d7, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ee:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80024f0:	940a      	str	r4, [sp, #40]	; 0x28
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 80024f2:	f001 f8fb 	bl	80036ec <HAL_GPIO_Init>
}
 80024f6:	b00c      	add	sp, #48	; 0x30
 80024f8:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024fa:	f502 320e 	add.w	r2, r2, #145408	; 0x23800
 80024fe:	9303      	str	r3, [sp, #12]
 8002500:	6c11      	ldr	r1, [r2, #64]	; 0x40
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002502:	4822      	ldr	r0, [pc, #136]	; (800258c <HAL_TIM_Base_MspInit+0xf4>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002504:	f041 0101 	orr.w	r1, r1, #1
 8002508:	6411      	str	r1, [r2, #64]	; 0x40
 800250a:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800250c:	f001 0101 	and.w	r1, r1, #1
 8002510:	9103      	str	r1, [sp, #12]
 8002512:	9903      	ldr	r1, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002514:	9304      	str	r3, [sp, #16]
 8002516:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002518:	f041 0102 	orr.w	r1, r1, #2
 800251c:	6311      	str	r1, [r2, #48]	; 0x30
 800251e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002520:	f001 0102 	and.w	r1, r1, #2
 8002524:	9104      	str	r1, [sp, #16]
 8002526:	9904      	ldr	r1, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002528:	9305      	str	r3, [sp, #20]
 800252a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800252c:	f043 0301 	orr.w	r3, r3, #1
 8002530:	6313      	str	r3, [r2, #48]	; 0x30
 8002532:	6b13      	ldr	r3, [r2, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002534:	2401      	movs	r4, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002536:	4023      	ands	r3, r4
 8002538:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = M1_HALL_H3_Pin|M1_HALL_H2_Pin;
 800253a:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800253e:	2302      	movs	r3, #2
 8002540:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002544:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002546:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002548:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800254c:	9a05      	ldr	r2, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800254e:	f001 f8cd 	bl	80036ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_HALL_H1_Pin;
 8002552:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002556:	2302      	movs	r3, #2
 8002558:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(M1_HALL_H1_GPIO_Port, &GPIO_InitStruct);
 800255c:	480a      	ldr	r0, [pc, #40]	; (8002588 <HAL_TIM_Base_MspInit+0xf0>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800255e:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = M1_HALL_H1_Pin;
 8002560:	2200      	movs	r2, #0
 8002562:	2302      	movs	r3, #2
    HAL_GPIO_Init(M1_HALL_H1_GPIO_Port, &GPIO_InitStruct);
 8002564:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_HALL_H1_Pin;
 8002566:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(M1_HALL_H1_GPIO_Port, &GPIO_InitStruct);
 800256a:	f001 f8bf 	bl	80036ec <HAL_GPIO_Init>
}
 800256e:	b00c      	add	sp, #48	; 0x30
 8002570:	bd10      	pop	{r4, pc}
 8002572:	bf00      	nop
 8002574:	f3af 8000 	nop.w
 8002578:	00000040 	.word	0x00000040
 800257c:	00000002 	.word	0x00000002
 8002580:	40010000 	.word	0x40010000
 8002584:	40023800 	.word	0x40023800
 8002588:	40020000 	.word	0x40020000
 800258c:	40020400 	.word	0x40020400

08002590 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002590:	b5d0      	push	{r4, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 8002592:	4a26      	ldr	r2, [pc, #152]	; (800262c <HAL_TIM_MspPostInit+0x9c>)
 8002594:	6801      	ldr	r1, [r0, #0]
{
 8002596:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002598:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 800259a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800259c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80025a0:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80025a4:	9306      	str	r3, [sp, #24]
  if(htim->Instance==TIM1)
 80025a6:	d001      	beq.n	80025ac <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80025a8:	b008      	add	sp, #32
 80025aa:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ac:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 80025b0:	9300      	str	r3, [sp, #0]
 80025b2:	6b11      	ldr	r1, [r2, #48]	; 0x30
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 80025b4:	481e      	ldr	r0, [pc, #120]	; (8002630 <HAL_TIM_MspPostInit+0xa0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025b6:	f041 0101 	orr.w	r1, r1, #1
 80025ba:	6311      	str	r1, [r2, #48]	; 0x30
 80025bc:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80025be:	f001 0101 	and.w	r1, r1, #1
 80025c2:	9100      	str	r1, [sp, #0]
 80025c4:	9900      	ldr	r1, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025c6:	9301      	str	r3, [sp, #4]
 80025c8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80025ca:	f043 0302 	orr.w	r3, r3, #2
 80025ce:	6313      	str	r3, [r2, #48]	; 0x30
 80025d0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80025d8:	2401      	movs	r4, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025da:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80025dc:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 80025de:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 80025e0:	2280      	movs	r2, #128	; 0x80
 80025e2:	2302      	movs	r3, #2
 80025e4:	2601      	movs	r6, #1
 80025e6:	2702      	movs	r7, #2
 80025e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80025ec:	e9cd 6704 	strd	r6, r7, [sp, #16]
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 80025f0:	f001 f87c 	bl	80036ec <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025f4:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 80025f6:	2203      	movs	r2, #3
 80025f8:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025fa:	480e      	ldr	r0, [pc, #56]	; (8002634 <HAL_TIM_MspPostInit+0xa4>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80025fc:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pin = M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 80025fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002602:	e9cd 6704 	strd	r6, r7, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002606:	f001 f871 	bl	80036ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 800260a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800260e:	2302      	movs	r3, #2
 8002610:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002614:	4806      	ldr	r0, [pc, #24]	; (8002630 <HAL_TIM_MspPostInit+0xa0>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002616:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8002618:	2202      	movs	r2, #2
 800261a:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800261c:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 800261e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002622:	f001 f863 	bl	80036ec <HAL_GPIO_Init>
}
 8002626:	b008      	add	sp, #32
 8002628:	bdd0      	pop	{r4, r6, r7, pc}
 800262a:	bf00      	nop
 800262c:	40010000 	.word	0x40010000
 8002630:	40020000 	.word	0x40020000
 8002634:	40020400 	.word	0x40020400

08002638 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002638:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART2)
 800263a:	4a1b      	ldr	r2, [pc, #108]	; (80026a8 <HAL_UART_MspInit+0x70>)
 800263c:	6801      	ldr	r1, [r0, #0]
{
 800263e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002640:	2300      	movs	r3, #0
  if(huart->Instance==USART2)
 8002642:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002644:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002648:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800264c:	9306      	str	r3, [sp, #24]
  if(huart->Instance==USART2)
 800264e:	d002      	beq.n	8002656 <HAL_UART_MspInit+0x1e>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002650:	b009      	add	sp, #36	; 0x24
 8002652:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART2_CLK_ENABLE();
 8002656:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 800265a:	9300      	str	r3, [sp, #0]
 800265c:	6c10      	ldr	r0, [r2, #64]	; 0x40
 800265e:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8002662:	6410      	str	r0, [r2, #64]	; 0x40
 8002664:	6c10      	ldr	r0, [r2, #64]	; 0x40
 8002666:	f400 3000 	and.w	r0, r0, #131072	; 0x20000
 800266a:	9000      	str	r0, [sp, #0]
 800266c:	9800      	ldr	r0, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800266e:	9301      	str	r3, [sp, #4]
 8002670:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002672:	480e      	ldr	r0, [pc, #56]	; (80026ac <HAL_UART_MspInit+0x74>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002674:	f043 0301 	orr.w	r3, r3, #1
 8002678:	6313      	str	r3, [r2, #48]	; 0x30
 800267a:	6b13      	ldr	r3, [r2, #48]	; 0x30
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 800267c:	ed9f 7b08 	vldr	d7, [pc, #32]	; 80026a0 <HAL_UART_MspInit+0x68>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002680:	f003 0301 	and.w	r3, r3, #1
 8002684:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002686:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002688:	2307      	movs	r3, #7
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 800268a:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800268e:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002690:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002692:	f001 f82b 	bl	80036ec <HAL_GPIO_Init>
}
 8002696:	b009      	add	sp, #36	; 0x24
 8002698:	f85d fb04 	ldr.w	pc, [sp], #4
 800269c:	f3af 8000 	nop.w
 80026a0:	0000000c 	.word	0x0000000c
 80026a4:	00000002 	.word	0x00000002
 80026a8:	40004400 	.word	0x40004400
 80026ac:	40020000 	.word	0x40020000

080026b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026b0:	b570      	push	{r4, r5, r6, lr}
 80026b2:	b088      	sub	sp, #32
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 80026b4:	4b23      	ldr	r3, [pc, #140]	; (8002744 <HAL_InitTick+0x94>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	9202      	str	r2, [sp, #8]
 80026ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026bc:	f042 0208 	orr.w	r2, r2, #8
 80026c0:	641a      	str	r2, [r3, #64]	; 0x40
 80026c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c4:	f003 0308 	and.w	r3, r3, #8
 80026c8:	9302      	str	r3, [sp, #8]
{
 80026ca:	4605      	mov	r5, r0

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80026cc:	a901      	add	r1, sp, #4
 80026ce:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM5_CLK_ENABLE();
 80026d0:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80026d2:	f001 fc0d 	bl	8003ef0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80026d6:	9b06      	ldr	r3, [sp, #24]
 80026d8:	b9d3      	cbnz	r3, 8002710 <HAL_InitTick+0x60>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80026da:	f001 fbe9 	bl	8003eb0 <HAL_RCC_GetPCLK1Freq>
 80026de:	4603      	mov	r3, r0
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80026e0:	4819      	ldr	r0, [pc, #100]	; (8002748 <HAL_InitTick+0x98>)

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 80026e2:	4c1a      	ldr	r4, [pc, #104]	; (800274c <HAL_InitTick+0x9c>)
 80026e4:	491a      	ldr	r1, [pc, #104]	; (8002750 <HAL_InitTick+0xa0>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80026e6:	fba0 2303 	umull	r2, r3, r0, r3
 80026ea:	0c9b      	lsrs	r3, r3, #18
 80026ec:	3b01      	subs	r3, #1
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
  htim5.Init.Prescaler = uwPrescalerValue;
  htim5.Init.ClockDivision = 0;
 80026ee:	2200      	movs	r2, #0
  htim5.Init.Prescaler = uwPrescalerValue;
 80026f0:	e9c4 1300 	strd	r1, r3, [r4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim5);
 80026f4:	4620      	mov	r0, r4
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 80026f6:	f240 33e7 	movw	r3, #999	; 0x3e7
  htim5.Init.ClockDivision = 0;
 80026fa:	6122      	str	r2, [r4, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026fc:	60a2      	str	r2, [r4, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026fe:	61a2      	str	r2, [r4, #24]
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8002700:	60e3      	str	r3, [r4, #12]
  status = HAL_TIM_Base_Init(&htim5);
 8002702:	f001 fc17 	bl	8003f34 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8002706:	4606      	mov	r6, r0
 8002708:	b130      	cbz	r0, 8002718 <HAL_InitTick+0x68>
    }
  }

 /* Return function status */
  return status;
}
 800270a:	4630      	mov	r0, r6
 800270c:	b008      	add	sp, #32
 800270e:	bd70      	pop	{r4, r5, r6, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002710:	f001 fbce 	bl	8003eb0 <HAL_RCC_GetPCLK1Freq>
 8002714:	0043      	lsls	r3, r0, #1
 8002716:	e7e3      	b.n	80026e0 <HAL_InitTick+0x30>
    status = HAL_TIM_Base_Start_IT(&htim5);
 8002718:	4620      	mov	r0, r4
 800271a:	f001 fc89 	bl	8004030 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 800271e:	4606      	mov	r6, r0
 8002720:	2800      	cmp	r0, #0
 8002722:	d1f2      	bne.n	800270a <HAL_InitTick+0x5a>
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002724:	2032      	movs	r0, #50	; 0x32
 8002726:	f000 ffa7 	bl	8003678 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800272a:	2d0f      	cmp	r5, #15
 800272c:	d901      	bls.n	8002732 <HAL_InitTick+0x82>
        status = HAL_ERROR;
 800272e:	2601      	movs	r6, #1
 8002730:	e7eb      	b.n	800270a <HAL_InitTick+0x5a>
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8002732:	4632      	mov	r2, r6
 8002734:	4629      	mov	r1, r5
 8002736:	2032      	movs	r0, #50	; 0x32
 8002738:	f000 ff60 	bl	80035fc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800273c:	4b05      	ldr	r3, [pc, #20]	; (8002754 <HAL_InitTick+0xa4>)
 800273e:	601d      	str	r5, [r3, #0]
 8002740:	e7e3      	b.n	800270a <HAL_InitTick+0x5a>
 8002742:	bf00      	nop
 8002744:	40023800 	.word	0x40023800
 8002748:	431bde83 	.word	0x431bde83
 800274c:	20001000 	.word	0x20001000
 8002750:	40000c00 	.word	0x40000c00
 8002754:	20000580 	.word	0x20000580

08002758 <TIM5_IRQHandler>:
void TIM5_IRQHandler(void)
{
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002758:	4801      	ldr	r0, [pc, #4]	; (8002760 <TIM5_IRQHandler+0x8>)
 800275a:	f001 bf67 	b.w	800462c <HAL_TIM_IRQHandler>
 800275e:	bf00      	nop
 8002760:	20001000 	.word	0x20001000

08002764 <ADC_IRQHandler>:
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_JEOS) == (LL_ADC_FLAG_JEOS));
 8002764:	4b05      	ldr	r3, [pc, #20]	; (800277c <ADC_IRQHandler+0x18>)
 8002766:	681a      	ldr	r2, [r3, #0]
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  if(LL_ADC_IsActiveFlag_JEOS(ADC1))
 8002768:	0752      	lsls	r2, r2, #29
 800276a:	d400      	bmi.n	800276e <ADC_IRQHandler+0xa>
  }
#endif
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800276c:	4770      	bx	lr
    ADC1->SR &= ~(uint32_t)(LL_ADC_FLAG_JEOS | LL_ADC_FLAG_JSTRT);
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	f022 020c 	bic.w	r2, r2, #12
 8002774:	601a      	str	r2, [r3, #0]
    TSK_HighFrequencyTask();          /*GUI, this section is present only if DAC is disabled*/
 8002776:	f7fe be63 	b.w	8001440 <TSK_HighFrequencyTask>
 800277a:	bf00      	nop
 800277c:	40012000 	.word	0x40012000

08002780 <TIM1_UP_TIM10_IRQHandler>:
{
  /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

  /* USER CODE END TIMx_UP_M1_IRQn 0 */

  LL_TIM_ClearFlag_UPDATE(PWM_Handle_M1.pParams_str->TIMx);
 8002780:	4803      	ldr	r0, [pc, #12]	; (8002790 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002782:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8002784:	685b      	ldr	r3, [r3, #4]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002786:	f06f 0201 	mvn.w	r2, #1
 800278a:	611a      	str	r2, [r3, #16]
  R3_1_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 800278c:	f005 bf40 	b.w	8008610 <R3_1_TIMx_UP_IRQHandler>
 8002790:	20000314 	.word	0x20000314

08002794 <TIM1_BRK_TIM9_IRQHandler>:
void TIMx_BRK_M1_IRQHandler(void)
{
  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 0 */

  /* USER CODE END TIMx_BRK_M1_IRQn 0 */
  if (LL_TIM_IsActiveFlag_BRK(PWM_Handle_M1.pParams_str->TIMx))
 8002794:	4807      	ldr	r0, [pc, #28]	; (80027b4 <TIM1_BRK_TIM9_IRQHandler+0x20>)
{
 8002796:	b508      	push	{r3, lr}
  if (LL_TIM_IsActiveFlag_BRK(PWM_Handle_M1.pParams_str->TIMx))
 8002798:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800279a:	685b      	ldr	r3, [r3, #4]
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 800279c:	691a      	ldr	r2, [r3, #16]
 800279e:	0612      	lsls	r2, r2, #24
 80027a0:	d504      	bpl.n	80027ac <TIM1_BRK_TIM9_IRQHandler+0x18>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 80027a2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80027a6:	611a      	str	r2, [r3, #16]
  {
    LL_TIM_ClearFlag_BRK(PWM_Handle_M1.pParams_str->TIMx);
    R3_1_BRK_IRQHandler(&PWM_Handle_M1);
 80027a8:	f005 ff50 	bl	800864c <R3_1_BRK_IRQHandler>
  MC_Scheduler();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 80027ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_Scheduler();
 80027b0:	f7fe be0c 	b.w	80013cc <MC_Scheduler>
 80027b4:	20000314 	.word	0x20000314

080027b8 <TIM2_IRQHandler>:
  * @brief  This function handles TIMx global interrupt request for M1 Speed Sensor.
  * @param  None
  * @retval None
  */
void SPD_TIM_M1_IRQHandler(void)
{
 80027b8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 0 */

  /* USER CODE END SPD_TIM_M1_IRQn 0 */

  /* HALL Timer Update IT always enabled, no need to check enable UPDATE state */
  if (LL_TIM_IsActiveFlag_UPDATE(HALL_M1.TIMx))
 80027ba:	4c0c      	ldr	r4, [pc, #48]	; (80027ec <TIM2_IRQHandler+0x34>)
 80027bc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80027be:	691a      	ldr	r2, [r3, #16]
 80027c0:	07d1      	lsls	r1, r2, #31
 80027c2:	d40b      	bmi.n	80027dc <TIM2_IRQHandler+0x24>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 80027c4:	691a      	ldr	r2, [r3, #16]
 80027c6:	0792      	lsls	r2, r2, #30
 80027c8:	d507      	bpl.n	80027da <TIM2_IRQHandler+0x22>
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 80027ca:	f06f 0202 	mvn.w	r2, #2
  /* Nothing to do */
  }
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 1 */

  /* USER CODE END SPD_TIM_M1_IRQn 1 */
}
 80027ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HALL_TIMx_CC_IRQHandler(&HALL_M1);
 80027d2:	4806      	ldr	r0, [pc, #24]	; (80027ec <TIM2_IRQHandler+0x34>)
 80027d4:	611a      	str	r2, [r3, #16]
 80027d6:	f004 be55 	b.w	8007484 <HALL_TIMx_CC_IRQHandler>
}
 80027da:	bd10      	pop	{r4, pc}
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80027dc:	f06f 0201 	mvn.w	r2, #1
 80027e0:	611a      	str	r2, [r3, #16]
    HALL_TIMx_UP_IRQHandler(&HALL_M1);
 80027e2:	4620      	mov	r0, r4
 80027e4:	f004 fff4 	bl	80077d0 <HALL_TIMx_UP_IRQHandler>
  if (LL_TIM_IsActiveFlag_CC1 (HALL_M1.TIMx))
 80027e8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80027ea:	e7eb      	b.n	80027c4 <TIM2_IRQHandler+0xc>
 80027ec:	200000b4 	.word	0x200000b4

080027f0 <USART2_IRQHandler>:
  * @brief  This function handles USART interrupt request.
  * @param  None
  * @retval None
  */
void USART_IRQHandler(void)
{
 80027f0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART_IRQn 0 */

  /* USER CODE END USART_IRQn 0 */
  if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 80027f2:	4c1f      	ldr	r4, [pc, #124]	; (8002870 <USART2_IRQHandler+0x80>)
 80027f4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	0691      	lsls	r1, r2, #26
{
 80027fc:	b082      	sub	sp, #8
  if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 80027fe:	d407      	bmi.n	8002810 <USART2_IRQHandler+0x20>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8002800:	681a      	ldr	r2, [r3, #0]
  /* USER CODE BEGIN USART_RXNE */

  /* USER CODE END USART_RXNE  */
  }

  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 8002802:	0612      	lsls	r2, r2, #24
 8002804:	d413      	bmi.n	800282e <USART2_IRQHandler+0x3e>
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8002806:	681b      	ldr	r3, [r3, #0]
    /* USER CODE BEGIN USART_TXE */

    /* USER CODE END USART_TXE   */
  }

  if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 8002808:	071b      	lsls	r3, r3, #28
 800280a:	d418      	bmi.n	800283e <USART2_IRQHandler+0x4e>
    /* USER CODE END USART_ORE   */
  }
  /* USER CODE BEGIN USART_IRQn 1 */

  /* USER CODE END USART_IRQn 1 */
}
 800280c:	b002      	add	sp, #8
 800280e:	bd10      	pop	{r4, pc}
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8002810:	6859      	ldr	r1, [r3, #4]
    retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx))); /* Flag 0 = RX */
 8002812:	4620      	mov	r0, r4
 8002814:	b2c9      	uxtb	r1, r1
 8002816:	f006 fb6f 	bl	8008ef8 <UFCP_RX_IRQ_Handler>
 800281a:	8803      	ldrh	r3, [r0, #0]
    if (retVal == 1)
 800281c:	2b01      	cmp	r3, #1
 800281e:	d021      	beq.n	8002864 <USART2_IRQHandler+0x74>
    if (retVal == 2)
 8002820:	2b02      	cmp	r3, #2
 8002822:	d01c      	beq.n	800285e <USART2_IRQHandler+0x6e>
  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 8002824:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	0612      	lsls	r2, r2, #24
 800282c:	d5eb      	bpl.n	8002806 <USART2_IRQHandler+0x16>
    UFCP_TX_IRQ_Handler(&pUSART);
 800282e:	4810      	ldr	r0, [pc, #64]	; (8002870 <USART2_IRQHandler+0x80>)
 8002830:	f006 faba 	bl	8008da8 <UFCP_TX_IRQ_Handler>
  if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 8002834:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	071b      	lsls	r3, r3, #28
 800283c:	d5e6      	bpl.n	800280c <USART2_IRQHandler+0x1c>
    UFCP_OVR_IRQ_Handler(&pUSART);
 800283e:	480c      	ldr	r0, [pc, #48]	; (8002870 <USART2_IRQHandler+0x80>)
 8002840:	f006 fbc6 	bl	8008fd0 <UFCP_OVR_IRQ_Handler>
    LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 8002844:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  tmpreg = USARTx->SR;
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 800284c:	9a01      	ldr	r2, [sp, #4]
  tmpreg = USARTx->DR;
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8002852:	9b01      	ldr	r3, [sp, #4]
}
 8002854:	b002      	add	sp, #8
 8002856:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    UI_SerialCommunicationTimeOutStop();
 800285a:	f000 b8bb 	b.w	80029d4 <UI_SerialCommunicationTimeOutStop>
      UI_SerialCommunicationTimeOutStop();
 800285e:	f000 f8b9 	bl	80029d4 <UI_SerialCommunicationTimeOutStop>
 8002862:	e7df      	b.n	8002824 <USART2_IRQHandler+0x34>
      UI_SerialCommunicationTimeOutStart();
 8002864:	f000 f8bc 	bl	80029e0 <UI_SerialCommunicationTimeOutStart>
  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 8002868:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800286c:	e7c8      	b.n	8002800 <USART2_IRQHandler+0x10>
 800286e:	bf00      	nop
 8002870:	2000042c 	.word	0x2000042c

08002874 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8002874:	b510      	push	{r4, lr}
 8002876:	b082      	sub	sp, #8
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 8002878:	f7fe feb2 	bl	80015e0 <TSK_HardwareFaultTask>
 800287c:	4c1b      	ldr	r4, [pc, #108]	; (80028ec <HardFault_Handler+0x78>)

  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
    {
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 800287e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	0712      	lsls	r2, r2, #28
 8002886:	d41d      	bmi.n	80028c4 <HardFault_Handler+0x50>
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8002888:	681a      	ldr	r2, [r3, #0]
        UFCP_OVR_IRQ_Handler(&pUSART);
        LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
        UI_SerialCommunicationTimeOutStop();
      }

      if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 800288a:	0610      	lsls	r0, r2, #24
 800288c:	d40f      	bmi.n	80028ae <HardFault_Handler+0x3a>
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 800288e:	681a      	ldr	r2, [r3, #0]
      {
        UFCP_TX_IRQ_Handler(&pUSART);
      }

      if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 8002890:	0692      	lsls	r2, r2, #26
 8002892:	d5f6      	bpl.n	8002882 <HardFault_Handler+0xe>
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8002894:	6859      	ldr	r1, [r3, #4]
      {
        uint16_t retVal;
        retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx)));
 8002896:	4620      	mov	r0, r4
 8002898:	b2c9      	uxtb	r1, r1
 800289a:	f006 fb2d 	bl	8008ef8 <UFCP_RX_IRQ_Handler>
 800289e:	8803      	ldrh	r3, [r0, #0]
        if (retVal == 1)
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d01f      	beq.n	80028e4 <HardFault_Handler+0x70>
        {
          UI_SerialCommunicationTimeOutStart();
        }
        if (retVal == 2)
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d1ea      	bne.n	800287e <HardFault_Handler+0xa>
        {
          UI_SerialCommunicationTimeOutStop();
 80028a8:	f000 f894 	bl	80029d4 <UI_SerialCommunicationTimeOutStop>
 80028ac:	e7e7      	b.n	800287e <HardFault_Handler+0xa>
        UFCP_TX_IRQ_Handler(&pUSART);
 80028ae:	4620      	mov	r0, r4
 80028b0:	f006 fa7a 	bl	8008da8 <UFCP_TX_IRQ_Handler>
      if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 80028b4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	0691      	lsls	r1, r2, #26
 80028bc:	d4ea      	bmi.n	8002894 <HardFault_Handler+0x20>
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 80028be:	681a      	ldr	r2, [r3, #0]
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 80028c0:	0712      	lsls	r2, r2, #28
 80028c2:	d5e1      	bpl.n	8002888 <HardFault_Handler+0x14>
        UFCP_OVR_IRQ_Handler(&pUSART);
 80028c4:	4620      	mov	r0, r4
 80028c6:	f006 fb83 	bl	8008fd0 <UFCP_OVR_IRQ_Handler>
        LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 80028ca:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  tmpreg = USARTx->SR;
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 80028d2:	9a01      	ldr	r2, [sp, #4]
  tmpreg = USARTx->DR;
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 80028d8:	9b01      	ldr	r3, [sp, #4]
        UI_SerialCommunicationTimeOutStop();
 80028da:	f000 f87b 	bl	80029d4 <UI_SerialCommunicationTimeOutStop>
      if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 80028de:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80028e2:	e7d1      	b.n	8002888 <HardFault_Handler+0x14>
          UI_SerialCommunicationTimeOutStart();
 80028e4:	f000 f87c 	bl	80029e0 <UI_SerialCommunicationTimeOutStart>
        if (retVal == 2)
 80028e8:	e7c9      	b.n	800287e <HardFault_Handler+0xa>
 80028ea:	bf00      	nop
 80028ec:	2000042c 	.word	0x2000042c

080028f0 <EXTI15_10_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
  return (uint32_t)(READ_BIT(EXTI->PR, ExtiLine));
 80028f0:	4b05      	ldr	r3, [pc, #20]	; (8002908 <EXTI15_10_IRQHandler+0x18>)
 80028f2:	695a      	ldr	r2, [r3, #20]
  * @brief  This function handles Button IRQ on PIN PC13.
  */
void EXTI15_10_IRQHandler (void)
{
	/* USER CODE BEGIN START_STOP_BTN */
  if ( LL_EXTI_ReadFlag_0_31(LL_EXTI_LINE_13) )
 80028f4:	0492      	lsls	r2, r2, #18
 80028f6:	d400      	bmi.n	80028fa <EXTI15_10_IRQHandler+0xa>
    LL_EXTI_ClearFlag_0_31 (LL_EXTI_LINE_13);
    //UI_HandleStartStopButton_cb ();
    POWER_CHANGE_STATE(WAKEUP);
  }

}
 80028f8:	4770      	bx	lr
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 80028fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028fe:	615a      	str	r2, [r3, #20]
    POWER_CHANGE_STATE(WAKEUP);
 8002900:	2002      	movs	r0, #2
 8002902:	f006 bb8d 	b.w	8009020 <POWER_CHANGE_STATE>
 8002906:	bf00      	nop
 8002908:	40013c00 	.word	0x40013c00

0800290c <UI_TaskInit>:
static volatile uint16_t  bCOMTimeoutCounter;
static volatile uint16_t  bCOMATRTimeCounter = SERIALCOM_ATR_TIME_TICKS;

void UI_TaskInit( uint32_t* pUICfg, uint8_t bMCNum, MCI_Handle_t* pMCIList[],
                  MCT_Handle_t* pMCTList[],const char* s_fwVer )
{
 800290c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

    pMCP = &MCP_UI_Params;
 8002910:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8002984 <UI_TaskInit+0x78>
    pMCP->_Super = UI_Params;
 8002914:	f8df e070 	ldr.w	lr, [pc, #112]	; 8002988 <UI_TaskInit+0x7c>

    UFCP_Init( & pUSART );
 8002918:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800298c <UI_TaskInit+0x80>
{
 800291c:	461e      	mov	r6, r3
    pMCP = &MCP_UI_Params;
 800291e:	4b15      	ldr	r3, [pc, #84]	; (8002974 <UI_TaskInit+0x68>)
 8002920:	f8c8 3000 	str.w	r3, [r8]
{
 8002924:	4607      	mov	r7, r0
 8002926:	460c      	mov	r4, r1
 8002928:	4615      	mov	r5, r2
    pMCP->_Super = UI_Params;
 800292a:	469c      	mov	ip, r3
 800292c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8002930:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002934:	e89e 0003 	ldmia.w	lr, {r0, r1}
{
 8002938:	b082      	sub	sp, #8
    pMCP->_Super = UI_Params;
 800293a:	e88c 0003 	stmia.w	ip, {r0, r1}
    UFCP_Init( & pUSART );
 800293e:	4648      	mov	r0, r9
{
 8002940:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    UFCP_Init( & pUSART );
 8002944:	f006 fa2e 	bl	8008da4 <UFCP_Init>
    MCP_Init(pMCP, (FCP_Handle_t *) & pUSART, & UFCP_Send, & UFCP_Receive, & UFCP_AbortReceive, s_fwVer);
 8002948:	4b0b      	ldr	r3, [pc, #44]	; (8002978 <UI_TaskInit+0x6c>)
 800294a:	f8d8 0000 	ldr.w	r0, [r8]
 800294e:	9300      	str	r3, [sp, #0]
 8002950:	4649      	mov	r1, r9
 8002952:	4b0a      	ldr	r3, [pc, #40]	; (800297c <UI_TaskInit+0x70>)
 8002954:	4a0a      	ldr	r2, [pc, #40]	; (8002980 <UI_TaskInit+0x74>)
 8002956:	f8cd a004 	str.w	sl, [sp, #4]
 800295a:	f7ff fba3 	bl	80020a4 <MCP_Init>
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 800295e:	f8d8 0000 	ldr.w	r0, [r8]
 8002962:	970a      	str	r7, [sp, #40]	; 0x28
 8002964:	4633      	mov	r3, r6
 8002966:	462a      	mov	r2, r5
 8002968:	4621      	mov	r1, r4

}
 800296a:	b002      	add	sp, #8
 800296c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 8002970:	f000 b83c 	b.w	80029ec <UI_Init>
 8002974:	20001048 	.word	0x20001048
 8002978:	08008ff1 	.word	0x08008ff1
 800297c:	08008e11 	.word	0x08008e11
 8002980:	08008e3d 	.word	0x08008e3d
 8002984:	200010fc 	.word	0x200010fc
 8002988:	20000ed0 	.word	0x20000ed0
 800298c:	2000042c 	.word	0x2000042c

08002990 <UI_Scheduler>:

__weak void UI_Scheduler(void)
{
  if(bUITaskCounter > 0u)
 8002990:	4a0d      	ldr	r2, [pc, #52]	; (80029c8 <UI_Scheduler+0x38>)
 8002992:	8813      	ldrh	r3, [r2, #0]
 8002994:	b29b      	uxth	r3, r3
 8002996:	b11b      	cbz	r3, 80029a0 <UI_Scheduler+0x10>
  {
    bUITaskCounter--;
 8002998:	8813      	ldrh	r3, [r2, #0]
 800299a:	3b01      	subs	r3, #1
 800299c:	b29b      	uxth	r3, r3
 800299e:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMTimeoutCounter > 1u)
 80029a0:	4a0a      	ldr	r2, [pc, #40]	; (80029cc <UI_Scheduler+0x3c>)
 80029a2:	8813      	ldrh	r3, [r2, #0]
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d903      	bls.n	80029b2 <UI_Scheduler+0x22>
  {
    bCOMTimeoutCounter--;
 80029aa:	8813      	ldrh	r3, [r2, #0]
 80029ac:	3b01      	subs	r3, #1
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMATRTimeCounter > 1u)
 80029b2:	4a07      	ldr	r2, [pc, #28]	; (80029d0 <UI_Scheduler+0x40>)
 80029b4:	8813      	ldrh	r3, [r2, #0]
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d903      	bls.n	80029c4 <UI_Scheduler+0x34>
  {
    bCOMATRTimeCounter--;
 80029bc:	8813      	ldrh	r3, [r2, #0]
 80029be:	3b01      	subs	r3, #1
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	8013      	strh	r3, [r2, #0]
  }
}
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	200010fa 	.word	0x200010fa
 80029cc:	200010f8 	.word	0x200010f8
 80029d0:	20000574 	.word	0x20000574

080029d4 <UI_SerialCommunicationTimeOutStop>:
  return (retVal);
}

__weak void UI_SerialCommunicationTimeOutStop(void)
{
  bCOMTimeoutCounter = 0u;
 80029d4:	4b01      	ldr	r3, [pc, #4]	; (80029dc <UI_SerialCommunicationTimeOutStop+0x8>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	801a      	strh	r2, [r3, #0]
}
 80029da:	4770      	bx	lr
 80029dc:	200010f8 	.word	0x200010f8

080029e0 <UI_SerialCommunicationTimeOutStart>:

__weak void UI_SerialCommunicationTimeOutStart(void)
{
  bCOMTimeoutCounter = SERIALCOM_TIMEOUT_OCCURENCE_TICKS;
 80029e0:	4b01      	ldr	r3, [pc, #4]	; (80029e8 <UI_SerialCommunicationTimeOutStart+0x8>)
 80029e2:	224f      	movs	r2, #79	; 0x4f
 80029e4:	801a      	strh	r2, [r3, #0]
}
 80029e6:	4770      	bx	lr
 80029e8:	200010f8 	.word	0x200010f8

080029ec <UI_Init>:
  */
__weak void UI_Init(UI_Handle_t *pHandle, uint8_t bMCNum, MCI_Handle_t ** pMCI, MCT_Handle_t** pMCT, uint32_t* pUICfg)
{
  pHandle->bDriveNum = bMCNum;
  pHandle->pMCI = pMCI;
  pHandle->pMCT = pMCT;
 80029ec:	e9c0 2302 	strd	r2, r3, [r0, #8]
  pHandle->bDriveNum = bMCNum;
 80029f0:	7101      	strb	r1, [r0, #4]
  pHandle->bSelectedDrive = 0u;
  pHandle->pUICfg = pUICfg;
 80029f2:	9b00      	ldr	r3, [sp, #0]
 80029f4:	6103      	str	r3, [r0, #16]
  pHandle->bSelectedDrive = 0u;
 80029f6:	2100      	movs	r1, #0
 80029f8:	7501      	strb	r1, [r0, #20]
}
 80029fa:	4770      	bx	lr

080029fc <UI_SelectMC>:
  * @retval Boolean set to true if the bSelectMC is valid oterwise return false.
  */
__weak bool UI_SelectMC(UI_Handle_t *pHandle,uint8_t bSelectMC)
{
  bool retVal = true;
  if (bSelectMC  >= pHandle->bDriveNum)
 80029fc:	7903      	ldrb	r3, [r0, #4]
 80029fe:	428b      	cmp	r3, r1
  {
    retVal = false;
  }
  else
  {
    pHandle->bSelectedDrive = bSelectMC;
 8002a00:	bf86      	itte	hi
 8002a02:	7501      	strbhi	r1, [r0, #20]
  bool retVal = true;
 8002a04:	2001      	movhi	r0, #1
    retVal = false;
 8002a06:	2000      	movls	r0, #0
  }
  return retVal;
}
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop

08002a0c <UI_GetSelectedMC>:
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak uint8_t UI_GetSelectedMC(UI_Handle_t *pHandle)
{
  return (pHandle->bSelectedDrive);
}
 8002a0c:	7d00      	ldrb	r0, [r0, #20]
 8002a0e:	4770      	bx	lr

08002a10 <UI_SetReg>:
  *         See MC_PROTOCOL_REG_xxx for code definition.
  * @param  wValue: New value to set.
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak bool UI_SetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, int32_t wValue)
{
 8002a10:	b530      	push	{r4, r5, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002a12:	6884      	ldr	r4, [r0, #8]
 8002a14:	7d03      	ldrb	r3, [r0, #20]
 8002a16:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
{
 8002a1a:	4614      	mov	r4, r2
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8002a1c:	68c2      	ldr	r2, [r0, #12]
{
 8002a1e:	b083      	sub	sp, #12
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8002a20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]

  bool retVal = true;
  switch (bRegID)
 8002a24:	295b      	cmp	r1, #91	; 0x5b
 8002a26:	d82f      	bhi.n	8002a88 <UI_SetReg+0x78>
 8002a28:	e8df f001 	tbb	[pc, r1]
 8002a2c:	412e2e3d 	.word	0x412e2e3d
 8002a30:	544e482e 	.word	0x544e482e
 8002a34:	726c665a 	.word	0x726c665a
 8002a38:	908a8478 	.word	0x908a8478
 8002a3c:	2e2e2e2e 	.word	0x2e2e2e2e
 8002a40:	2e2e2e2e 	.word	0x2e2e2e2e
 8002a44:	2e2e2e2e 	.word	0x2e2e2e2e
 8002a48:	2e2e2e2e 	.word	0x2e2e2e2e
 8002a4c:	2e2e2e2e 	.word	0x2e2e2e2e
 8002a50:	2e2e2e2e 	.word	0x2e2e2e2e
 8002a54:	2e2e2e2e 	.word	0x2e2e2e2e
 8002a58:	2e2e2e2e 	.word	0x2e2e2e2e
 8002a5c:	2e2e2e2e 	.word	0x2e2e2e2e
 8002a60:	2e2e2e2e 	.word	0x2e2e2e2e
 8002a64:	2e2e2e2e 	.word	0x2e2e2e2e
 8002a68:	2e2e2e2e 	.word	0x2e2e2e2e
 8002a6c:	2e2e962e 	.word	0x2e2e962e
 8002a70:	2e2e2e2e 	.word	0x2e2e2e2e
 8002a74:	2e2e2e2e 	.word	0x2e2e2e2e
 8002a78:	2e2e2e2e 	.word	0x2e2e2e2e
 8002a7c:	2e2e2e2e 	.word	0x2e2e2e2e
 8002a80:	2e2e2e2e 	.word	0x2e2e2e2e
 8002a84:	312e2e2e 	.word	0x312e2e2e
 8002a88:	2000      	movs	r0, #0
    retVal = false;
    break;
  }

  return retVal;
}
 8002a8a:	b003      	add	sp, #12
 8002a8c:	bd30      	pop	{r4, r5, pc}
      MCI_ExecSpeedRamp(pMCI,(int16_t)((wValue*SPEED_UNIT)/_RPM),0);
 8002a8e:	493f      	ldr	r1, [pc, #252]	; (8002b8c <UI_SetReg+0x17c>)
 8002a90:	fb81 3104 	smull	r3, r1, r1, r4
 8002a94:	eba1 71e4 	sub.w	r1, r1, r4, asr #31
 8002a98:	4628      	mov	r0, r5
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	b209      	sxth	r1, r1
 8002a9e:	f7fe f853 	bl	8000b48 <MCI_ExecSpeedRamp>
  bool retVal = true;
 8002aa2:	2001      	movs	r0, #1
    break;
 8002aa4:	e7f1      	b.n	8002a8a <UI_SetReg+0x7a>
      retVal = UI_SelectMC(pHandle,(uint8_t)wValue);
 8002aa6:	b2e1      	uxtb	r1, r4
 8002aa8:	f7ff ffa8 	bl	80029fc <UI_SelectMC>
    break;
 8002aac:	e7ed      	b.n	8002a8a <UI_SetReg+0x7a>
      if ((STC_Modality_t)wValue == STC_TORQUE_MODE)
 8002aae:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8002ab2:	d057      	beq.n	8002b64 <UI_SetReg+0x154>
      if ((STC_Modality_t)wValue == STC_SPEED_MODE)
 8002ab4:	2c01      	cmp	r4, #1
 8002ab6:	d05f      	beq.n	8002b78 <UI_SetReg+0x168>
  bool retVal = true;
 8002ab8:	2001      	movs	r0, #1
 8002aba:	e7e6      	b.n	8002a8a <UI_SetReg+0x7a>
      PID_SetKP(pMCT->pPIDSpeed,(int16_t)wValue);
 8002abc:	6818      	ldr	r0, [r3, #0]
 8002abe:	b221      	sxth	r1, r4
 8002ac0:	f004 ffce 	bl	8007a60 <PID_SetKP>
  bool retVal = true;
 8002ac4:	2001      	movs	r0, #1
    break;
 8002ac6:	e7e0      	b.n	8002a8a <UI_SetReg+0x7a>
      PID_SetKI(pMCT->pPIDSpeed,(int16_t)wValue);
 8002ac8:	6818      	ldr	r0, [r3, #0]
 8002aca:	b221      	sxth	r1, r4
 8002acc:	f004 ffca 	bl	8007a64 <PID_SetKI>
  bool retVal = true;
 8002ad0:	2001      	movs	r0, #1
    break;
 8002ad2:	e7da      	b.n	8002a8a <UI_SetReg+0x7a>
      PID_SetKD(pMCT->pPIDSpeed,(int16_t)wValue);
 8002ad4:	6818      	ldr	r0, [r3, #0]
 8002ad6:	b221      	sxth	r1, r4
 8002ad8:	f004 ffd4 	bl	8007a84 <PID_SetKD>
  bool retVal = true;
 8002adc:	2001      	movs	r0, #1
    break;
 8002ade:	e7d4      	b.n	8002a8a <UI_SetReg+0x7a>
      currComp = MCI_GetIqdref(pMCI);
 8002ae0:	4628      	mov	r0, r5
 8002ae2:	f7fe f8e9 	bl	8000cb8 <MCI_GetIqdref>
 8002ae6:	9001      	str	r0, [sp, #4]
      currComp.q = (int16_t)wValue;
 8002ae8:	f8ad 4004 	strh.w	r4, [sp, #4]
      MCI_SetCurrentReferences(pMCI,currComp);
 8002aec:	4628      	mov	r0, r5
 8002aee:	9901      	ldr	r1, [sp, #4]
 8002af0:	f7fe f83e 	bl	8000b70 <MCI_SetCurrentReferences>
  bool retVal = true;
 8002af4:	2001      	movs	r0, #1
    break;
 8002af6:	e7c8      	b.n	8002a8a <UI_SetReg+0x7a>
      PID_SetKP(pMCT->pPIDIq,(int16_t)wValue);
 8002af8:	6858      	ldr	r0, [r3, #4]
 8002afa:	b221      	sxth	r1, r4
 8002afc:	f004 ffb0 	bl	8007a60 <PID_SetKP>
  bool retVal = true;
 8002b00:	2001      	movs	r0, #1
    break;
 8002b02:	e7c2      	b.n	8002a8a <UI_SetReg+0x7a>
      PID_SetKI(pMCT->pPIDIq,(int16_t)wValue);
 8002b04:	6858      	ldr	r0, [r3, #4]
 8002b06:	b221      	sxth	r1, r4
 8002b08:	f004 ffac 	bl	8007a64 <PID_SetKI>
  bool retVal = true;
 8002b0c:	2001      	movs	r0, #1
    break;
 8002b0e:	e7bc      	b.n	8002a8a <UI_SetReg+0x7a>
      PID_SetKD(pMCT->pPIDIq,(int16_t)wValue);
 8002b10:	6858      	ldr	r0, [r3, #4]
 8002b12:	b221      	sxth	r1, r4
 8002b14:	f004 ffb6 	bl	8007a84 <PID_SetKD>
  bool retVal = true;
 8002b18:	2001      	movs	r0, #1
    break;
 8002b1a:	e7b6      	b.n	8002a8a <UI_SetReg+0x7a>
      currComp = MCI_GetIqdref(pMCI);
 8002b1c:	4628      	mov	r0, r5
 8002b1e:	f7fe f8cb 	bl	8000cb8 <MCI_GetIqdref>
 8002b22:	9001      	str	r0, [sp, #4]
      currComp.d = (int16_t)wValue;
 8002b24:	f8ad 4006 	strh.w	r4, [sp, #6]
      MCI_SetCurrentReferences(pMCI,currComp);
 8002b28:	4628      	mov	r0, r5
 8002b2a:	9901      	ldr	r1, [sp, #4]
 8002b2c:	f7fe f820 	bl	8000b70 <MCI_SetCurrentReferences>
  bool retVal = true;
 8002b30:	2001      	movs	r0, #1
    break;
 8002b32:	e7aa      	b.n	8002a8a <UI_SetReg+0x7a>
      PID_SetKP(pMCT->pPIDId,(int16_t)wValue);
 8002b34:	6898      	ldr	r0, [r3, #8]
 8002b36:	b221      	sxth	r1, r4
 8002b38:	f004 ff92 	bl	8007a60 <PID_SetKP>
  bool retVal = true;
 8002b3c:	2001      	movs	r0, #1
    break;
 8002b3e:	e7a4      	b.n	8002a8a <UI_SetReg+0x7a>
      PID_SetKI(pMCT->pPIDId,(int16_t)wValue);
 8002b40:	6898      	ldr	r0, [r3, #8]
 8002b42:	b221      	sxth	r1, r4
 8002b44:	f004 ff8e 	bl	8007a64 <PID_SetKI>
  bool retVal = true;
 8002b48:	2001      	movs	r0, #1
    break;
 8002b4a:	e79e      	b.n	8002a8a <UI_SetReg+0x7a>
      PID_SetKD(pMCT->pPIDId,(int16_t)wValue);
 8002b4c:	6898      	ldr	r0, [r3, #8]
 8002b4e:	b221      	sxth	r1, r4
 8002b50:	f004 ff98 	bl	8007a84 <PID_SetKD>
  bool retVal = true;
 8002b54:	2001      	movs	r0, #1
    break;
 8002b56:	e798      	b.n	8002a8a <UI_SetReg+0x7a>
      MCI_SetIdref(pMCI,(int16_t)wValue);
 8002b58:	4628      	mov	r0, r5
 8002b5a:	b221      	sxth	r1, r4
 8002b5c:	f7fe f902 	bl	8000d64 <MCI_SetIdref>
  bool retVal = true;
 8002b60:	2001      	movs	r0, #1
    break;
 8002b62:	e792      	b.n	8002a8a <UI_SetReg+0x7a>
        MCI_ExecTorqueRamp(pMCI, MCI_GetTeref(pMCI),0);
 8002b64:	4628      	mov	r0, r5
 8002b66:	f7fe f8d1 	bl	8000d0c <MCI_GetTeref>
 8002b6a:	4622      	mov	r2, r4
 8002b6c:	4601      	mov	r1, r0
 8002b6e:	4628      	mov	r0, r5
 8002b70:	f7fd fff4 	bl	8000b5c <MCI_ExecTorqueRamp>
  bool retVal = true;
 8002b74:	2001      	movs	r0, #1
 8002b76:	e788      	b.n	8002a8a <UI_SetReg+0x7a>
        MCI_ExecSpeedRamp(pMCI, MCI_GetMecSpeedRefUnit(pMCI),0);
 8002b78:	4628      	mov	r0, r5
 8002b7a:	f7fe f86f 	bl	8000c5c <MCI_GetMecSpeedRefUnit>
 8002b7e:	2200      	movs	r2, #0
 8002b80:	4601      	mov	r1, r0
 8002b82:	4628      	mov	r0, r5
 8002b84:	f7fd ffe0 	bl	8000b48 <MCI_ExecSpeedRamp>
  bool retVal = true;
 8002b88:	4620      	mov	r0, r4
 8002b8a:	e77e      	b.n	8002a8a <UI_SetReg+0x7a>
 8002b8c:	2aaaaaab 	.word	0x2aaaaaab

08002b90 <UI_GetReg>:

/* Used to execute a GetReg command coming from the user. */
__weak int32_t UI_GetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, bool * success)
{
 8002b90:	b530      	push	{r4, r5, lr}
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8002b92:	68c4      	ldr	r4, [r0, #12]
 8002b94:	7d03      	ldrb	r3, [r0, #20]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002b96:	6885      	ldr	r5, [r0, #8]
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8002b98:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002b9c:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
{
 8002ba0:	b08d      	sub	sp, #52	; 0x34

  int32_t bRetVal = 0;

  if ( success != (bool *) 0 )
 8002ba2:	2a00      	cmp	r2, #0
 8002ba4:	f000 808b 	beq.w	8002cbe <UI_GetReg+0x12e>
  {
    *success = true;
 8002ba8:	f04f 0c01 	mov.w	ip, #1
 8002bac:	f882 c000 	strb.w	ip, [r2]
  }

  switch (bRegID)
 8002bb0:	2981      	cmp	r1, #129	; 0x81
 8002bb2:	f200 8104 	bhi.w	8002dbe <UI_GetReg+0x22e>
 8002bb6:	e8df f011 	tbh	[pc, r1, lsl #1]
 8002bba:	019c      	.short	0x019c
 8002bbc:	01920196 	.word	0x01920196
 8002bc0:	0146014d 	.word	0x0146014d
 8002bc4:	013e0142 	.word	0x013e0142
 8002bc8:	0105013a 	.word	0x0105013a
 8002bcc:	01d801d0 	.word	0x01d801d0
 8002bd0:	00fd01d4 	.word	0x00fd01d4
 8002bd4:	01300134 	.word	0x01300134
 8002bd8:	010201dc 	.word	0x010201dc
 8002bdc:	01020102 	.word	0x01020102
 8002be0:	01020102 	.word	0x01020102
 8002be4:	01020102 	.word	0x01020102
 8002be8:	01020102 	.word	0x01020102
 8002bec:	01c301c7 	.word	0x01c301c7
 8002bf0:	010201bf 	.word	0x010201bf
 8002bf4:	011f0102 	.word	0x011f0102
 8002bf8:	010f010a 	.word	0x010f010a
 8002bfc:	01190102 	.word	0x01190102
 8002c00:	01880114 	.word	0x01880114
 8002c04:	01cb0183 	.word	0x01cb0183
 8002c08:	010f010a 	.word	0x010f010a
 8002c0c:	00fd0105 	.word	0x00fd0105
 8002c10:	012b018d 	.word	0x012b018d
 8002c14:	01780126 	.word	0x01780126
 8002c18:	01510165 	.word	0x01510165
 8002c1c:	01020102 	.word	0x01020102
 8002c20:	01020102 	.word	0x01020102
 8002c24:	01020102 	.word	0x01020102
 8002c28:	01020102 	.word	0x01020102
 8002c2c:	01020102 	.word	0x01020102
 8002c30:	01020102 	.word	0x01020102
 8002c34:	01020102 	.word	0x01020102
 8002c38:	01b101b8 	.word	0x01b101b8
 8002c3c:	010200fd 	.word	0x010200fd
 8002c40:	01020102 	.word	0x01020102
 8002c44:	01020102 	.word	0x01020102
 8002c48:	01020102 	.word	0x01020102
 8002c4c:	01020102 	.word	0x01020102
 8002c50:	01020102 	.word	0x01020102
 8002c54:	01020102 	.word	0x01020102
 8002c58:	01020102 	.word	0x01020102
 8002c5c:	01020102 	.word	0x01020102
 8002c60:	01020102 	.word	0x01020102
 8002c64:	01020102 	.word	0x01020102
 8002c68:	01020102 	.word	0x01020102
 8002c6c:	01020102 	.word	0x01020102
 8002c70:	010201a3 	.word	0x010201a3
 8002c74:	01020102 	.word	0x01020102
 8002c78:	01020102 	.word	0x01020102
 8002c7c:	01020102 	.word	0x01020102
 8002c80:	01020102 	.word	0x01020102
 8002c84:	01020102 	.word	0x01020102
 8002c88:	01020102 	.word	0x01020102
 8002c8c:	01020102 	.word	0x01020102
 8002c90:	01020102 	.word	0x01020102
 8002c94:	019f0102 	.word	0x019f0102
 8002c98:	017d017f 	.word	0x017d017f
 8002c9c:	01af0102 	.word	0x01af0102
 8002ca0:	01020138 	.word	0x01020138
 8002ca4:	01020102 	.word	0x01020102
 8002ca8:	01020102 	.word	0x01020102
 8002cac:	01020102 	.word	0x01020102
 8002cb0:	01020102 	.word	0x01020102
 8002cb4:	01020102 	.word	0x01020102
 8002cb8:	01020102 	.word	0x01020102
 8002cbc:	00fa      	.short	0x00fa
 8002cbe:	2973      	cmp	r1, #115	; 0x73
 8002cc0:	d875      	bhi.n	8002dae <UI_GetReg+0x21e>
 8002cc2:	e8df f011 	tbh	[pc, r1, lsl #1]
 8002cc6:	0116      	.short	0x0116
 8002cc8:	010c0110 	.word	0x010c0110
 8002ccc:	00c000c7 	.word	0x00c000c7
 8002cd0:	00b800bc 	.word	0x00b800bc
 8002cd4:	007f00b4 	.word	0x007f00b4
 8002cd8:	0152014a 	.word	0x0152014a
 8002cdc:	0077014e 	.word	0x0077014e
 8002ce0:	00aa00ae 	.word	0x00aa00ae
 8002ce4:	00740156 	.word	0x00740156
 8002ce8:	00740074 	.word	0x00740074
 8002cec:	00740074 	.word	0x00740074
 8002cf0:	00740074 	.word	0x00740074
 8002cf4:	00740074 	.word	0x00740074
 8002cf8:	013d0141 	.word	0x013d0141
 8002cfc:	00740139 	.word	0x00740139
 8002d00:	00990074 	.word	0x00990074
 8002d04:	00890084 	.word	0x00890084
 8002d08:	00930074 	.word	0x00930074
 8002d0c:	0102008e 	.word	0x0102008e
 8002d10:	014500fd 	.word	0x014500fd
 8002d14:	00890084 	.word	0x00890084
 8002d18:	0077007f 	.word	0x0077007f
 8002d1c:	00a50107 	.word	0x00a50107
 8002d20:	00f200a0 	.word	0x00f200a0
 8002d24:	00cb00df 	.word	0x00cb00df
 8002d28:	00740074 	.word	0x00740074
 8002d2c:	00740074 	.word	0x00740074
 8002d30:	00740074 	.word	0x00740074
 8002d34:	00740074 	.word	0x00740074
 8002d38:	00740074 	.word	0x00740074
 8002d3c:	00740074 	.word	0x00740074
 8002d40:	00740074 	.word	0x00740074
 8002d44:	012b0132 	.word	0x012b0132
 8002d48:	00740077 	.word	0x00740077
 8002d4c:	00740074 	.word	0x00740074
 8002d50:	00740074 	.word	0x00740074
 8002d54:	00740074 	.word	0x00740074
 8002d58:	00740074 	.word	0x00740074
 8002d5c:	00740074 	.word	0x00740074
 8002d60:	00740074 	.word	0x00740074
 8002d64:	00740074 	.word	0x00740074
 8002d68:	00740074 	.word	0x00740074
 8002d6c:	00740074 	.word	0x00740074
 8002d70:	00740074 	.word	0x00740074
 8002d74:	00740074 	.word	0x00740074
 8002d78:	00740074 	.word	0x00740074
 8002d7c:	0074011d 	.word	0x0074011d
 8002d80:	00740074 	.word	0x00740074
 8002d84:	00740074 	.word	0x00740074
 8002d88:	00740074 	.word	0x00740074
 8002d8c:	00740074 	.word	0x00740074
 8002d90:	00740074 	.word	0x00740074
 8002d94:	00740074 	.word	0x00740074
 8002d98:	00740074 	.word	0x00740074
 8002d9c:	00740074 	.word	0x00740074
 8002da0:	01190074 	.word	0x01190074
 8002da4:	00f700f9 	.word	0x00f700f9
 8002da8:	01290074 	.word	0x01290074
 8002dac:	00b2      	.short	0x00b2
  int32_t bRetVal = 0;
 8002dae:	2000      	movs	r0, #0
      }
	}
    break;
  }
  return bRetVal;
}
 8002db0:	b00d      	add	sp, #52	; 0x34
 8002db2:	bd30      	pop	{r4, r5, pc}
      bRetVal = MCI_GetIqdref(pMCI).d;
 8002db4:	4628      	mov	r0, r5
 8002db6:	f7fd ff7f 	bl	8000cb8 <MCI_GetIqdref>
 8002dba:	1400      	asrs	r0, r0, #16
    break;
 8002dbc:	e7f8      	b.n	8002db0 <UI_GetReg+0x220>
        *success = false;
 8002dbe:	2000      	movs	r0, #0
 8002dc0:	7010      	strb	r0, [r2, #0]
  return bRetVal;
 8002dc2:	e7f5      	b.n	8002db0 <UI_GetReg+0x220>
      bRetVal = MCI_GetIqdref(pMCI).q;
 8002dc4:	4628      	mov	r0, r5
 8002dc6:	f7fd ff77 	bl	8000cb8 <MCI_GetIqdref>
 8002dca:	b200      	sxth	r0, r0
    break;
 8002dcc:	e7f0      	b.n	8002db0 <UI_GetReg+0x220>
      bRetVal = MCI_GetIqd(pMCI).q;
 8002dce:	4628      	mov	r0, r5
 8002dd0:	f7fd ff64 	bl	8000c9c <MCI_GetIqd>
 8002dd4:	b200      	sxth	r0, r0
    break;
 8002dd6:	e7eb      	b.n	8002db0 <UI_GetReg+0x220>
      bRetVal = MCI_GetIqd(pMCI).d;
 8002dd8:	4628      	mov	r0, r5
 8002dda:	f7fd ff5f 	bl	8000c9c <MCI_GetIqd>
 8002dde:	1400      	asrs	r0, r0, #16
    break;
 8002de0:	e7e6      	b.n	8002db0 <UI_GetReg+0x220>
      bRetVal = MCI_GetIab(pMCI).a;
 8002de2:	4628      	mov	r0, r5
 8002de4:	f7fd ff3e 	bl	8000c64 <MCI_GetIab>
 8002de8:	b200      	sxth	r0, r0
    break;
 8002dea:	e7e1      	b.n	8002db0 <UI_GetReg+0x220>
      if (pMCT->pRevupCtrl)
 8002dec:	6960      	ldr	r0, [r4, #20]
 8002dee:	2800      	cmp	r0, #0
 8002df0:	d0dd      	beq.n	8002dae <UI_GetReg+0x21e>
        bRetVal = (int32_t)RUC_GetNumberOfPhases(pMCT->pRevupCtrl);
 8002df2:	f005 fe0b 	bl	8008a0c <RUC_GetNumberOfPhases>
 8002df6:	e7db      	b.n	8002db0 <UI_GetReg+0x220>
      bRetVal = (int32_t)((MCI_GetAvrgMecSpeedUnit(pMCI) * _RPM)/SPEED_UNIT);
 8002df8:	4628      	mov	r0, r5
 8002dfa:	f7fd ff27 	bl	8000c4c <MCI_GetAvrgMecSpeedUnit>
 8002dfe:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002e02:	0040      	lsls	r0, r0, #1
    break;
 8002e04:	e7d4      	b.n	8002db0 <UI_GetReg+0x220>
      bRetVal = MCI_GetValphabeta(pMCI).alpha;
 8002e06:	4628      	mov	r0, r5
 8002e08:	f7fd ff72 	bl	8000cf0 <MCI_GetValphabeta>
 8002e0c:	b200      	sxth	r0, r0
    break;
 8002e0e:	e7cf      	b.n	8002db0 <UI_GetReg+0x220>
      bRetVal = MCI_GetVqd(pMCI).d;
 8002e10:	4628      	mov	r0, r5
 8002e12:	f7fd ff5f 	bl	8000cd4 <MCI_GetVqd>
 8002e16:	1400      	asrs	r0, r0, #16
    break;
 8002e18:	e7ca      	b.n	8002db0 <UI_GetReg+0x220>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDId);
 8002e1a:	68a0      	ldr	r0, [r4, #8]
 8002e1c:	f004 fe28 	bl	8007a70 <PID_GetKI>
    break;
 8002e20:	e7c6      	b.n	8002db0 <UI_GetReg+0x220>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDId);
 8002e22:	68a0      	ldr	r0, [r4, #8]
 8002e24:	f004 fe20 	bl	8007a68 <PID_GetKP>
    break;
 8002e28:	e7c2      	b.n	8002db0 <UI_GetReg+0x220>
      bRetVal = PWBDID;
 8002e2a:	2004      	movs	r0, #4
 8002e2c:	e7c0      	b.n	8002db0 <UI_GetReg+0x220>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDSpeed);
 8002e2e:	6820      	ldr	r0, [r4, #0]
 8002e30:	f004 fe2a 	bl	8007a88 <PID_GetKD>
    break;
 8002e34:	e7bc      	b.n	8002db0 <UI_GetReg+0x220>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDSpeed);
 8002e36:	6820      	ldr	r0, [r4, #0]
 8002e38:	f004 fe1a 	bl	8007a70 <PID_GetKI>
    break;
 8002e3c:	e7b8      	b.n	8002db0 <UI_GetReg+0x220>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDSpeed);
 8002e3e:	6820      	ldr	r0, [r4, #0]
 8002e40:	f004 fe12 	bl	8007a68 <PID_GetKP>
    break;
 8002e44:	e7b4      	b.n	8002db0 <UI_GetReg+0x220>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI)*_RPM)/SPEED_UNIT);
 8002e46:	4628      	mov	r0, r5
 8002e48:	f7fd ff08 	bl	8000c5c <MCI_GetMecSpeedRefUnit>
 8002e4c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002e50:	0040      	lsls	r0, r0, #1
    break;
 8002e52:	e7ad      	b.n	8002db0 <UI_GetReg+0x220>
      bRetVal = (int32_t)MCI_GetControlMode(pMCI);
 8002e54:	4628      	mov	r0, r5
 8002e56:	f7fd feeb 	bl	8000c30 <MCI_GetControlMode>
    break;
 8002e5a:	e7a9      	b.n	8002db0 <UI_GetReg+0x220>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002e5c:	6902      	ldr	r2, [r0, #16]
 8002e5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002e62:	0f1a      	lsrs	r2, r3, #28
 8002e64:	3a01      	subs	r2, #1
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002e66:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002e6a:	2a01      	cmp	r2, #1
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002e6c:	f103 33ff 	add.w	r3, r3, #4294967295
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002e70:	f240 8087 	bls.w	8002f82 <UI_GetReg+0x3f2>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d89a      	bhi.n	8002dae <UI_GetReg+0x21e>
        pSPD = pMCT->pSpeedSensorAux;
 8002e78:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 8002e7a:	2800      	cmp	r0, #0
 8002e7c:	d097      	beq.n	8002dae <UI_GetReg+0x21e>
        bRetVal = SPD_GetS16Speed(pSPD);
 8002e7e:	f005 fe0b 	bl	8008a98 <SPD_GetS16Speed>
 8002e82:	e795      	b.n	8002db0 <UI_GetReg+0x220>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002e84:	6902      	ldr	r2, [r0, #16]
 8002e86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002e8a:	0f1a      	lsrs	r2, r3, #28
 8002e8c:	3a01      	subs	r2, #1
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002e8e:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002e92:	2a01      	cmp	r2, #1
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002e94:	f103 33ff 	add.w	r3, r3, #4294967295
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002e98:	d96f      	bls.n	8002f7a <UI_GetReg+0x3ea>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d887      	bhi.n	8002dae <UI_GetReg+0x21e>
        pSPD = pMCT->pSpeedSensorAux;
 8002e9e:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 8002ea0:	2800      	cmp	r0, #0
 8002ea2:	d084      	beq.n	8002dae <UI_GetReg+0x21e>
        bRetVal = SPD_GetElAngle(pSPD);
 8002ea4:	f005 fdb6 	bl	8008a14 <SPD_GetElAngle>
 8002ea8:	e782      	b.n	8002db0 <UI_GetReg+0x220>
      bRetVal = MCI_GetValphabeta(pMCI).beta;
 8002eaa:	4628      	mov	r0, r5
 8002eac:	f7fd ff20 	bl	8000cf0 <MCI_GetValphabeta>
 8002eb0:	1400      	asrs	r0, r0, #16
    break;
 8002eb2:	e77d      	b.n	8002db0 <UI_GetReg+0x220>
      bRetVal = (int32_t)(MC_UID);
 8002eb4:	4838      	ldr	r0, [pc, #224]	; (8002f98 <UI_GetReg+0x408>)
 8002eb6:	e77b      	b.n	8002db0 <UI_GetReg+0x220>
      bRetVal = (int32_t)PID_GetKIDivisor(pMCT->pPIDSpeed);
 8002eb8:	6820      	ldr	r0, [r4, #0]
 8002eba:	f004 fde1 	bl	8007a80 <PID_GetKIDivisor>
    break;
 8002ebe:	e777      	b.n	8002db0 <UI_GetReg+0x220>
      bRetVal = MCI_GetIalphabeta(pMCI).alpha;
 8002ec0:	4628      	mov	r0, r5
 8002ec2:	f7fd fedd 	bl	8000c80 <MCI_GetIalphabeta>
 8002ec6:	b200      	sxth	r0, r0
    break;
 8002ec8:	e772      	b.n	8002db0 <UI_GetReg+0x220>
      bRetVal = MCI_GetIab(pMCI).b;
 8002eca:	4628      	mov	r0, r5
 8002ecc:	f7fd feca 	bl	8000c64 <MCI_GetIab>
 8002ed0:	1400      	asrs	r0, r0, #16
    break;
 8002ed2:	e76d      	b.n	8002db0 <UI_GetReg+0x220>
      bRetVal = MCI_GetVqd(pMCI).q;
 8002ed4:	4628      	mov	r0, r5
 8002ed6:	f7fd fefd 	bl	8000cd4 <MCI_GetVqd>
 8002eda:	b200      	sxth	r0, r0
    break;
 8002edc:	e768      	b.n	8002db0 <UI_GetReg+0x220>
      bRetVal = (int32_t)STM_GetState(pMCT->pStateMachine);
 8002ede:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002ee0:	f005 ff4c 	bl	8008d7c <STM_GetState>
	break;
 8002ee4:	e764      	b.n	8002db0 <UI_GetReg+0x220>
      bRetVal = (int32_t)STM_GetFaultState(pMCT->pStateMachine);
 8002ee6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
 8002ee8:	b00d      	add	sp, #52	; 0x34
 8002eea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      bRetVal = (int32_t)STM_GetFaultState(pMCT->pStateMachine);
 8002eee:	f005 bf53 	b.w	8008d98 <STM_GetFaultState>
      bRetVal = (int32_t)UI_GetSelectedMC(pHandle);
 8002ef2:	f7ff fd8b 	bl	8002a0c <UI_GetSelectedMC>
    break;
 8002ef6:	e75b      	b.n	8002db0 <UI_GetReg+0x220>
      bRetVal = (int32_t)PID_GetKPDivisor(pMCT->pPIDSpeed);
 8002ef8:	6820      	ldr	r0, [r4, #0]
 8002efa:	f004 fdbf 	bl	8007a7c <PID_GetKPDivisor>
    break;
 8002efe:	e757      	b.n	8002db0 <UI_GetReg+0x220>
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 8002f00:	4628      	mov	r0, r5
 8002f02:	f7fd fe95 	bl	8000c30 <MCI_GetControlMode>
 8002f06:	2801      	cmp	r0, #1
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 8002f08:	4628      	mov	r0, r5
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 8002f0a:	d03f      	beq.n	8002f8c <UI_GetReg+0x3fc>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI) * _RPM)/SPEED_UNIT) ;
 8002f0c:	f7fd fea6 	bl	8000c5c <MCI_GetMecSpeedRefUnit>
 8002f10:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002f14:	0040      	lsls	r0, r0, #1
 8002f16:	e74b      	b.n	8002db0 <UI_GetReg+0x220>
      bRetVal = CTRBDID;
 8002f18:	201a      	movs	r0, #26
 8002f1a:	e749      	b.n	8002db0 <UI_GetReg+0x220>
      bRetVal = (STC_GetMinAppNegativeMecSpeedUnit(pMCT->pSpeednTorqueCtrl)  * _RPM)/SPEED_UNIT ;
 8002f1c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002f1e:	f005 fe7d 	bl	8008c1c <STC_GetMinAppNegativeMecSpeedUnit>
 8002f22:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002f26:	0040      	lsls	r0, r0, #1
    break;
 8002f28:	e742      	b.n	8002db0 <UI_GetReg+0x220>
      bRetVal = (STC_GetMaxAppPositiveMecSpeedUnit(pMCT->pSpeednTorqueCtrl) * _RPM)/SPEED_UNIT ;
 8002f2a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002f2c:	f005 fe74 	bl	8008c18 <STC_GetMaxAppPositiveMecSpeedUnit>
 8002f30:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002f34:	0040      	lsls	r0, r0, #1
    break;
 8002f36:	e73b      	b.n	8002db0 <UI_GetReg+0x220>
      bRetVal = MPM_GetAvrgElMotorPowerW(pMCT->pMPM);
 8002f38:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002f3a:	f004 fd2f 	bl	800799c <MPM_GetAvrgElMotorPowerW>
    break;
 8002f3e:	e737      	b.n	8002db0 <UI_GetReg+0x220>
      bRetVal = (int32_t)NTC_GetAvTemp_C(pMCT->pTemperatureSensor);
 8002f40:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002f42:	f004 fd6f 	bl	8007a24 <NTC_GetAvTemp_C>
    break;
 8002f46:	e733      	b.n	8002db0 <UI_GetReg+0x220>
      bRetVal = (int32_t)VBS_GetAvBusVoltage_V(pMCT->pBusVoltageSensor);
 8002f48:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002f4a:	f004 f89b 	bl	8007084 <VBS_GetAvBusVoltage_V>
    break;
 8002f4e:	e72f      	b.n	8002db0 <UI_GetReg+0x220>
      bRetVal = MCI_GetIalphabeta(pMCI).beta;
 8002f50:	4628      	mov	r0, r5
 8002f52:	f7fd fe95 	bl	8000c80 <MCI_GetIalphabeta>
 8002f56:	1400      	asrs	r0, r0, #16
    break;
 8002f58:	e72a      	b.n	8002db0 <UI_GetReg+0x220>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDIq);
 8002f5a:	6860      	ldr	r0, [r4, #4]
 8002f5c:	f004 fd84 	bl	8007a68 <PID_GetKP>
    break;
 8002f60:	e726      	b.n	8002db0 <UI_GetReg+0x220>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDIq);
 8002f62:	6860      	ldr	r0, [r4, #4]
 8002f64:	f004 fd90 	bl	8007a88 <PID_GetKD>
    break;
 8002f68:	e722      	b.n	8002db0 <UI_GetReg+0x220>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDIq);
 8002f6a:	6860      	ldr	r0, [r4, #4]
 8002f6c:	f004 fd80 	bl	8007a70 <PID_GetKI>
    break;
 8002f70:	e71e      	b.n	8002db0 <UI_GetReg+0x220>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDId);
 8002f72:	68a0      	ldr	r0, [r4, #8]
 8002f74:	f004 fd88 	bl	8007a88 <PID_GetKD>
    break;
 8002f78:	e71a      	b.n	8002db0 <UI_GetReg+0x220>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002f7a:	2b01      	cmp	r3, #1
        pSPD = pMCT->pSpeedSensorMain;
 8002f7c:	69a0      	ldr	r0, [r4, #24]
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002f7e:	d88f      	bhi.n	8002ea0 <UI_GetReg+0x310>
 8002f80:	e78d      	b.n	8002e9e <UI_GetReg+0x30e>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002f82:	2b01      	cmp	r3, #1
        pSPD = pMCT->pSpeedSensorMain;
 8002f84:	69a0      	ldr	r0, [r4, #24]
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002f86:	f63f af78 	bhi.w	8002e7a <UI_GetReg+0x2ea>
 8002f8a:	e775      	b.n	8002e78 <UI_GetReg+0x2e8>
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 8002f8c:	f7fd fe52 	bl	8000c34 <MCI_GetLastRampFinalSpeed>
 8002f90:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002f94:	0040      	lsls	r0, r0, #1
 8002f96:	e70b      	b.n	8002db0 <UI_GetReg+0x220>
 8002f98:	34a6847a 	.word	0x34a6847a

08002f9c <UI_ExecCmd>:
  * @param  bCmdID: Code of command to execute.
  *         See MC_PROTOCOL_CMD_xxx for code definition.
  *  @retval Return true if the command executed succesfully, otherwise false.
*/
__weak bool UI_ExecCmd(UI_Handle_t *pHandle, uint8_t bCmdID)
{
 8002f9c:	b510      	push	{r4, lr}
  bool retVal = true;

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002f9e:	6883      	ldr	r3, [r0, #8]
 8002fa0:	7d02      	ldrb	r2, [r0, #20]

  switch (bCmdID)
 8002fa2:	3901      	subs	r1, #1
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002fa4:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
  switch (bCmdID)
 8002fa8:	290d      	cmp	r1, #13
 8002faa:	d808      	bhi.n	8002fbe <UI_ExecCmd+0x22>
 8002fac:	e8df f001 	tbb	[pc, r1]
 8002fb0:	0e091419 	.word	0x0e091419
 8002fb4:	231e100e 	.word	0x231e100e
 8002fb8:	07070728 	.word	0x07070728
 8002fbc:	1407      	.short	0x1407
 8002fbe:	2000      	movs	r0, #0
    retVal = false;
	}
    break;
  }
  return retVal;
}
 8002fc0:	bd10      	pop	{r4, pc}
      if (MCI_GetSTMState(pMCI) == RUN)
 8002fc2:	4620      	mov	r0, r4
 8002fc4:	f7fd fe30 	bl	8000c28 <MCI_GetSTMState>
 8002fc8:	2806      	cmp	r0, #6
 8002fca:	d01e      	beq.n	800300a <UI_ExecCmd+0x6e>
  bool retVal = true;
 8002fcc:	2001      	movs	r0, #1
}
 8002fce:	bd10      	pop	{r4, pc}
      if (MCI_GetSTMState(pMCI) == IDLE)
 8002fd0:	4620      	mov	r0, r4
 8002fd2:	f7fd fe29 	bl	8000c28 <MCI_GetSTMState>
 8002fd6:	b120      	cbz	r0, 8002fe2 <UI_ExecCmd+0x46>
        MCI_StopMotor(pMCI);
 8002fd8:	4620      	mov	r0, r4
 8002fda:	f7fd fddd 	bl	8000b98 <MCI_StopMotor>
  bool retVal = true;
 8002fde:	2001      	movs	r0, #1
}
 8002fe0:	bd10      	pop	{r4, pc}
        MCI_StartMotor(pMCI);
 8002fe2:	4620      	mov	r0, r4
 8002fe4:	f7fd fdce 	bl	8000b84 <MCI_StartMotor>
  bool retVal = true;
 8002fe8:	2001      	movs	r0, #1
}
 8002fea:	bd10      	pop	{r4, pc}
      MCI_FaultAcknowledged(pMCI);
 8002fec:	4620      	mov	r0, r4
 8002fee:	f7fd fdd7 	bl	8000ba0 <MCI_FaultAcknowledged>
  bool retVal = true;
 8002ff2:	2001      	movs	r0, #1
}
 8002ff4:	bd10      	pop	{r4, pc}
      MCI_EncoderAlign(pMCI);
 8002ff6:	4620      	mov	r0, r4
 8002ff8:	f7fd fdd6 	bl	8000ba8 <MCI_EncoderAlign>
  bool retVal = true;
 8002ffc:	2001      	movs	r0, #1
}
 8002ffe:	bd10      	pop	{r4, pc}
      MCI_Clear_Iqdref(pMCI);
 8003000:	4620      	mov	r0, r4
 8003002:	f7fd feb9 	bl	8000d78 <MCI_Clear_Iqdref>
  bool retVal = true;
 8003006:	2001      	movs	r0, #1
}
 8003008:	bd10      	pop	{r4, pc}
        MCI_StopRamp(pMCI);
 800300a:	4620      	mov	r0, r4
 800300c:	f7fd fe1a 	bl	8000c44 <MCI_StopRamp>
  bool retVal = true;
 8003010:	2001      	movs	r0, #1
}
 8003012:	bd10      	pop	{r4, pc}

08003014 <UI_ExecSpeedRamp>:
  * @param  hDurationms: Duration of the ramp expressed in milliseconds.
  *         It is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecSpeedRamp(UI_Handle_t *pHandle, int32_t wFinalMecSpeedUnit, uint16_t hDurationms)
{
 8003014:	b508      	push	{r3, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];

  /* Call MCI Exec Ramp */
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 8003016:	4b07      	ldr	r3, [pc, #28]	; (8003034 <UI_ExecSpeedRamp+0x20>)
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8003018:	f890 c014 	ldrb.w	ip, [r0, #20]
 800301c:	6880      	ldr	r0, [r0, #8]
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 800301e:	f850 002c 	ldr.w	r0, [r0, ip, lsl #2]
 8003022:	fb83 c301 	smull	ip, r3, r3, r1
 8003026:	eba3 71e1 	sub.w	r1, r3, r1, asr #31
 800302a:	b209      	sxth	r1, r1
 800302c:	f7fd fd8c 	bl	8000b48 <MCI_ExecSpeedRamp>
  return true;
}
 8003030:	2001      	movs	r0, #1
 8003032:	bd08      	pop	{r3, pc}
 8003034:	2aaaaaab 	.word	0x2aaaaaab

08003038 <UI_ExecTorqueRamp>:
  * @param  hDurationms: the duration of the ramp expressed in milliseconds. It
  *         is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecTorqueRamp(UI_Handle_t *pHandle, int16_t hTargetFinal, uint16_t hDurationms)
{
 8003038:	b508      	push	{r3, lr}

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 800303a:	6883      	ldr	r3, [r0, #8]
 800303c:	f890 c014 	ldrb.w	ip, [r0, #20]

  /* Call MCI Exec Ramp */
  MCI_ExecTorqueRamp(pMCI,hTargetFinal,hDurationms);
 8003040:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 8003044:	f7fd fd8a 	bl	8000b5c <MCI_ExecTorqueRamp>
  return true;
}
 8003048:	2001      	movs	r0, #1
 800304a:	bd08      	pop	{r3, pc}

0800304c <UI_GetRevupData>:
  *
  *  @retval Returns true if the command executed successfully, false otherwise.
  */
__weak bool UI_GetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t* pDurationms,
                     int16_t* pFinalMecSpeedUnit, int16_t* pFinalTorque )
{
 800304c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800304e:	4617      	mov	r7, r2
 8003050:	461e      	mov	r6, r3
  bool hRetVal = true;

  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8003052:	7d02      	ldrb	r2, [r0, #20]
 8003054:	68c3      	ldr	r3, [r0, #12]
 8003056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800305a:	695c      	ldr	r4, [r3, #20]
  if (pRevupCtrl)
 800305c:	b18c      	cbz	r4, 8003082 <UI_GetRevupData+0x36>
  {
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 800305e:	4620      	mov	r0, r4
 8003060:	460d      	mov	r5, r1
 8003062:	f005 fcbd 	bl	80089e0 <RUC_GetPhaseDurationms>
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 8003066:	4629      	mov	r1, r5
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 8003068:	8038      	strh	r0, [r7, #0]
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 800306a:	4620      	mov	r0, r4
 800306c:	f005 fcbe 	bl	80089ec <RUC_GetPhaseFinalMecSpeedUnit>
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 8003070:	4629      	mov	r1, r5
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 8003072:	8030      	strh	r0, [r6, #0]
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 8003074:	4620      	mov	r0, r4
 8003076:	f005 fcc1 	bl	80089fc <RUC_GetPhaseFinalTorque>
 800307a:	9b06      	ldr	r3, [sp, #24]
 800307c:	8018      	strh	r0, [r3, #0]
  bool hRetVal = true;
 800307e:	2001      	movs	r0, #1
  else
  {
    hRetVal = false;
  }
  return hRetVal;
}
 8003080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hRetVal = false;
 8003082:	4620      	mov	r0, r4
}
 8003084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003086:	bf00      	nop

08003088 <UI_SetRevupData>:
  *         digit.
  *  @retval Return true if the command executed successfully, otherwise false.
  */
__weak bool UI_SetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t hDurationms,
                     int16_t hFinalMecSpeedUnit, int16_t hFinalTorque )
{
 8003088:	b570      	push	{r4, r5, r6, lr}
 800308a:	461d      	mov	r5, r3
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 800308c:	7d06      	ldrb	r6, [r0, #20]
 800308e:	68c3      	ldr	r3, [r0, #12]
{
 8003090:	b082      	sub	sp, #8
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8003092:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
{
 8003096:	f9bd 6018 	ldrsh.w	r6, [sp, #24]
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 800309a:	6958      	ldr	r0, [r3, #20]
  RUC_SetPhaseDurationms(pRevupCtrl, bStage, hDurationms);
 800309c:	9001      	str	r0, [sp, #4]
{
 800309e:	460c      	mov	r4, r1
  RUC_SetPhaseDurationms(pRevupCtrl, bStage, hDurationms);
 80030a0:	f005 fc8c 	bl	80089bc <RUC_SetPhaseDurationms>
  RUC_SetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage, hFinalMecSpeedUnit);
 80030a4:	9801      	ldr	r0, [sp, #4]
 80030a6:	462a      	mov	r2, r5
 80030a8:	4621      	mov	r1, r4
 80030aa:	f005 fc8d 	bl	80089c8 <RUC_SetPhaseFinalMecSpeedUnit>
  RUC_SetPhaseFinalTorque(pRevupCtrl, bStage, hFinalTorque);
 80030ae:	9801      	ldr	r0, [sp, #4]
 80030b0:	4632      	mov	r2, r6
 80030b2:	4621      	mov	r1, r4
 80030b4:	f005 fc8e 	bl	80089d4 <RUC_SetPhaseFinalTorque>
  return true;
}
 80030b8:	2001      	movs	r0, #1
 80030ba:	b002      	add	sp, #8
 80030bc:	bd70      	pop	{r4, r5, r6, pc}
 80030be:	bf00      	nop

080030c0 <UI_SetCurrentReferences>:
  * @param  hIdRef: Current Id reference on qd reference frame.
  *         This value is expressed in digit. See hIqRef param description.
  * @retval none.
  */
__weak void UI_SetCurrentReferences(UI_Handle_t *pHandle, int16_t hIqRef, int16_t hIdRef)
{
 80030c0:	b082      	sub	sp, #8

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80030c2:	f890 c014 	ldrb.w	ip, [r0, #20]
 80030c6:	6883      	ldr	r3, [r0, #8]
  qd_t currComp;
  currComp.q = hIqRef;
 80030c8:	f8ad 1004 	strh.w	r1, [sp, #4]
  currComp.d = hIdRef;
 80030cc:	f8ad 2006 	strh.w	r2, [sp, #6]
  MCI_SetCurrentReferences(pMCI,currComp);
 80030d0:	9901      	ldr	r1, [sp, #4]
 80030d2:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
}
 80030d6:	b002      	add	sp, #8
  MCI_SetCurrentReferences(pMCI,currComp);
 80030d8:	f7fd bd4a 	b.w	8000b70 <MCI_SetCurrentReferences>

080030dc <UI_GetMPInfo>:
  * @retval true if MP is enabled, false otherwise.
  */
__weak bool UI_GetMPInfo(pMPInfo_t stepList, pMPInfo_t pMPInfo)
{
    return false;
}
 80030dc:	2000      	movs	r0, #0
 80030de:	4770      	bx	lr

080030e0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80030e0:	4a03      	ldr	r2, [pc, #12]	; (80030f0 <SystemInit+0x10>)
 80030e2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80030e6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80030ea:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80030ee:	4770      	bx	lr
 80030f0:	e000ed00 	.word	0xe000ed00

080030f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030f4:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80030f6:	4b0b      	ldr	r3, [pc, #44]	; (8003124 <HAL_Init+0x30>)
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030fe:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003106:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800310e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003110:	2003      	movs	r0, #3
 8003112:	f000 fa61 	bl	80035d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003116:	2000      	movs	r0, #0
 8003118:	f7ff faca 	bl	80026b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800311c:	f7ff f954 	bl	80023c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8003120:	2000      	movs	r0, #0
 8003122:	bd08      	pop	{r3, pc}
 8003124:	40023c00 	.word	0x40023c00

08003128 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003128:	4a03      	ldr	r2, [pc, #12]	; (8003138 <HAL_IncTick+0x10>)
 800312a:	4b04      	ldr	r3, [pc, #16]	; (800313c <HAL_IncTick+0x14>)
 800312c:	6811      	ldr	r1, [r2, #0]
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	440b      	add	r3, r1
 8003132:	6013      	str	r3, [r2, #0]
}
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	20001100 	.word	0x20001100
 800313c:	2000057c 	.word	0x2000057c

08003140 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003140:	4b01      	ldr	r3, [pc, #4]	; (8003148 <HAL_GetTick+0x8>)
 8003142:	6818      	ldr	r0, [r3, #0]
}
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	20001100 	.word	0x20001100

0800314c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800314c:	b538      	push	{r3, r4, r5, lr}
 800314e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003150:	f7ff fff6 	bl	8003140 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003154:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8003156:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8003158:	d002      	beq.n	8003160 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800315a:	4b04      	ldr	r3, [pc, #16]	; (800316c <HAL_Delay+0x20>)
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003160:	f7ff ffee 	bl	8003140 <HAL_GetTick>
 8003164:	1b43      	subs	r3, r0, r5
 8003166:	42a3      	cmp	r3, r4
 8003168:	d3fa      	bcc.n	8003160 <HAL_Delay+0x14>
  {
  }
}
 800316a:	bd38      	pop	{r3, r4, r5, pc}
 800316c:	2000057c 	.word	0x2000057c

08003170 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003170:	2800      	cmp	r0, #0
 8003172:	f000 809f 	beq.w	80032b4 <HAL_ADC_Init+0x144>
{
 8003176:	b538      	push	{r3, r4, r5, lr}
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003178:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800317a:	4604      	mov	r4, r0
 800317c:	b13d      	cbz	r5, 800318e <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800317e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003180:	06db      	lsls	r3, r3, #27
 8003182:	d50c      	bpl.n	800319e <HAL_ADC_Init+0x2e>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003184:	2300      	movs	r3, #0
 8003186:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    tmp_hal_status = HAL_ERROR;
 800318a:	2001      	movs	r0, #1

  /* Return function status */
  return tmp_hal_status;
}
 800318c:	bd38      	pop	{r3, r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 800318e:	f7ff f93b 	bl	8002408 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8003192:	6465      	str	r5, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003194:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hadc->Lock = HAL_UNLOCKED;
 8003196:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800319a:	06db      	lsls	r3, r3, #27
 800319c:	d4f2      	bmi.n	8003184 <HAL_ADC_Init+0x14>
    ADC_STATE_CLR_SET(hadc->State,
 800319e:	6c23      	ldr	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80031a0:	4a48      	ldr	r2, [pc, #288]	; (80032c4 <HAL_ADC_Init+0x154>)
    ADC_STATE_CLR_SET(hadc->State,
 80031a2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80031a6:	f023 0302 	bic.w	r3, r3, #2
 80031aa:	f043 0302 	orr.w	r3, r3, #2
 80031ae:	6423      	str	r3, [r4, #64]	; 0x40
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80031b0:	6851      	ldr	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80031b2:	6823      	ldr	r3, [r4, #0]
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80031b4:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 80031b8:	6051      	str	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80031ba:	6851      	ldr	r1, [r2, #4]
 80031bc:	6860      	ldr	r0, [r4, #4]
 80031be:	4301      	orrs	r1, r0
 80031c0:	6051      	str	r1, [r2, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80031c2:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80031c4:	6925      	ldr	r5, [r4, #16]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80031c6:	68a0      	ldr	r0, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80031c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80031ce:	6859      	ldr	r1, [r3, #4]
 80031d0:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 80031d4:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80031d6:	6859      	ldr	r1, [r3, #4]
 80031d8:	f021 7140 	bic.w	r1, r1, #50331648	; 0x3000000
 80031dc:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80031de:	685a      	ldr	r2, [r3, #4]
 80031e0:	4302      	orrs	r2, r0
 80031e2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80031e4:	6899      	ldr	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80031e6:	68e0      	ldr	r0, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80031e8:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 80031ec:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80031ee:	689a      	ldr	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031f0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80031f2:	4302      	orrs	r2, r0
 80031f4:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031f6:	4a34      	ldr	r2, [pc, #208]	; (80032c8 <HAL_ADC_Init+0x158>)
 80031f8:	4291      	cmp	r1, r2
 80031fa:	d052      	beq.n	80032a2 <HAL_ADC_Init+0x132>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031fc:	6898      	ldr	r0, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80031fe:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003200:	f020 6070 	bic.w	r0, r0, #251658240	; 0xf000000
 8003204:	6098      	str	r0, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003206:	689a      	ldr	r2, [r3, #8]
 8003208:	4311      	orrs	r1, r2
 800320a:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800320c:	6899      	ldr	r1, [r3, #8]
 800320e:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 8003212:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003214:	689a      	ldr	r2, [r3, #8]
 8003216:	432a      	orrs	r2, r5
 8003218:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800321a:	689a      	ldr	r2, [r3, #8]
 800321c:	f022 0202 	bic.w	r2, r2, #2
 8003220:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003222:	689a      	ldr	r2, [r3, #8]
 8003224:	7e21      	ldrb	r1, [r4, #24]
 8003226:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800322a:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800322c:	f894 2020 	ldrb.w	r2, [r4, #32]
 8003230:	2a00      	cmp	r2, #0
 8003232:	d041      	beq.n	80032b8 <HAL_ADC_Init+0x148>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003234:	6859      	ldr	r1, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003236:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003238:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800323c:	6059      	str	r1, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800323e:	6858      	ldr	r0, [r3, #4]
 8003240:	f420 4060 	bic.w	r0, r0, #57344	; 0xe000
 8003244:	6058      	str	r0, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003246:	1e51      	subs	r1, r2, #1
 8003248:	685a      	ldr	r2, [r3, #4]
 800324a:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800324e:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003252:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003254:	6965      	ldr	r5, [r4, #20]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003256:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800325a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800325c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800325e:	3901      	subs	r1, #1
 8003260:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8003264:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003266:	6899      	ldr	r1, [r3, #8]
 8003268:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 800326c:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800326e:	6899      	ldr	r1, [r3, #8]
 8003270:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8003274:	ea41 2142 	orr.w	r1, r1, r2, lsl #9
 8003278:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800327a:	6899      	ldr	r1, [r3, #8]
 800327c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003280:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003282:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8003284:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003286:	ea42 2285 	orr.w	r2, r2, r5, lsl #10
 800328a:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800328c:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 800328e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003290:	f023 0303 	bic.w	r3, r3, #3
 8003294:	f043 0301 	orr.w	r3, r3, #1
 8003298:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 800329a:	2300      	movs	r3, #0
 800329c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80032a0:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80032a2:	689a      	ldr	r2, [r3, #8]
 80032a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80032a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80032aa:	689a      	ldr	r2, [r3, #8]
 80032ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80032b0:	609a      	str	r2, [r3, #8]
 80032b2:	e7b2      	b.n	800321a <HAL_ADC_Init+0xaa>
    return HAL_ERROR;
 80032b4:	2001      	movs	r0, #1
}
 80032b6:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80032b8:	685a      	ldr	r2, [r3, #4]
 80032ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032be:	605a      	str	r2, [r3, #4]
 80032c0:	e7c6      	b.n	8003250 <HAL_ADC_Init+0xe0>
 80032c2:	bf00      	nop
 80032c4:	40012300 	.word	0x40012300
 80032c8:	0f000001 	.word	0x0f000001

080032cc <HAL_ADC_ConfigChannel>:
{
 80032cc:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hadc);
 80032ce:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80032d2:	b083      	sub	sp, #12
  __IO uint32_t counter = 0U;
 80032d4:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 80032d6:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 80032d8:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80032da:	f000 809c 	beq.w	8003416 <HAL_ADC_ConfigChannel+0x14a>
 80032de:	2301      	movs	r3, #1
 80032e0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 80032e4:	680c      	ldr	r4, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80032e6:	6803      	ldr	r3, [r0, #0]
  if (sConfig->Channel > ADC_CHANNEL_9)
 80032e8:	2c09      	cmp	r4, #9
 80032ea:	d82d      	bhi.n	8003348 <HAL_ADC_ConfigChannel+0x7c>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80032ec:	691d      	ldr	r5, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80032ee:	688a      	ldr	r2, [r1, #8]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80032f0:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 80032f4:	f04f 0c07 	mov.w	ip, #7
 80032f8:	fa0c fc0e 	lsl.w	ip, ip, lr
 80032fc:	ea25 050c 	bic.w	r5, r5, ip
 8003300:	611d      	str	r5, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003302:	691d      	ldr	r5, [r3, #16]
 8003304:	fa02 f20e 	lsl.w	r2, r2, lr
 8003308:	432a      	orrs	r2, r5
 800330a:	611a      	str	r2, [r3, #16]
  if (sConfig->Rank < 7U)
 800330c:	684a      	ldr	r2, [r1, #4]
 800330e:	2a06      	cmp	r2, #6
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003310:	46a4      	mov	ip, r4
  if (sConfig->Rank < 7U)
 8003312:	d82f      	bhi.n	8003374 <HAL_ADC_ConfigChannel+0xa8>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003314:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003318:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800331a:	3a05      	subs	r2, #5
 800331c:	f04f 0e1f 	mov.w	lr, #31
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003320:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003324:	fa0e f202 	lsl.w	r2, lr, r2
 8003328:	ea21 0202 	bic.w	r2, r1, r2
 800332c:	635a      	str	r2, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800332e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003330:	ea4c 0202 	orr.w	r2, ip, r2
 8003334:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003336:	4a39      	ldr	r2, [pc, #228]	; (800341c <HAL_ADC_ConfigChannel+0x150>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d030      	beq.n	800339e <HAL_ADC_ConfigChannel+0xd2>
  __HAL_UNLOCK(hadc);
 800333c:	2300      	movs	r3, #0
 800333e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8003342:	4618      	mov	r0, r3
}
 8003344:	b003      	add	sp, #12
 8003346:	bd30      	pop	{r4, r5, pc}
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003348:	fa1f fc84 	uxth.w	ip, r4
 800334c:	eb0c 024c 	add.w	r2, ip, ip, lsl #1
 8003350:	68dd      	ldr	r5, [r3, #12]
 8003352:	f1a2 0e1e 	sub.w	lr, r2, #30
 8003356:	2207      	movs	r2, #7
 8003358:	fa02 f20e 	lsl.w	r2, r2, lr
 800335c:	ea25 0202 	bic.w	r2, r5, r2
 8003360:	60da      	str	r2, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003362:	688a      	ldr	r2, [r1, #8]
 8003364:	68dd      	ldr	r5, [r3, #12]
 8003366:	fa02 f20e 	lsl.w	r2, r2, lr
 800336a:	432a      	orrs	r2, r5
 800336c:	60da      	str	r2, [r3, #12]
  if (sConfig->Rank < 7U)
 800336e:	684a      	ldr	r2, [r1, #4]
 8003370:	2a06      	cmp	r2, #6
 8003372:	d9cf      	bls.n	8003314 <HAL_ADC_ConfigChannel+0x48>
  else if (sConfig->Rank < 13U)
 8003374:	2a0c      	cmp	r2, #12
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003376:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  else if (sConfig->Rank < 13U)
 800337a:	d836      	bhi.n	80033ea <HAL_ADC_ConfigChannel+0x11e>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800337c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800337e:	3a23      	subs	r2, #35	; 0x23
 8003380:	251f      	movs	r5, #31
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003382:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003386:	fa05 f202 	lsl.w	r2, r5, r2
 800338a:	ea21 0202 	bic.w	r2, r1, r2
 800338e:	631a      	str	r2, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003390:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003392:	ea4c 0202 	orr.w	r2, ip, r2
 8003396:	631a      	str	r2, [r3, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003398:	4a20      	ldr	r2, [pc, #128]	; (800341c <HAL_ADC_ConfigChannel+0x150>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d1ce      	bne.n	800333c <HAL_ADC_ConfigChannel+0x70>
 800339e:	2c12      	cmp	r4, #18
 80033a0:	d032      	beq.n	8003408 <HAL_ADC_ConfigChannel+0x13c>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80033a2:	f1a4 0310 	sub.w	r3, r4, #16
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d8c8      	bhi.n	800333c <HAL_ADC_ConfigChannel+0x70>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80033aa:	4a1d      	ldr	r2, [pc, #116]	; (8003420 <HAL_ADC_ConfigChannel+0x154>)
 80033ac:	6853      	ldr	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80033ae:	2c10      	cmp	r4, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80033b0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80033b4:	6053      	str	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80033b6:	d1c1      	bne.n	800333c <HAL_ADC_ConfigChannel+0x70>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80033b8:	4b1a      	ldr	r3, [pc, #104]	; (8003424 <HAL_ADC_ConfigChannel+0x158>)
 80033ba:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f502 322e 	add.w	r2, r2, #178176	; 0x2b800
 80033c4:	f202 3283 	addw	r2, r2, #899	; 0x383
 80033c8:	fba2 2303 	umull	r2, r3, r2, r3
 80033cc:	0c9b      	lsrs	r3, r3, #18
 80033ce:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80033d2:	005b      	lsls	r3, r3, #1
 80033d4:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80033d6:	9b01      	ldr	r3, [sp, #4]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d0af      	beq.n	800333c <HAL_ADC_ConfigChannel+0x70>
        counter--;
 80033dc:	9b01      	ldr	r3, [sp, #4]
 80033de:	3b01      	subs	r3, #1
 80033e0:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80033e2:	9b01      	ldr	r3, [sp, #4]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d1f9      	bne.n	80033dc <HAL_ADC_ConfigChannel+0x110>
 80033e8:	e7a8      	b.n	800333c <HAL_ADC_ConfigChannel+0x70>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80033ea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033ec:	3a41      	subs	r2, #65	; 0x41
 80033ee:	251f      	movs	r5, #31
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80033f0:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80033f4:	fa05 f202 	lsl.w	r2, r5, r2
 80033f8:	ea21 0202 	bic.w	r2, r1, r2
 80033fc:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80033fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003400:	ea4c 0202 	orr.w	r2, ip, r2
 8003404:	62da      	str	r2, [r3, #44]	; 0x2c
 8003406:	e796      	b.n	8003336 <HAL_ADC_ConfigChannel+0x6a>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003408:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 800340c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003410:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003414:	e792      	b.n	800333c <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 8003416:	2002      	movs	r0, #2
}
 8003418:	b003      	add	sp, #12
 800341a:	bd30      	pop	{r4, r5, pc}
 800341c:	40012000 	.word	0x40012000
 8003420:	40012300 	.word	0x40012300
 8003424:	20000578 	.word	0x20000578

08003428 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8003428:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800342a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800342e:	698e      	ldr	r6, [r1, #24]
  __HAL_LOCK(hadc);
 8003430:	2b01      	cmp	r3, #1
 8003432:	f000 80c8 	beq.w	80035c6 <HAL_ADCEx_InjectedConfigChannel+0x19e>
 8003436:	2301      	movs	r3, #1
 8003438:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 800343c:	680d      	ldr	r5, [r1, #0]
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 800343e:	6803      	ldr	r3, [r0, #0]
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8003440:	2d09      	cmp	r5, #9
 8003442:	d868      	bhi.n	8003516 <HAL_ADCEx_InjectedConfigChannel+0xee>
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8003444:	691c      	ldr	r4, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8003446:	688a      	ldr	r2, [r1, #8]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8003448:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 800344c:	2707      	movs	r7, #7
 800344e:	fa07 f70c 	lsl.w	r7, r7, ip
 8003452:	ea24 0407 	bic.w	r4, r4, r7
 8003456:	611c      	str	r4, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8003458:	691c      	ldr	r4, [r3, #16]
 800345a:	fa02 f20c 	lsl.w	r2, r2, ip
 800345e:	4322      	orrs	r2, r4
 8003460:	611a      	str	r2, [r3, #16]
 8003462:	46ac      	mov	ip, r5
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8003464:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8003466:	f8d1 e010 	ldr.w	lr, [r1, #16]
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 800346a:	684c      	ldr	r4, [r1, #4]
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 800346c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8003470:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8003472:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8003474:	f10e 32ff 	add.w	r2, lr, #4294967295
 8003478:	ea47 5702 	orr.w	r7, r7, r2, lsl #20
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 800347c:	1ce2      	adds	r2, r4, #3
 800347e:	eba2 020e 	sub.w	r2, r2, lr
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8003482:	639f      	str	r7, [r3, #56]	; 0x38
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8003484:	b2d2      	uxtb	r2, r2
 8003486:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8003488:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800348c:	f04f 0e1f 	mov.w	lr, #31
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8003490:	fa0c fc02 	lsl.w	ip, ip, r2
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8003494:	fa0e f202 	lsl.w	r2, lr, r2
 8003498:	ea27 0202 	bic.w	r2, r7, r2
 800349c:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 800349e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034a0:	ea4c 0202 	orr.w	r2, ip, r2
 80034a4:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80034a6:	4a49      	ldr	r2, [pc, #292]	; (80035cc <HAL_ADCEx_InjectedConfigChannel+0x1a4>)
 80034a8:	4296      	cmp	r6, r2
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 80034aa:	689a      	ldr	r2, [r3, #8]
 80034ac:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 80034b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 80034b2:	689a      	ldr	r2, [r3, #8]
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80034b4:	d066      	beq.n	8003584 <HAL_ADCEx_InjectedConfigChannel+0x15c>
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 80034b6:	4316      	orrs	r6, r2
 80034b8:	609e      	str	r6, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 80034ba:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 80034bc:	69ce      	ldr	r6, [r1, #28]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 80034be:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80034c2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 80034c4:	689a      	ldr	r2, [r3, #8]
 80034c6:	4332      	orrs	r2, r6
 80034c8:	609a      	str	r2, [r3, #8]
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 80034ca:	7d4a      	ldrb	r2, [r1, #21]
 80034cc:	2a00      	cmp	r2, #0
 80034ce:	d034      	beq.n	800353a <HAL_ADCEx_InjectedConfigChannel+0x112>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 80034d0:	685a      	ldr	r2, [r3, #4]
 80034d2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80034d6:	605a      	str	r2, [r3, #4]
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 80034d8:	7d0a      	ldrb	r2, [r1, #20]
 80034da:	2a00      	cmp	r2, #0
 80034dc:	d034      	beq.n	8003548 <HAL_ADCEx_InjectedConfigChannel+0x120>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 80034de:	685a      	ldr	r2, [r3, #4]
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
  }
  
  switch(sConfigInjected->InjectedRank)
 80034e0:	2c02      	cmp	r4, #2
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 80034e2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80034e6:	605a      	str	r2, [r3, #4]
  switch(sConfigInjected->InjectedRank)
 80034e8:	d034      	beq.n	8003554 <HAL_ADCEx_InjectedConfigChannel+0x12c>
 80034ea:	2c03      	cmp	r4, #3
 80034ec:	d059      	beq.n	80035a2 <HAL_ADCEx_InjectedConfigChannel+0x17a>
 80034ee:	2c01      	cmp	r4, #1
 80034f0:	d04c      	beq.n	800358c <HAL_ADCEx_InjectedConfigChannel+0x164>
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
      break;
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 80034f2:	6a1a      	ldr	r2, [r3, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 80034f4:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 80034f6:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 80034fa:	f022 020f 	bic.w	r2, r2, #15
 80034fe:	621a      	str	r2, [r3, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8003500:	6a1a      	ldr	r2, [r3, #32]
 8003502:	430a      	orrs	r2, r1
 8003504:	621a      	str	r2, [r3, #32]
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8003506:	4a32      	ldr	r2, [pc, #200]	; (80035d0 <HAL_ADCEx_InjectedConfigChannel+0x1a8>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d030      	beq.n	800356e <HAL_ADCEx_InjectedConfigChannel+0x146>
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800350c:	2300      	movs	r3, #0
 800350e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003512:	4618      	mov	r0, r3
}
 8003514:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8003516:	fa1f fc85 	uxth.w	ip, r5
 800351a:	eb0c 024c 	add.w	r2, ip, ip, lsl #1
 800351e:	f1a2 041e 	sub.w	r4, r2, #30
 8003522:	2707      	movs	r7, #7
 8003524:	68da      	ldr	r2, [r3, #12]
 8003526:	40a7      	lsls	r7, r4
 8003528:	ea22 0207 	bic.w	r2, r2, r7
 800352c:	60da      	str	r2, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 800352e:	688a      	ldr	r2, [r1, #8]
 8003530:	40a2      	lsls	r2, r4
 8003532:	68dc      	ldr	r4, [r3, #12]
 8003534:	4322      	orrs	r2, r4
 8003536:	60da      	str	r2, [r3, #12]
 8003538:	e794      	b.n	8003464 <HAL_ADCEx_InjectedConfigChannel+0x3c>
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 800353a:	685a      	ldr	r2, [r3, #4]
 800353c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003540:	605a      	str	r2, [r3, #4]
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8003542:	7d0a      	ldrb	r2, [r1, #20]
 8003544:	2a00      	cmp	r2, #0
 8003546:	d1ca      	bne.n	80034de <HAL_ADCEx_InjectedConfigChannel+0xb6>
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8003548:	685a      	ldr	r2, [r3, #4]
  switch(sConfigInjected->InjectedRank)
 800354a:	2c02      	cmp	r4, #2
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 800354c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003550:	605a      	str	r2, [r3, #4]
  switch(sConfigInjected->InjectedRank)
 8003552:	d1ca      	bne.n	80034ea <HAL_ADCEx_InjectedConfigChannel+0xc2>
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8003554:	699a      	ldr	r2, [r3, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8003556:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8003558:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 800355c:	f022 020f 	bic.w	r2, r2, #15
 8003560:	619a      	str	r2, [r3, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8003562:	699a      	ldr	r2, [r3, #24]
 8003564:	430a      	orrs	r2, r1
 8003566:	619a      	str	r2, [r3, #24]
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8003568:	4a19      	ldr	r2, [pc, #100]	; (80035d0 <HAL_ADCEx_InjectedConfigChannel+0x1a8>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d1ce      	bne.n	800350c <HAL_ADCEx_InjectedConfigChannel+0xe4>
 800356e:	2d12      	cmp	r5, #18
 8003570:	d022      	beq.n	80035b8 <HAL_ADCEx_InjectedConfigChannel+0x190>
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8003572:	3d10      	subs	r5, #16
 8003574:	2d01      	cmp	r5, #1
 8003576:	d8c9      	bhi.n	800350c <HAL_ADCEx_InjectedConfigChannel+0xe4>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003578:	4a16      	ldr	r2, [pc, #88]	; (80035d4 <HAL_ADCEx_InjectedConfigChannel+0x1ac>)
 800357a:	6853      	ldr	r3, [r2, #4]
 800357c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003580:	6053      	str	r3, [r2, #4]
 8003582:	e7c3      	b.n	800350c <HAL_ADCEx_InjectedConfigChannel+0xe4>
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 8003584:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8003588:	609a      	str	r2, [r3, #8]
 800358a:	e79e      	b.n	80034ca <HAL_ADCEx_InjectedConfigChannel+0xa2>
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 800358c:	695a      	ldr	r2, [r3, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 800358e:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8003590:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8003594:	f022 020f 	bic.w	r2, r2, #15
 8003598:	615a      	str	r2, [r3, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 800359a:	695a      	ldr	r2, [r3, #20]
 800359c:	430a      	orrs	r2, r1
 800359e:	615a      	str	r2, [r3, #20]
      break;
 80035a0:	e7b1      	b.n	8003506 <HAL_ADCEx_InjectedConfigChannel+0xde>
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 80035a2:	69da      	ldr	r2, [r3, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 80035a4:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 80035a6:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 80035aa:	f022 020f 	bic.w	r2, r2, #15
 80035ae:	61da      	str	r2, [r3, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 80035b0:	69da      	ldr	r2, [r3, #28]
 80035b2:	430a      	orrs	r2, r1
 80035b4:	61da      	str	r2, [r3, #28]
      break;
 80035b6:	e7a6      	b.n	8003506 <HAL_ADCEx_InjectedConfigChannel+0xde>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80035b8:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 80035bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80035c0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 80035c4:	e7a2      	b.n	800350c <HAL_ADCEx_InjectedConfigChannel+0xe4>
  __HAL_LOCK(hadc);
 80035c6:	2002      	movs	r0, #2
}
 80035c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035ca:	bf00      	nop
 80035cc:	000f0001 	.word	0x000f0001
 80035d0:	40012000 	.word	0x40012000
 80035d4:	40012300 	.word	0x40012300

080035d8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035d8:	4907      	ldr	r1, [pc, #28]	; (80035f8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80035da:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035dc:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035de:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035e2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035e6:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035e8:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035ea:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80035f2:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	e000ed00 	.word	0xe000ed00

080035fc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035fc:	4b1c      	ldr	r3, [pc, #112]	; (8003670 <HAL_NVIC_SetPriority+0x74>)
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003604:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003606:	f1c3 0e07 	rsb	lr, r3, #7
 800360a:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800360e:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003612:	bf28      	it	cs
 8003614:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003618:	f1bc 0f06 	cmp.w	ip, #6
 800361c:	d91b      	bls.n	8003656 <HAL_NVIC_SetPriority+0x5a>
 800361e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003620:	f04f 3cff 	mov.w	ip, #4294967295
 8003624:	fa0c fc03 	lsl.w	ip, ip, r3
 8003628:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800362c:	f04f 3cff 	mov.w	ip, #4294967295
 8003630:	fa0c fc0e 	lsl.w	ip, ip, lr
 8003634:	ea21 010c 	bic.w	r1, r1, ip
 8003638:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800363a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800363c:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8003640:	db0c      	blt.n	800365c <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003642:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003646:	0109      	lsls	r1, r1, #4
 8003648:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800364c:	b2c9      	uxtb	r1, r1
 800364e:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003652:	f85d fb04 	ldr.w	pc, [sp], #4
 8003656:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003658:	4613      	mov	r3, r2
 800365a:	e7e7      	b.n	800362c <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800365c:	4b05      	ldr	r3, [pc, #20]	; (8003674 <HAL_NVIC_SetPriority+0x78>)
 800365e:	f000 000f 	and.w	r0, r0, #15
 8003662:	0109      	lsls	r1, r1, #4
 8003664:	4403      	add	r3, r0
 8003666:	b2c9      	uxtb	r1, r1
 8003668:	7619      	strb	r1, [r3, #24]
 800366a:	f85d fb04 	ldr.w	pc, [sp], #4
 800366e:	bf00      	nop
 8003670:	e000ed00 	.word	0xe000ed00
 8003674:	e000ecfc 	.word	0xe000ecfc

08003678 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003678:	2800      	cmp	r0, #0
 800367a:	db08      	blt.n	800368e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800367c:	0941      	lsrs	r1, r0, #5
 800367e:	4a04      	ldr	r2, [pc, #16]	; (8003690 <HAL_NVIC_EnableIRQ+0x18>)
 8003680:	f000 001f 	and.w	r0, r0, #31
 8003684:	2301      	movs	r3, #1
 8003686:	fa03 f000 	lsl.w	r0, r3, r0
 800368a:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800368e:	4770      	bx	lr
 8003690:	e000e100 	.word	0xe000e100

08003694 <HAL_NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 8003694:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003698:	4905      	ldr	r1, [pc, #20]	; (80036b0 <HAL_NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800369a:	4b06      	ldr	r3, [pc, #24]	; (80036b4 <HAL_NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800369c:	68ca      	ldr	r2, [r1, #12]
 800369e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80036a2:	4313      	orrs	r3, r2
 80036a4:	60cb      	str	r3, [r1, #12]
 80036a6:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80036aa:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 80036ac:	e7fd      	b.n	80036aa <HAL_NVIC_SystemReset+0x16>
 80036ae:	bf00      	nop
 80036b0:	e000ed00 	.word	0xe000ed00
 80036b4:	05fa0004 	.word	0x05fa0004

080036b8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036b8:	3801      	subs	r0, #1
 80036ba:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80036be:	d210      	bcs.n	80036e2 <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036c0:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036c2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036c6:	4c08      	ldr	r4, [pc, #32]	; (80036e8 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036c8:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036ca:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 80036ce:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036d2:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036d4:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036d6:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036d8:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 80036da:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036de:	6119      	str	r1, [r3, #16]
 80036e0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80036e2:	2001      	movs	r0, #1
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	e000ed00 	.word	0xe000ed00

080036ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036f0:	2200      	movs	r2, #0
 80036f2:	680c      	ldr	r4, [r1, #0]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036f4:	4e70      	ldr	r6, [pc, #448]	; (80038b8 <HAL_GPIO_Init+0x1cc>)
{
 80036f6:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036f8:	4613      	mov	r3, r2
    ioposition = 0x01U << position;
 80036fa:	f04f 0a01 	mov.w	sl, #1
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036fe:	4689      	mov	r9, r1
 8003700:	e004      	b.n	800370c <HAL_GPIO_Init+0x20>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003702:	3301      	adds	r3, #1
 8003704:	2b10      	cmp	r3, #16
 8003706:	f102 0202 	add.w	r2, r2, #2
 800370a:	d078      	beq.n	80037fe <HAL_GPIO_Init+0x112>
    ioposition = 0x01U << position;
 800370c:	fa0a f103 	lsl.w	r1, sl, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003710:	ea01 0b04 	and.w	fp, r1, r4
    if(iocurrent == ioposition)
 8003714:	43a1      	bics	r1, r4
 8003716:	d1f4      	bne.n	8003702 <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003718:	f8d9 c004 	ldr.w	ip, [r9, #4]
 800371c:	f00c 0103 	and.w	r1, ip, #3
 8003720:	1e4d      	subs	r5, r1, #1
 8003722:	2d01      	cmp	r5, #1
 8003724:	d96e      	bls.n	8003804 <HAL_GPIO_Init+0x118>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003726:	2903      	cmp	r1, #3
 8003728:	f040 80ae 	bne.w	8003888 <HAL_GPIO_Init+0x19c>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800372c:	4091      	lsls	r1, r2
 800372e:	43cd      	mvns	r5, r1
      temp = GPIOx->MODER;
 8003730:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003732:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003734:	4329      	orrs	r1, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003736:	f41c 3f40 	tst.w	ip, #196608	; 0x30000
      GPIOx->MODER = temp;
 800373a:	6001      	str	r1, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800373c:	d0e1      	beq.n	8003702 <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800373e:	4d5f      	ldr	r5, [pc, #380]	; (80038bc <HAL_GPIO_Init+0x1d0>)
 8003740:	2100      	movs	r1, #0
 8003742:	9103      	str	r1, [sp, #12]
 8003744:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8003746:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800374a:	6469      	str	r1, [r5, #68]	; 0x44
 800374c:	6c69      	ldr	r1, [r5, #68]	; 0x44
 800374e:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8003752:	9103      	str	r1, [sp, #12]
 8003754:	9903      	ldr	r1, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8003756:	f023 0103 	bic.w	r1, r3, #3
 800375a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800375e:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003762:	f003 0703 	and.w	r7, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8003766:	f8d1 e008 	ldr.w	lr, [r1, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800376a:	00bf      	lsls	r7, r7, #2
 800376c:	250f      	movs	r5, #15
 800376e:	40bd      	lsls	r5, r7
 8003770:	ea2e 0805 	bic.w	r8, lr, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003774:	4d52      	ldr	r5, [pc, #328]	; (80038c0 <HAL_GPIO_Init+0x1d4>)
 8003776:	42a8      	cmp	r0, r5
 8003778:	d017      	beq.n	80037aa <HAL_GPIO_Init+0xbe>
 800377a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800377e:	42a8      	cmp	r0, r5
 8003780:	f000 8086 	beq.w	8003890 <HAL_GPIO_Init+0x1a4>
 8003784:	4d4f      	ldr	r5, [pc, #316]	; (80038c4 <HAL_GPIO_Init+0x1d8>)
 8003786:	42a8      	cmp	r0, r5
 8003788:	f000 8087 	beq.w	800389a <HAL_GPIO_Init+0x1ae>
 800378c:	4d4e      	ldr	r5, [pc, #312]	; (80038c8 <HAL_GPIO_Init+0x1dc>)
 800378e:	42a8      	cmp	r0, r5
 8003790:	f000 808a 	beq.w	80038a8 <HAL_GPIO_Init+0x1bc>
 8003794:	4d4d      	ldr	r5, [pc, #308]	; (80038cc <HAL_GPIO_Init+0x1e0>)
 8003796:	42a8      	cmp	r0, r5
 8003798:	bf0c      	ite	eq
 800379a:	f04f 0e04 	moveq.w	lr, #4
 800379e:	f04f 0e07 	movne.w	lr, #7
 80037a2:	fa0e f707 	lsl.w	r7, lr, r7
 80037a6:	ea48 0807 	orr.w	r8, r8, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037aa:	f8c1 8008 	str.w	r8, [r1, #8]
        temp = EXTI->RTSR;
 80037ae:	68b1      	ldr	r1, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 80037b0:	ea6f 070b 	mvn.w	r7, fp
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80037b4:	f41c 1f80 	tst.w	ip, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80037b8:	bf0c      	ite	eq
 80037ba:	4039      	andeq	r1, r7
        {
          temp |= iocurrent;
 80037bc:	ea4b 0101 	orrne.w	r1, fp, r1
        }
        EXTI->RTSR = temp;
 80037c0:	60b1      	str	r1, [r6, #8]

        temp = EXTI->FTSR;
 80037c2:	68f5      	ldr	r5, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80037c4:	f41c 1f00 	tst.w	ip, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 80037c8:	bf0c      	ite	eq
 80037ca:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80037cc:	ea4b 0505 	orrne.w	r5, fp, r5
        }
        EXTI->FTSR = temp;
 80037d0:	60f5      	str	r5, [r6, #12]

        temp = EXTI->EMR;
 80037d2:	6875      	ldr	r5, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037d4:	f41c 3f00 	tst.w	ip, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80037d8:	bf0c      	ite	eq
 80037da:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80037dc:	ea4b 0505 	orrne.w	r5, fp, r5
        }
        EXTI->EMR = temp;
 80037e0:	6075      	str	r5, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037e2:	6831      	ldr	r1, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037e4:	f41c 3f80 	tst.w	ip, #65536	; 0x10000
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037e8:	f103 0301 	add.w	r3, r3, #1
        temp &= ~((uint32_t)iocurrent);
 80037ec:	bf0c      	ite	eq
 80037ee:	4039      	andeq	r1, r7
        {
          temp |= iocurrent;
 80037f0:	ea4b 0101 	orrne.w	r1, fp, r1
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037f4:	2b10      	cmp	r3, #16
        }
        EXTI->IMR = temp;
 80037f6:	6031      	str	r1, [r6, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037f8:	f102 0202 	add.w	r2, r2, #2
 80037fc:	d186      	bne.n	800370c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80037fe:	b005      	add	sp, #20
 8003800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003804:	f8d9 500c 	ldr.w	r5, [r9, #12]
        temp = GPIOx->OSPEEDR; 
 8003808:	6887      	ldr	r7, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800380a:	fa05 f802 	lsl.w	r8, r5, r2
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800380e:	2503      	movs	r5, #3
 8003810:	fa05 fe02 	lsl.w	lr, r5, r2
 8003814:	ea27 070e 	bic.w	r7, r7, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003818:	ea48 0707 	orr.w	r7, r8, r7
        GPIOx->OSPEEDR = temp;
 800381c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800381e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003820:	ea6f 050e 	mvn.w	r5, lr
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003824:	ea27 0e0b 	bic.w	lr, r7, fp
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003828:	f3cc 1700 	ubfx	r7, ip, #4, #1
 800382c:	409f      	lsls	r7, r3
 800382e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8003832:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8003834:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003836:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800383a:	f8d9 7008 	ldr.w	r7, [r9, #8]
 800383e:	4097      	lsls	r7, r2
 8003840:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003844:	2902      	cmp	r1, #2
        GPIOx->PUPDR = temp;
 8003846:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003848:	fa01 f102 	lsl.w	r1, r1, r2
 800384c:	f47f af70 	bne.w	8003730 <HAL_GPIO_Init+0x44>
        temp = GPIOx->AFR[position >> 3U];
 8003850:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8003854:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003858:	f003 0807 	and.w	r8, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800385c:	f8de 7020 	ldr.w	r7, [lr, #32]
 8003860:	9700      	str	r7, [sp, #0]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003862:	f8d9 7010 	ldr.w	r7, [r9, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003866:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800386a:	fa07 f708 	lsl.w	r7, r7, r8
 800386e:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003870:	270f      	movs	r7, #15
 8003872:	fa07 f808 	lsl.w	r8, r7, r8
 8003876:	9f00      	ldr	r7, [sp, #0]
 8003878:	ea27 0808 	bic.w	r8, r7, r8
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800387c:	9f01      	ldr	r7, [sp, #4]
 800387e:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->AFR[position >> 3U] = temp;
 8003882:	f8ce 7020 	str.w	r7, [lr, #32]
 8003886:	e753      	b.n	8003730 <HAL_GPIO_Init+0x44>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003888:	2503      	movs	r5, #3
 800388a:	4095      	lsls	r5, r2
 800388c:	43ed      	mvns	r5, r5
 800388e:	e7d1      	b.n	8003834 <HAL_GPIO_Init+0x148>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003890:	fa0a f707 	lsl.w	r7, sl, r7
 8003894:	ea48 0807 	orr.w	r8, r8, r7
 8003898:	e787      	b.n	80037aa <HAL_GPIO_Init+0xbe>
 800389a:	f04f 0e02 	mov.w	lr, #2
 800389e:	fa0e f707 	lsl.w	r7, lr, r7
 80038a2:	ea48 0807 	orr.w	r8, r8, r7
 80038a6:	e780      	b.n	80037aa <HAL_GPIO_Init+0xbe>
 80038a8:	f04f 0e03 	mov.w	lr, #3
 80038ac:	fa0e f707 	lsl.w	r7, lr, r7
 80038b0:	ea48 0807 	orr.w	r8, r8, r7
 80038b4:	e779      	b.n	80037aa <HAL_GPIO_Init+0xbe>
 80038b6:	bf00      	nop
 80038b8:	40013c00 	.word	0x40013c00
 80038bc:	40023800 	.word	0x40023800
 80038c0:	40020000 	.word	0x40020000
 80038c4:	40020800 	.word	0x40020800
 80038c8:	40020c00 	.word	0x40020c00
 80038cc:	40021000 	.word	0x40021000

080038d0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038d0:	b902      	cbnz	r2, 80038d4 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80038d2:	0409      	lsls	r1, r1, #16
 80038d4:	6181      	str	r1, [r0, #24]
  }
}
 80038d6:	4770      	bx	lr

080038d8 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80038d8:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80038da:	ea01 0203 	and.w	r2, r1, r3
 80038de:	ea21 0103 	bic.w	r1, r1, r3
 80038e2:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80038e6:	6181      	str	r1, [r0, #24]
}
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop

080038ec <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80038ec:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  
  /* Select the regulator state in Stop mode: Set PDDS and LPDS bits according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
 80038ee:	4c0d      	ldr	r4, [pc, #52]	; (8003924 <HAL_PWR_EnterSTOPMode+0x38>)
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80038f0:	4a0d      	ldr	r2, [pc, #52]	; (8003928 <HAL_PWR_EnterSTOPMode+0x3c>)
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
 80038f2:	6823      	ldr	r3, [r4, #0]
 80038f4:	f023 0303 	bic.w	r3, r3, #3
 80038f8:	4318      	orrs	r0, r3
 80038fa:	6020      	str	r0, [r4, #0]
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80038fc:	6913      	ldr	r3, [r2, #16]
  
  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80038fe:	2901      	cmp	r1, #1
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003900:	f043 0304 	orr.w	r3, r3, #4
 8003904:	6113      	str	r3, [r2, #16]
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8003906:	d00a      	beq.n	800391e <HAL_PWR_EnterSTOPMode+0x32>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8003908:	bf40      	sev
    __WFE();
 800390a:	bf20      	wfe
    __WFE();
 800390c:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
 800390e:	4a06      	ldr	r2, [pc, #24]	; (8003928 <HAL_PWR_EnterSTOPMode+0x3c>)
}
 8003910:	f85d 4b04 	ldr.w	r4, [sp], #4
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
 8003914:	6913      	ldr	r3, [r2, #16]
 8003916:	f023 0304 	bic.w	r3, r3, #4
 800391a:	6113      	str	r3, [r2, #16]
}
 800391c:	4770      	bx	lr
    __WFI();
 800391e:	bf30      	wfi
 8003920:	e7f5      	b.n	800390e <HAL_PWR_EnterSTOPMode+0x22>
 8003922:	bf00      	nop
 8003924:	40007000 	.word	0x40007000
 8003928:	e000ed00 	.word	0xe000ed00

0800392c <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800392c:	2800      	cmp	r0, #0
 800392e:	f000 81a2 	beq.w	8003c76 <HAL_RCC_OscConfig+0x34a>
{
 8003932:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003936:	6803      	ldr	r3, [r0, #0]
 8003938:	07dd      	lsls	r5, r3, #31
{
 800393a:	b082      	sub	sp, #8
 800393c:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800393e:	d52f      	bpl.n	80039a0 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003940:	499e      	ldr	r1, [pc, #632]	; (8003bbc <HAL_RCC_OscConfig+0x290>)
 8003942:	688a      	ldr	r2, [r1, #8]
 8003944:	f002 020c 	and.w	r2, r2, #12
 8003948:	2a04      	cmp	r2, #4
 800394a:	f000 80ed 	beq.w	8003b28 <HAL_RCC_OscConfig+0x1fc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800394e:	688a      	ldr	r2, [r1, #8]
 8003950:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003954:	2a08      	cmp	r2, #8
 8003956:	f000 80e3 	beq.w	8003b20 <HAL_RCC_OscConfig+0x1f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800395a:	6863      	ldr	r3, [r4, #4]
 800395c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003960:	f000 80ec 	beq.w	8003b3c <HAL_RCC_OscConfig+0x210>
 8003964:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003968:	f000 8175 	beq.w	8003c56 <HAL_RCC_OscConfig+0x32a>
 800396c:	4d93      	ldr	r5, [pc, #588]	; (8003bbc <HAL_RCC_OscConfig+0x290>)
 800396e:	682a      	ldr	r2, [r5, #0]
 8003970:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003974:	602a      	str	r2, [r5, #0]
 8003976:	682a      	ldr	r2, [r5, #0]
 8003978:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800397c:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800397e:	2b00      	cmp	r3, #0
 8003980:	f040 80e1 	bne.w	8003b46 <HAL_RCC_OscConfig+0x21a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003984:	f7ff fbdc 	bl	8003140 <HAL_GetTick>
 8003988:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800398a:	e005      	b.n	8003998 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800398c:	f7ff fbd8 	bl	8003140 <HAL_GetTick>
 8003990:	1b80      	subs	r0, r0, r6
 8003992:	2864      	cmp	r0, #100	; 0x64
 8003994:	f200 8101 	bhi.w	8003b9a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003998:	682b      	ldr	r3, [r5, #0]
 800399a:	039b      	lsls	r3, r3, #14
 800399c:	d4f6      	bmi.n	800398c <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800399e:	6823      	ldr	r3, [r4, #0]
 80039a0:	079f      	lsls	r7, r3, #30
 80039a2:	d528      	bpl.n	80039f6 <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039a4:	4a85      	ldr	r2, [pc, #532]	; (8003bbc <HAL_RCC_OscConfig+0x290>)
 80039a6:	6891      	ldr	r1, [r2, #8]
 80039a8:	f011 0f0c 	tst.w	r1, #12
 80039ac:	f000 8090 	beq.w	8003ad0 <HAL_RCC_OscConfig+0x1a4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039b0:	6891      	ldr	r1, [r2, #8]
 80039b2:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039b6:	2908      	cmp	r1, #8
 80039b8:	f000 8086 	beq.w	8003ac8 <HAL_RCC_OscConfig+0x19c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80039bc:	68e3      	ldr	r3, [r4, #12]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	f000 810e 	beq.w	8003be0 <HAL_RCC_OscConfig+0x2b4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039c4:	4b7e      	ldr	r3, [pc, #504]	; (8003bc0 <HAL_RCC_OscConfig+0x294>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039c6:	4e7d      	ldr	r6, [pc, #500]	; (8003bbc <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_ENABLE();
 80039c8:	2201      	movs	r2, #1
 80039ca:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80039cc:	f7ff fbb8 	bl	8003140 <HAL_GetTick>
 80039d0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039d2:	e005      	b.n	80039e0 <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039d4:	f7ff fbb4 	bl	8003140 <HAL_GetTick>
 80039d8:	1b40      	subs	r0, r0, r5
 80039da:	2802      	cmp	r0, #2
 80039dc:	f200 80dd 	bhi.w	8003b9a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039e0:	6833      	ldr	r3, [r6, #0]
 80039e2:	0798      	lsls	r0, r3, #30
 80039e4:	d5f6      	bpl.n	80039d4 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039e6:	6833      	ldr	r3, [r6, #0]
 80039e8:	6922      	ldr	r2, [r4, #16]
 80039ea:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80039ee:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80039f2:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039f4:	6823      	ldr	r3, [r4, #0]
 80039f6:	071a      	lsls	r2, r3, #28
 80039f8:	d451      	bmi.n	8003a9e <HAL_RCC_OscConfig+0x172>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039fa:	0758      	lsls	r0, r3, #29
 80039fc:	d52f      	bpl.n	8003a5e <HAL_RCC_OscConfig+0x132>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039fe:	4a6f      	ldr	r2, [pc, #444]	; (8003bbc <HAL_RCC_OscConfig+0x290>)
 8003a00:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003a02:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8003a06:	d07f      	beq.n	8003b08 <HAL_RCC_OscConfig+0x1dc>
    FlagStatus       pwrclkchanged = RESET;
 8003a08:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a0a:	4e6e      	ldr	r6, [pc, #440]	; (8003bc4 <HAL_RCC_OscConfig+0x298>)
 8003a0c:	6833      	ldr	r3, [r6, #0]
 8003a0e:	05d9      	lsls	r1, r3, #23
 8003a10:	f140 80b3 	bpl.w	8003b7a <HAL_RCC_OscConfig+0x24e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a14:	68a3      	ldr	r3, [r4, #8]
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	f000 80c3 	beq.w	8003ba2 <HAL_RCC_OscConfig+0x276>
 8003a1c:	2b05      	cmp	r3, #5
 8003a1e:	f000 812c 	beq.w	8003c7a <HAL_RCC_OscConfig+0x34e>
 8003a22:	4e66      	ldr	r6, [pc, #408]	; (8003bbc <HAL_RCC_OscConfig+0x290>)
 8003a24:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8003a26:	f022 0201 	bic.w	r2, r2, #1
 8003a2a:	6732      	str	r2, [r6, #112]	; 0x70
 8003a2c:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8003a2e:	f022 0204 	bic.w	r2, r2, #4
 8003a32:	6732      	str	r2, [r6, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	f040 80b9 	bne.w	8003bac <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a3a:	f7ff fb81 	bl	8003140 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a3e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003a42:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a44:	e005      	b.n	8003a52 <HAL_RCC_OscConfig+0x126>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a46:	f7ff fb7b 	bl	8003140 <HAL_GetTick>
 8003a4a:	1bc0      	subs	r0, r0, r7
 8003a4c:	4540      	cmp	r0, r8
 8003a4e:	f200 80a4 	bhi.w	8003b9a <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a52:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8003a54:	0798      	lsls	r0, r3, #30
 8003a56:	d4f6      	bmi.n	8003a46 <HAL_RCC_OscConfig+0x11a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a58:	2d00      	cmp	r5, #0
 8003a5a:	f040 8106 	bne.w	8003c6a <HAL_RCC_OscConfig+0x33e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a5e:	69a0      	ldr	r0, [r4, #24]
 8003a60:	b1c8      	cbz	r0, 8003a96 <HAL_RCC_OscConfig+0x16a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a62:	4d56      	ldr	r5, [pc, #344]	; (8003bbc <HAL_RCC_OscConfig+0x290>)
 8003a64:	68ab      	ldr	r3, [r5, #8]
 8003a66:	f003 030c 	and.w	r3, r3, #12
 8003a6a:	2b08      	cmp	r3, #8
 8003a6c:	f000 80c9 	beq.w	8003c02 <HAL_RCC_OscConfig+0x2d6>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a70:	4b53      	ldr	r3, [pc, #332]	; (8003bc0 <HAL_RCC_OscConfig+0x294>)
 8003a72:	2200      	movs	r2, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a74:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8003a76:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a78:	f000 8109 	beq.w	8003c8e <HAL_RCC_OscConfig+0x362>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a7c:	f7ff fb60 	bl	8003140 <HAL_GetTick>
 8003a80:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a82:	e005      	b.n	8003a90 <HAL_RCC_OscConfig+0x164>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a84:	f7ff fb5c 	bl	8003140 <HAL_GetTick>
 8003a88:	1b00      	subs	r0, r0, r4
 8003a8a:	2802      	cmp	r0, #2
 8003a8c:	f200 8085 	bhi.w	8003b9a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a90:	682b      	ldr	r3, [r5, #0]
 8003a92:	019b      	lsls	r3, r3, #6
 8003a94:	d4f6      	bmi.n	8003a84 <HAL_RCC_OscConfig+0x158>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8003a96:	2000      	movs	r0, #0
}
 8003a98:	b002      	add	sp, #8
 8003a9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a9e:	6963      	ldr	r3, [r4, #20]
 8003aa0:	b30b      	cbz	r3, 8003ae6 <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_LSI_ENABLE();
 8003aa2:	4b47      	ldr	r3, [pc, #284]	; (8003bc0 <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aa4:	4e45      	ldr	r6, [pc, #276]	; (8003bbc <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_ENABLE();
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8003aac:	f7ff fb48 	bl	8003140 <HAL_GetTick>
 8003ab0:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ab2:	e004      	b.n	8003abe <HAL_RCC_OscConfig+0x192>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ab4:	f7ff fb44 	bl	8003140 <HAL_GetTick>
 8003ab8:	1b40      	subs	r0, r0, r5
 8003aba:	2802      	cmp	r0, #2
 8003abc:	d86d      	bhi.n	8003b9a <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003abe:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8003ac0:	079b      	lsls	r3, r3, #30
 8003ac2:	d5f7      	bpl.n	8003ab4 <HAL_RCC_OscConfig+0x188>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ac4:	6823      	ldr	r3, [r4, #0]
 8003ac6:	e798      	b.n	80039fa <HAL_RCC_OscConfig+0xce>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ac8:	6852      	ldr	r2, [r2, #4]
 8003aca:	0256      	lsls	r6, r2, #9
 8003acc:	f53f af76 	bmi.w	80039bc <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ad0:	4a3a      	ldr	r2, [pc, #232]	; (8003bbc <HAL_RCC_OscConfig+0x290>)
 8003ad2:	6812      	ldr	r2, [r2, #0]
 8003ad4:	0795      	lsls	r5, r2, #30
 8003ad6:	d544      	bpl.n	8003b62 <HAL_RCC_OscConfig+0x236>
 8003ad8:	68e2      	ldr	r2, [r4, #12]
 8003ada:	2a01      	cmp	r2, #1
 8003adc:	d041      	beq.n	8003b62 <HAL_RCC_OscConfig+0x236>
        return HAL_ERROR;
 8003ade:	2001      	movs	r0, #1
}
 8003ae0:	b002      	add	sp, #8
 8003ae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8003ae6:	4a36      	ldr	r2, [pc, #216]	; (8003bc0 <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ae8:	4e34      	ldr	r6, [pc, #208]	; (8003bbc <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_DISABLE();
 8003aea:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8003aee:	f7ff fb27 	bl	8003140 <HAL_GetTick>
 8003af2:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003af4:	e004      	b.n	8003b00 <HAL_RCC_OscConfig+0x1d4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003af6:	f7ff fb23 	bl	8003140 <HAL_GetTick>
 8003afa:	1b40      	subs	r0, r0, r5
 8003afc:	2802      	cmp	r0, #2
 8003afe:	d84c      	bhi.n	8003b9a <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b00:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8003b02:	079f      	lsls	r7, r3, #30
 8003b04:	d4f7      	bmi.n	8003af6 <HAL_RCC_OscConfig+0x1ca>
 8003b06:	e7dd      	b.n	8003ac4 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b08:	9301      	str	r3, [sp, #4]
 8003b0a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003b0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b10:	6413      	str	r3, [r2, #64]	; 0x40
 8003b12:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003b14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b18:	9301      	str	r3, [sp, #4]
 8003b1a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003b1c:	2501      	movs	r5, #1
 8003b1e:	e774      	b.n	8003a0a <HAL_RCC_OscConfig+0xde>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b20:	684a      	ldr	r2, [r1, #4]
 8003b22:	0250      	lsls	r0, r2, #9
 8003b24:	f57f af19 	bpl.w	800395a <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b28:	4a24      	ldr	r2, [pc, #144]	; (8003bbc <HAL_RCC_OscConfig+0x290>)
 8003b2a:	6812      	ldr	r2, [r2, #0]
 8003b2c:	0391      	lsls	r1, r2, #14
 8003b2e:	f57f af37 	bpl.w	80039a0 <HAL_RCC_OscConfig+0x74>
 8003b32:	6862      	ldr	r2, [r4, #4]
 8003b34:	2a00      	cmp	r2, #0
 8003b36:	f47f af33 	bne.w	80039a0 <HAL_RCC_OscConfig+0x74>
 8003b3a:	e7d0      	b.n	8003ade <HAL_RCC_OscConfig+0x1b2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b3c:	4a1f      	ldr	r2, [pc, #124]	; (8003bbc <HAL_RCC_OscConfig+0x290>)
 8003b3e:	6813      	ldr	r3, [r2, #0]
 8003b40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b44:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003b46:	f7ff fafb 	bl	8003140 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b4a:	4e1c      	ldr	r6, [pc, #112]	; (8003bbc <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 8003b4c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b4e:	e004      	b.n	8003b5a <HAL_RCC_OscConfig+0x22e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b50:	f7ff faf6 	bl	8003140 <HAL_GetTick>
 8003b54:	1b40      	subs	r0, r0, r5
 8003b56:	2864      	cmp	r0, #100	; 0x64
 8003b58:	d81f      	bhi.n	8003b9a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b5a:	6833      	ldr	r3, [r6, #0]
 8003b5c:	039a      	lsls	r2, r3, #14
 8003b5e:	d5f7      	bpl.n	8003b50 <HAL_RCC_OscConfig+0x224>
 8003b60:	e71d      	b.n	800399e <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b62:	4916      	ldr	r1, [pc, #88]	; (8003bbc <HAL_RCC_OscConfig+0x290>)
 8003b64:	6920      	ldr	r0, [r4, #16]
 8003b66:	680a      	ldr	r2, [r1, #0]
 8003b68:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8003b6c:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8003b70:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b72:	071a      	lsls	r2, r3, #28
 8003b74:	f57f af41 	bpl.w	80039fa <HAL_RCC_OscConfig+0xce>
 8003b78:	e791      	b.n	8003a9e <HAL_RCC_OscConfig+0x172>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b7a:	6833      	ldr	r3, [r6, #0]
 8003b7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b80:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003b82:	f7ff fadd 	bl	8003140 <HAL_GetTick>
 8003b86:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b88:	6833      	ldr	r3, [r6, #0]
 8003b8a:	05da      	lsls	r2, r3, #23
 8003b8c:	f53f af42 	bmi.w	8003a14 <HAL_RCC_OscConfig+0xe8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b90:	f7ff fad6 	bl	8003140 <HAL_GetTick>
 8003b94:	1bc0      	subs	r0, r0, r7
 8003b96:	2802      	cmp	r0, #2
 8003b98:	d9f6      	bls.n	8003b88 <HAL_RCC_OscConfig+0x25c>
            return HAL_TIMEOUT;
 8003b9a:	2003      	movs	r0, #3
}
 8003b9c:	b002      	add	sp, #8
 8003b9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ba2:	4a06      	ldr	r2, [pc, #24]	; (8003bbc <HAL_RCC_OscConfig+0x290>)
 8003ba4:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8003ba6:	f043 0301 	orr.w	r3, r3, #1
 8003baa:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8003bac:	f7ff fac8 	bl	8003140 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bb0:	4f02      	ldr	r7, [pc, #8]	; (8003bbc <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 8003bb2:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bb4:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bb8:	e00b      	b.n	8003bd2 <HAL_RCC_OscConfig+0x2a6>
 8003bba:	bf00      	nop
 8003bbc:	40023800 	.word	0x40023800
 8003bc0:	42470000 	.word	0x42470000
 8003bc4:	40007000 	.word	0x40007000
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bc8:	f7ff faba 	bl	8003140 <HAL_GetTick>
 8003bcc:	1b80      	subs	r0, r0, r6
 8003bce:	4540      	cmp	r0, r8
 8003bd0:	d8e3      	bhi.n	8003b9a <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bd2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003bd4:	079b      	lsls	r3, r3, #30
 8003bd6:	d5f7      	bpl.n	8003bc8 <HAL_RCC_OscConfig+0x29c>
    if(pwrclkchanged == SET)
 8003bd8:	2d00      	cmp	r5, #0
 8003bda:	f43f af40 	beq.w	8003a5e <HAL_RCC_OscConfig+0x132>
 8003bde:	e044      	b.n	8003c6a <HAL_RCC_OscConfig+0x33e>
        __HAL_RCC_HSI_DISABLE();
 8003be0:	4a42      	ldr	r2, [pc, #264]	; (8003cec <HAL_RCC_OscConfig+0x3c0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003be2:	4e43      	ldr	r6, [pc, #268]	; (8003cf0 <HAL_RCC_OscConfig+0x3c4>)
        __HAL_RCC_HSI_DISABLE();
 8003be4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003be6:	f7ff faab 	bl	8003140 <HAL_GetTick>
 8003bea:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bec:	e004      	b.n	8003bf8 <HAL_RCC_OscConfig+0x2cc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bee:	f7ff faa7 	bl	8003140 <HAL_GetTick>
 8003bf2:	1b40      	subs	r0, r0, r5
 8003bf4:	2802      	cmp	r0, #2
 8003bf6:	d8d0      	bhi.n	8003b9a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bf8:	6833      	ldr	r3, [r6, #0]
 8003bfa:	0799      	lsls	r1, r3, #30
 8003bfc:	d4f7      	bmi.n	8003bee <HAL_RCC_OscConfig+0x2c2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bfe:	6823      	ldr	r3, [r4, #0]
 8003c00:	e6f9      	b.n	80039f6 <HAL_RCC_OscConfig+0xca>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c02:	2801      	cmp	r0, #1
 8003c04:	f43f af48 	beq.w	8003a98 <HAL_RCC_OscConfig+0x16c>
        pll_config = RCC->PLLCFGR;
 8003c08:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c0a:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c0c:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c10:	4291      	cmp	r1, r2
 8003c12:	f47f af64 	bne.w	8003ade <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c16:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c18:	f003 013f 	and.w	r1, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c1c:	4291      	cmp	r1, r2
 8003c1e:	f47f af5e 	bne.w	8003ade <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c22:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003c24:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8003c28:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c2a:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8003c2e:	f47f af56 	bne.w	8003ade <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c32:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003c34:	0852      	lsrs	r2, r2, #1
 8003c36:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8003c3a:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c3c:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8003c40:	f47f af4d 	bne.w	8003ade <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c44:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003c46:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c4a:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
            return HAL_TIMEOUT;
 8003c4e:	bf14      	ite	ne
 8003c50:	2001      	movne	r0, #1
 8003c52:	2000      	moveq	r0, #0
 8003c54:	e720      	b.n	8003a98 <HAL_RCC_OscConfig+0x16c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c56:	4b26      	ldr	r3, [pc, #152]	; (8003cf0 <HAL_RCC_OscConfig+0x3c4>)
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003c5e:	601a      	str	r2, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003c66:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c68:	e76d      	b.n	8003b46 <HAL_RCC_OscConfig+0x21a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c6a:	4a21      	ldr	r2, [pc, #132]	; (8003cf0 <HAL_RCC_OscConfig+0x3c4>)
 8003c6c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003c6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c72:	6413      	str	r3, [r2, #64]	; 0x40
 8003c74:	e6f3      	b.n	8003a5e <HAL_RCC_OscConfig+0x132>
    return HAL_ERROR;
 8003c76:	2001      	movs	r0, #1
}
 8003c78:	4770      	bx	lr
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c7a:	4b1d      	ldr	r3, [pc, #116]	; (8003cf0 <HAL_RCC_OscConfig+0x3c4>)
 8003c7c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c7e:	f042 0204 	orr.w	r2, r2, #4
 8003c82:	671a      	str	r2, [r3, #112]	; 0x70
 8003c84:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c86:	f042 0201 	orr.w	r2, r2, #1
 8003c8a:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c8c:	e78e      	b.n	8003bac <HAL_RCC_OscConfig+0x280>
        tickstart = HAL_GetTick();
 8003c8e:	f7ff fa57 	bl	8003140 <HAL_GetTick>
 8003c92:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c94:	e005      	b.n	8003ca2 <HAL_RCC_OscConfig+0x376>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c96:	f7ff fa53 	bl	8003140 <HAL_GetTick>
 8003c9a:	1b80      	subs	r0, r0, r6
 8003c9c:	2802      	cmp	r0, #2
 8003c9e:	f63f af7c 	bhi.w	8003b9a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ca2:	682b      	ldr	r3, [r5, #0]
 8003ca4:	0199      	lsls	r1, r3, #6
 8003ca6:	d4f6      	bmi.n	8003c96 <HAL_RCC_OscConfig+0x36a>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ca8:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8003cac:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003cae:	430b      	orrs	r3, r1
 8003cb0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003cb4:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
 8003cb8:	0852      	lsrs	r2, r2, #1
 8003cba:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003cbe:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8003cc0:	490a      	ldr	r1, [pc, #40]	; (8003cec <HAL_RCC_OscConfig+0x3c0>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003cc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8003cc6:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003cc8:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003cca:	660a      	str	r2, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 8003ccc:	f7ff fa38 	bl	8003140 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cd0:	4d07      	ldr	r5, [pc, #28]	; (8003cf0 <HAL_RCC_OscConfig+0x3c4>)
        tickstart = HAL_GetTick();
 8003cd2:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cd4:	e005      	b.n	8003ce2 <HAL_RCC_OscConfig+0x3b6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cd6:	f7ff fa33 	bl	8003140 <HAL_GetTick>
 8003cda:	1b00      	subs	r0, r0, r4
 8003cdc:	2802      	cmp	r0, #2
 8003cde:	f63f af5c 	bhi.w	8003b9a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ce2:	682b      	ldr	r3, [r5, #0]
 8003ce4:	019a      	lsls	r2, r3, #6
 8003ce6:	d5f6      	bpl.n	8003cd6 <HAL_RCC_OscConfig+0x3aa>
 8003ce8:	e6d5      	b.n	8003a96 <HAL_RCC_OscConfig+0x16a>
 8003cea:	bf00      	nop
 8003cec:	42470000 	.word	0x42470000
 8003cf0:	40023800 	.word	0x40023800

08003cf4 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8003cf4:	4b01      	ldr	r3, [pc, #4]	; (8003cfc <HAL_RCC_EnableCSS+0x8>)
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8003cfa:	4770      	bx	lr
 8003cfc:	42470000 	.word	0x42470000

08003d00 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d00:	4916      	ldr	r1, [pc, #88]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x5c>)
{
 8003d02:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d04:	688b      	ldr	r3, [r1, #8]
 8003d06:	f003 030c 	and.w	r3, r3, #12
 8003d0a:	2b04      	cmp	r3, #4
 8003d0c:	d01b      	beq.n	8003d46 <HAL_RCC_GetSysClockFreq+0x46>
 8003d0e:	2b08      	cmp	r3, #8
 8003d10:	d117      	bne.n	8003d42 <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d12:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d14:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d16:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d18:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d1c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d20:	d113      	bne.n	8003d4a <HAL_RCC_GetSysClockFreq+0x4a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d22:	480f      	ldr	r0, [pc, #60]	; (8003d60 <HAL_RCC_GetSysClockFreq+0x60>)
 8003d24:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8003d28:	fba1 0100 	umull	r0, r1, r1, r0
 8003d2c:	f7fc fa58 	bl	80001e0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d30:	4b0a      	ldr	r3, [pc, #40]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x5c>)
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8003d38:	3301      	adds	r3, #1
 8003d3a:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8003d3c:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003d40:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8003d42:	4807      	ldr	r0, [pc, #28]	; (8003d60 <HAL_RCC_GetSysClockFreq+0x60>)
}
 8003d44:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d46:	4807      	ldr	r0, [pc, #28]	; (8003d64 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8003d48:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d4a:	4806      	ldr	r0, [pc, #24]	; (8003d64 <HAL_RCC_GetSysClockFreq+0x64>)
 8003d4c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8003d50:	2300      	movs	r3, #0
 8003d52:	fba1 0100 	umull	r0, r1, r1, r0
 8003d56:	f7fc fa43 	bl	80001e0 <__aeabi_uldivmod>
 8003d5a:	e7e9      	b.n	8003d30 <HAL_RCC_GetSysClockFreq+0x30>
 8003d5c:	40023800 	.word	0x40023800
 8003d60:	00f42400 	.word	0x00f42400
 8003d64:	007a1200 	.word	0x007a1200

08003d68 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8003d68:	2800      	cmp	r0, #0
 8003d6a:	f000 8087 	beq.w	8003e7c <HAL_RCC_ClockConfig+0x114>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d6e:	4a48      	ldr	r2, [pc, #288]	; (8003e90 <HAL_RCC_ClockConfig+0x128>)
 8003d70:	6813      	ldr	r3, [r2, #0]
 8003d72:	f003 0307 	and.w	r3, r3, #7
 8003d76:	428b      	cmp	r3, r1
{
 8003d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d7c:	460d      	mov	r5, r1
 8003d7e:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d80:	d209      	bcs.n	8003d96 <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d82:	b2cb      	uxtb	r3, r1
 8003d84:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d86:	6813      	ldr	r3, [r2, #0]
 8003d88:	f003 0307 	and.w	r3, r3, #7
 8003d8c:	428b      	cmp	r3, r1
 8003d8e:	d002      	beq.n	8003d96 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8003d90:	2001      	movs	r0, #1
}
 8003d92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d96:	6823      	ldr	r3, [r4, #0]
 8003d98:	0798      	lsls	r0, r3, #30
 8003d9a:	d514      	bpl.n	8003dc6 <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d9c:	0759      	lsls	r1, r3, #29
 8003d9e:	d504      	bpl.n	8003daa <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003da0:	493c      	ldr	r1, [pc, #240]	; (8003e94 <HAL_RCC_ClockConfig+0x12c>)
 8003da2:	688a      	ldr	r2, [r1, #8]
 8003da4:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8003da8:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003daa:	071a      	lsls	r2, r3, #28
 8003dac:	d504      	bpl.n	8003db8 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003dae:	4939      	ldr	r1, [pc, #228]	; (8003e94 <HAL_RCC_ClockConfig+0x12c>)
 8003db0:	688a      	ldr	r2, [r1, #8]
 8003db2:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8003db6:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003db8:	4936      	ldr	r1, [pc, #216]	; (8003e94 <HAL_RCC_ClockConfig+0x12c>)
 8003dba:	68a0      	ldr	r0, [r4, #8]
 8003dbc:	688a      	ldr	r2, [r1, #8]
 8003dbe:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003dc2:	4302      	orrs	r2, r0
 8003dc4:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dc6:	07df      	lsls	r7, r3, #31
 8003dc8:	d521      	bpl.n	8003e0e <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dca:	6862      	ldr	r2, [r4, #4]
 8003dcc:	2a01      	cmp	r2, #1
 8003dce:	d057      	beq.n	8003e80 <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dd0:	1e93      	subs	r3, r2, #2
 8003dd2:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dd4:	4b2f      	ldr	r3, [pc, #188]	; (8003e94 <HAL_RCC_ClockConfig+0x12c>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dd8:	d94d      	bls.n	8003e76 <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dda:	0799      	lsls	r1, r3, #30
 8003ddc:	d5d8      	bpl.n	8003d90 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dde:	4e2d      	ldr	r6, [pc, #180]	; (8003e94 <HAL_RCC_ClockConfig+0x12c>)
 8003de0:	68b3      	ldr	r3, [r6, #8]
 8003de2:	f023 0303 	bic.w	r3, r3, #3
 8003de6:	4313      	orrs	r3, r2
 8003de8:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8003dea:	f7ff f9a9 	bl	8003140 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dee:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8003df2:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003df4:	e004      	b.n	8003e00 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003df6:	f7ff f9a3 	bl	8003140 <HAL_GetTick>
 8003dfa:	1bc0      	subs	r0, r0, r7
 8003dfc:	4540      	cmp	r0, r8
 8003dfe:	d844      	bhi.n	8003e8a <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e00:	68b3      	ldr	r3, [r6, #8]
 8003e02:	6862      	ldr	r2, [r4, #4]
 8003e04:	f003 030c 	and.w	r3, r3, #12
 8003e08:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003e0c:	d1f3      	bne.n	8003df6 <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e0e:	4a20      	ldr	r2, [pc, #128]	; (8003e90 <HAL_RCC_ClockConfig+0x128>)
 8003e10:	6813      	ldr	r3, [r2, #0]
 8003e12:	f003 0307 	and.w	r3, r3, #7
 8003e16:	42ab      	cmp	r3, r5
 8003e18:	d906      	bls.n	8003e28 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e1a:	b2eb      	uxtb	r3, r5
 8003e1c:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e1e:	6813      	ldr	r3, [r2, #0]
 8003e20:	f003 0307 	and.w	r3, r3, #7
 8003e24:	42ab      	cmp	r3, r5
 8003e26:	d1b3      	bne.n	8003d90 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e28:	6823      	ldr	r3, [r4, #0]
 8003e2a:	075a      	lsls	r2, r3, #29
 8003e2c:	d506      	bpl.n	8003e3c <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e2e:	4919      	ldr	r1, [pc, #100]	; (8003e94 <HAL_RCC_ClockConfig+0x12c>)
 8003e30:	68e0      	ldr	r0, [r4, #12]
 8003e32:	688a      	ldr	r2, [r1, #8]
 8003e34:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8003e38:	4302      	orrs	r2, r0
 8003e3a:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e3c:	071b      	lsls	r3, r3, #28
 8003e3e:	d507      	bpl.n	8003e50 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e40:	4a14      	ldr	r2, [pc, #80]	; (8003e94 <HAL_RCC_ClockConfig+0x12c>)
 8003e42:	6921      	ldr	r1, [r4, #16]
 8003e44:	6893      	ldr	r3, [r2, #8]
 8003e46:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003e4a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003e4e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e50:	f7ff ff56 	bl	8003d00 <HAL_RCC_GetSysClockFreq>
 8003e54:	4a0f      	ldr	r2, [pc, #60]	; (8003e94 <HAL_RCC_ClockConfig+0x12c>)
 8003e56:	4c10      	ldr	r4, [pc, #64]	; (8003e98 <HAL_RCC_ClockConfig+0x130>)
 8003e58:	6892      	ldr	r2, [r2, #8]
 8003e5a:	4910      	ldr	r1, [pc, #64]	; (8003e9c <HAL_RCC_ClockConfig+0x134>)
 8003e5c:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8003e60:	4603      	mov	r3, r0
 8003e62:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 8003e64:	480e      	ldr	r0, [pc, #56]	; (8003ea0 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e66:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 8003e68:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e6a:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 8003e6c:	f7fe fc20 	bl	80026b0 <HAL_InitTick>
  return HAL_OK;
 8003e70:	2000      	movs	r0, #0
}
 8003e72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e76:	0198      	lsls	r0, r3, #6
 8003e78:	d4b1      	bmi.n	8003dde <HAL_RCC_ClockConfig+0x76>
 8003e7a:	e789      	b.n	8003d90 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8003e7c:	2001      	movs	r0, #1
}
 8003e7e:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e80:	4b04      	ldr	r3, [pc, #16]	; (8003e94 <HAL_RCC_ClockConfig+0x12c>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	039e      	lsls	r6, r3, #14
 8003e86:	d4aa      	bmi.n	8003dde <HAL_RCC_ClockConfig+0x76>
 8003e88:	e782      	b.n	8003d90 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 8003e8a:	2003      	movs	r0, #3
 8003e8c:	e781      	b.n	8003d92 <HAL_RCC_ClockConfig+0x2a>
 8003e8e:	bf00      	nop
 8003e90:	40023c00 	.word	0x40023c00
 8003e94:	40023800 	.word	0x40023800
 8003e98:	0800973c 	.word	0x0800973c
 8003e9c:	20000578 	.word	0x20000578
 8003ea0:	20000580 	.word	0x20000580

08003ea4 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8003ea4:	4b01      	ldr	r3, [pc, #4]	; (8003eac <HAL_RCC_GetHCLKFreq+0x8>)
}
 8003ea6:	6818      	ldr	r0, [r3, #0]
 8003ea8:	4770      	bx	lr
 8003eaa:	bf00      	nop
 8003eac:	20000578 	.word	0x20000578

08003eb0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003eb0:	4b04      	ldr	r3, [pc, #16]	; (8003ec4 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8003eb2:	4905      	ldr	r1, [pc, #20]	; (8003ec8 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	4a05      	ldr	r2, [pc, #20]	; (8003ecc <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003eb8:	6808      	ldr	r0, [r1, #0]
 8003eba:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8003ebe:	5cd3      	ldrb	r3, [r2, r3]
}
 8003ec0:	40d8      	lsrs	r0, r3
 8003ec2:	4770      	bx	lr
 8003ec4:	40023800 	.word	0x40023800
 8003ec8:	20000578 	.word	0x20000578
 8003ecc:	0800974c 	.word	0x0800974c

08003ed0 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ed0:	4b04      	ldr	r3, [pc, #16]	; (8003ee4 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 8003ed2:	4905      	ldr	r1, [pc, #20]	; (8003ee8 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	4a05      	ldr	r2, [pc, #20]	; (8003eec <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003ed8:	6808      	ldr	r0, [r1, #0]
 8003eda:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8003ede:	5cd3      	ldrb	r3, [r2, r3]
}
 8003ee0:	40d8      	lsrs	r0, r3
 8003ee2:	4770      	bx	lr
 8003ee4:	40023800 	.word	0x40023800
 8003ee8:	20000578 	.word	0x20000578
 8003eec:	0800974c 	.word	0x0800974c

08003ef0 <HAL_RCC_GetClockConfig>:
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003ef0:	4b0e      	ldr	r3, [pc, #56]	; (8003f2c <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003ef2:	220f      	movs	r2, #15
 8003ef4:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003ef6:	689a      	ldr	r2, [r3, #8]
 8003ef8:	f002 0203 	and.w	r2, r2, #3
 8003efc:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003efe:	689a      	ldr	r2, [r3, #8]
 8003f00:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8003f04:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003f06:	689a      	ldr	r2, [r3, #8]
 8003f08:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8003f0c:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	08db      	lsrs	r3, r3, #3
{
 8003f12:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003f14:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003f18:	4c05      	ldr	r4, [pc, #20]	; (8003f30 <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003f1a:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003f1c:	6823      	ldr	r3, [r4, #0]
}
 8003f1e:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003f22:	f003 0307 	and.w	r3, r3, #7
 8003f26:	600b      	str	r3, [r1, #0]
}
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	40023800 	.word	0x40023800
 8003f30:	40023c00 	.word	0x40023c00

08003f34 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f34:	2800      	cmp	r0, #0
 8003f36:	d076      	beq.n	8004026 <HAL_TIM_Base_Init+0xf2>
{
 8003f38:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f3a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003f3e:	4604      	mov	r4, r0
 8003f40:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d055      	beq.n	8003ff4 <HAL_TIM_Base_Init+0xc0>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f48:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f4a:	4938      	ldr	r1, [pc, #224]	; (800402c <HAL_TIM_Base_Init+0xf8>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f52:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8003f54:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f56:	d052      	beq.n	8003ffe <HAL_TIM_Base_Init+0xca>
 8003f58:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8003f5c:	d021      	beq.n	8003fa2 <HAL_TIM_Base_Init+0x6e>
 8003f5e:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 8003f62:	428a      	cmp	r2, r1
 8003f64:	d01d      	beq.n	8003fa2 <HAL_TIM_Base_Init+0x6e>
 8003f66:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003f6a:	428a      	cmp	r2, r1
 8003f6c:	d019      	beq.n	8003fa2 <HAL_TIM_Base_Init+0x6e>
 8003f6e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003f72:	428a      	cmp	r2, r1
 8003f74:	d015      	beq.n	8003fa2 <HAL_TIM_Base_Init+0x6e>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f76:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 8003f7a:	428a      	cmp	r2, r1
 8003f7c:	d015      	beq.n	8003faa <HAL_TIM_Base_Init+0x76>
 8003f7e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003f82:	428a      	cmp	r2, r1
 8003f84:	d011      	beq.n	8003faa <HAL_TIM_Base_Init+0x76>
 8003f86:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003f8a:	428a      	cmp	r2, r1
 8003f8c:	d00d      	beq.n	8003faa <HAL_TIM_Base_Init+0x76>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f8e:	69a0      	ldr	r0, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f90:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f96:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8003f98:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f9a:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f9c:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003f9e:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fa0:	e010      	b.n	8003fc4 <HAL_TIM_Base_Init+0x90>
    tmpcr1 |= Structure->CounterMode;
 8003fa2:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003fa8:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003faa:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fac:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fb2:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fb8:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fba:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8003fbc:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8003fbe:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fc0:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003fc2:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fc8:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fcc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003fd0:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003fd4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003fd8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fdc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003fe0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fe4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003fe8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003fec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003ff0:	2000      	movs	r0, #0
}
 8003ff2:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003ff4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003ff8:	f7fe fa4e 	bl	8002498 <HAL_TIM_Base_MspInit>
 8003ffc:	e7a4      	b.n	8003f48 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 8003ffe:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004000:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004006:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8004008:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800400c:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800400e:	69a1      	ldr	r1, [r4, #24]
 8004010:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004014:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8004016:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004018:	68e3      	ldr	r3, [r4, #12]
 800401a:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800401c:	6863      	ldr	r3, [r4, #4]
 800401e:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8004020:	6963      	ldr	r3, [r4, #20]
 8004022:	6313      	str	r3, [r2, #48]	; 0x30
 8004024:	e7ce      	b.n	8003fc4 <HAL_TIM_Base_Init+0x90>
    return HAL_ERROR;
 8004026:	2001      	movs	r0, #1
}
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	40010000 	.word	0x40010000

08004030 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8004030:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004034:	2b01      	cmp	r3, #1
 8004036:	d127      	bne.n	8004088 <HAL_TIM_Base_Start_IT+0x58>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004038:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800403a:	4915      	ldr	r1, [pc, #84]	; (8004090 <HAL_TIM_Base_Start_IT+0x60>)
  htim->State = HAL_TIM_STATE_BUSY;
 800403c:	2202      	movs	r2, #2
 800403e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004042:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004044:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004046:	f042 0201 	orr.w	r2, r2, #1
 800404a:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800404c:	d011      	beq.n	8004072 <HAL_TIM_Base_Start_IT+0x42>
 800404e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004052:	d00e      	beq.n	8004072 <HAL_TIM_Base_Start_IT+0x42>
 8004054:	4a0f      	ldr	r2, [pc, #60]	; (8004094 <HAL_TIM_Base_Start_IT+0x64>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d00b      	beq.n	8004072 <HAL_TIM_Base_Start_IT+0x42>
 800405a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800405e:	4293      	cmp	r3, r2
 8004060:	d007      	beq.n	8004072 <HAL_TIM_Base_Start_IT+0x42>
 8004062:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004066:	4293      	cmp	r3, r2
 8004068:	d003      	beq.n	8004072 <HAL_TIM_Base_Start_IT+0x42>
 800406a:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800406e:	4293      	cmp	r3, r2
 8004070:	d104      	bne.n	800407c <HAL_TIM_Base_Start_IT+0x4c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004072:	689a      	ldr	r2, [r3, #8]
 8004074:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004078:	2a06      	cmp	r2, #6
 800407a:	d007      	beq.n	800408c <HAL_TIM_Base_Start_IT+0x5c>
    __HAL_TIM_ENABLE(htim);
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 8004082:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8004084:	601a      	str	r2, [r3, #0]
 8004086:	4770      	bx	lr
    return HAL_ERROR;
 8004088:	2001      	movs	r0, #1
 800408a:	4770      	bx	lr
  return HAL_OK;
 800408c:	2000      	movs	r0, #0
}
 800408e:	4770      	bx	lr
 8004090:	40010000 	.word	0x40010000
 8004094:	40000400 	.word	0x40000400

08004098 <HAL_TIM_PWM_MspInit>:
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop

0800409c <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 800409c:	2800      	cmp	r0, #0
 800409e:	d076      	beq.n	800418e <HAL_TIM_PWM_Init+0xf2>
{
 80040a0:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80040a2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80040a6:	4604      	mov	r4, r0
 80040a8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d055      	beq.n	800415c <HAL_TIM_PWM_Init+0xc0>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040b0:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040b2:	4938      	ldr	r1, [pc, #224]	; (8004194 <HAL_TIM_PWM_Init+0xf8>)
  htim->State = HAL_TIM_STATE_BUSY;
 80040b4:	2302      	movs	r3, #2
 80040b6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040ba:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 80040bc:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040be:	d052      	beq.n	8004166 <HAL_TIM_PWM_Init+0xca>
 80040c0:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80040c4:	d021      	beq.n	800410a <HAL_TIM_PWM_Init+0x6e>
 80040c6:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 80040ca:	428a      	cmp	r2, r1
 80040cc:	d01d      	beq.n	800410a <HAL_TIM_PWM_Init+0x6e>
 80040ce:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80040d2:	428a      	cmp	r2, r1
 80040d4:	d019      	beq.n	800410a <HAL_TIM_PWM_Init+0x6e>
 80040d6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80040da:	428a      	cmp	r2, r1
 80040dc:	d015      	beq.n	800410a <HAL_TIM_PWM_Init+0x6e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040de:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 80040e2:	428a      	cmp	r2, r1
 80040e4:	d015      	beq.n	8004112 <HAL_TIM_PWM_Init+0x76>
 80040e6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80040ea:	428a      	cmp	r2, r1
 80040ec:	d011      	beq.n	8004112 <HAL_TIM_PWM_Init+0x76>
 80040ee:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80040f2:	428a      	cmp	r2, r1
 80040f4:	d00d      	beq.n	8004112 <HAL_TIM_PWM_Init+0x76>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040f6:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040f8:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040fe:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8004100:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 8004102:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004104:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004106:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004108:	e010      	b.n	800412c <HAL_TIM_PWM_Init+0x90>
    tmpcr1 |= Structure->CounterMode;
 800410a:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800410c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004110:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004112:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004114:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004116:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800411a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800411c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004120:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004122:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8004124:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8004126:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004128:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800412a:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 800412c:	2301      	movs	r3, #1
 800412e:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004130:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004134:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004138:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800413c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004140:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004144:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004148:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800414c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004150:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8004154:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004158:	2000      	movs	r0, #0
}
 800415a:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800415c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8004160:	f7ff ff9a 	bl	8004098 <HAL_TIM_PWM_MspInit>
 8004164:	e7a4      	b.n	80040b0 <HAL_TIM_PWM_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 8004166:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004168:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800416a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800416e:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8004170:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004174:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004176:	69a1      	ldr	r1, [r4, #24]
 8004178:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800417c:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 800417e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004180:	68e3      	ldr	r3, [r4, #12]
 8004182:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004184:	6863      	ldr	r3, [r4, #4]
 8004186:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8004188:	6963      	ldr	r3, [r4, #20]
 800418a:	6313      	str	r3, [r2, #48]	; 0x30
 800418c:	e7ce      	b.n	800412c <HAL_TIM_PWM_Init+0x90>
    return HAL_ERROR;
 800418e:	2001      	movs	r0, #1
}
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	40010000 	.word	0x40010000

08004198 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8004198:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800419c:	2b01      	cmp	r3, #1
 800419e:	f000 80ca 	beq.w	8004336 <HAL_TIM_PWM_ConfigChannel+0x19e>
 80041a2:	2301      	movs	r3, #1
{
 80041a4:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 80041a6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 80041aa:	2a0c      	cmp	r2, #12
 80041ac:	d808      	bhi.n	80041c0 <HAL_TIM_PWM_ConfigChannel+0x28>
 80041ae:	e8df f002 	tbb	[pc, r2]
 80041b2:	073d      	.short	0x073d
 80041b4:	07680707 	.word	0x07680707
 80041b8:	07960707 	.word	0x07960707
 80041bc:	0707      	.short	0x0707
 80041be:	0e          	.byte	0x0e
 80041bf:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 80041c0:	2300      	movs	r3, #0
 80041c2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 80041c6:	2201      	movs	r2, #1
}
 80041c8:	4610      	mov	r0, r2
 80041ca:	bcf0      	pop	{r4, r5, r6, r7}
 80041cc:	4770      	bx	lr
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80041ce:	6803      	ldr	r3, [r0, #0]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041d0:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041d2:	6a1a      	ldr	r2, [r3, #32]
 80041d4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80041d8:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 80041da:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80041dc:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 80041de:	69dc      	ldr	r4, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80041e0:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041e4:	ea44 2406 	orr.w	r4, r4, r6, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80041e8:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80041ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80041ee:	ea42 3206 	orr.w	r2, r2, r6, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041f2:	4e6b      	ldr	r6, [pc, #428]	; (80043a0 <HAL_TIM_PWM_ConfigChannel+0x208>)
 80041f4:	42b3      	cmp	r3, r6
 80041f6:	f000 80bd 	beq.w	8004374 <HAL_TIM_PWM_ConfigChannel+0x1dc>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041fa:	605d      	str	r5, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041fc:	61dc      	str	r4, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80041fe:	684c      	ldr	r4, [r1, #4]
 8004200:	641c      	str	r4, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004202:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004204:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004206:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004208:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800420c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800420e:	69dc      	ldr	r4, [r3, #28]
 8004210:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8004214:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004216:	69d9      	ldr	r1, [r3, #28]
 8004218:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 800421c:	61d9      	str	r1, [r3, #28]
  __HAL_UNLOCK(htim);
 800421e:	2300      	movs	r3, #0
 8004220:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8004224:	2200      	movs	r2, #0
}
 8004226:	4610      	mov	r0, r2
 8004228:	bcf0      	pop	{r4, r5, r6, r7}
 800422a:	4770      	bx	lr
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800422c:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 800422e:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004230:	6a1a      	ldr	r2, [r3, #32]
 8004232:	f022 0201 	bic.w	r2, r2, #1
 8004236:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8004238:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800423a:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 800423c:	699c      	ldr	r4, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800423e:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8004242:	4334      	orrs	r4, r6
  tmpccer |= OC_Config->OCPolarity;
 8004244:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8004246:	f022 0202 	bic.w	r2, r2, #2
  tmpccer |= OC_Config->OCPolarity;
 800424a:	4332      	orrs	r2, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800424c:	4e54      	ldr	r6, [pc, #336]	; (80043a0 <HAL_TIM_PWM_ConfigChannel+0x208>)
 800424e:	42b3      	cmp	r3, r6
 8004250:	d074      	beq.n	800433c <HAL_TIM_PWM_ConfigChannel+0x1a4>
  TIMx->CR2 = tmpcr2;
 8004252:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004254:	619c      	str	r4, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8004256:	684c      	ldr	r4, [r1, #4]
 8004258:	635c      	str	r4, [r3, #52]	; 0x34
  TIMx->CCER = tmpccer;
 800425a:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800425c:	699a      	ldr	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800425e:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004260:	f042 0208 	orr.w	r2, r2, #8
 8004264:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004266:	699c      	ldr	r4, [r3, #24]
 8004268:	f024 0404 	bic.w	r4, r4, #4
 800426c:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800426e:	6999      	ldr	r1, [r3, #24]
 8004270:	4329      	orrs	r1, r5
 8004272:	6199      	str	r1, [r3, #24]
  __HAL_UNLOCK(htim);
 8004274:	2300      	movs	r3, #0
 8004276:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 800427a:	2200      	movs	r2, #0
}
 800427c:	4610      	mov	r0, r2
 800427e:	bcf0      	pop	{r4, r5, r6, r7}
 8004280:	4770      	bx	lr
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004282:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004284:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004286:	6a1a      	ldr	r2, [r3, #32]
 8004288:	f022 0210 	bic.w	r2, r2, #16
 800428c:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 800428e:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004290:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8004292:	699c      	ldr	r4, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004294:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004298:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800429c:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 800429e:	f022 0220 	bic.w	r2, r2, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80042a2:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80042a6:	4e3e      	ldr	r6, [pc, #248]	; (80043a0 <HAL_TIM_PWM_ConfigChannel+0x208>)
 80042a8:	42b3      	cmp	r3, r6
 80042aa:	d054      	beq.n	8004356 <HAL_TIM_PWM_ConfigChannel+0x1be>
  TIMx->CR2 = tmpcr2;
 80042ac:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 80042ae:	619c      	str	r4, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80042b0:	684c      	ldr	r4, [r1, #4]
 80042b2:	639c      	str	r4, [r3, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80042b4:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80042b6:	699a      	ldr	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80042b8:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80042ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80042c0:	699c      	ldr	r4, [r3, #24]
 80042c2:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 80042c6:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80042c8:	6999      	ldr	r1, [r3, #24]
 80042ca:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 80042ce:	6199      	str	r1, [r3, #24]
  __HAL_UNLOCK(htim);
 80042d0:	2300      	movs	r3, #0
 80042d2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 80042d6:	2200      	movs	r2, #0
}
 80042d8:	4610      	mov	r0, r2
 80042da:	bcf0      	pop	{r4, r5, r6, r7}
 80042dc:	4770      	bx	lr
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80042de:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 80042e0:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80042e2:	6a1a      	ldr	r2, [r3, #32]
 80042e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042e8:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 80042ea:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80042ec:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 80042ee:	69dc      	ldr	r4, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80042f0:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80042f4:	4334      	orrs	r4, r6
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80042f6:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80042f8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80042fc:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004300:	4e27      	ldr	r6, [pc, #156]	; (80043a0 <HAL_TIM_PWM_ConfigChannel+0x208>)
 8004302:	42b3      	cmp	r3, r6
 8004304:	d03c      	beq.n	8004380 <HAL_TIM_PWM_ConfigChannel+0x1e8>
  TIMx->CR2 = tmpcr2;
 8004306:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004308:	61dc      	str	r4, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800430a:	684c      	ldr	r4, [r1, #4]
 800430c:	63dc      	str	r4, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 800430e:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004310:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004312:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004314:	f042 0208 	orr.w	r2, r2, #8
 8004318:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800431a:	69dc      	ldr	r4, [r3, #28]
 800431c:	f024 0404 	bic.w	r4, r4, #4
 8004320:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004322:	69d9      	ldr	r1, [r3, #28]
 8004324:	4329      	orrs	r1, r5
 8004326:	61d9      	str	r1, [r3, #28]
  __HAL_UNLOCK(htim);
 8004328:	2300      	movs	r3, #0
 800432a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 800432e:	2200      	movs	r2, #0
}
 8004330:	4610      	mov	r0, r2
 8004332:	bcf0      	pop	{r4, r5, r6, r7}
 8004334:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004336:	2202      	movs	r2, #2
}
 8004338:	4610      	mov	r0, r2
 800433a:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 800433c:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800433e:	f022 0208 	bic.w	r2, r2, #8
    tmpccer |= OC_Config->OCNPolarity;
 8004342:	4332      	orrs	r2, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 8004344:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004348:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 800434c:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC1NE;
 800434e:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8004352:	4335      	orrs	r5, r6
 8004354:	e77d      	b.n	8004252 <HAL_TIM_PWM_ConfigChannel+0xba>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004356:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8004358:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800435c:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004360:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004364:	f425 6540 	bic.w	r5, r5, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004368:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC2NE;
 800436a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800436e:	ea45 0586 	orr.w	r5, r5, r6, lsl #2
 8004372:	e79b      	b.n	80042ac <HAL_TIM_PWM_ConfigChannel+0x114>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004374:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004376:	f425 4580 	bic.w	r5, r5, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800437a:	ea45 1586 	orr.w	r5, r5, r6, lsl #6
 800437e:	e73c      	b.n	80041fa <HAL_TIM_PWM_ConfigChannel+0x62>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004380:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8004382:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004386:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800438a:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800438e:	f425 5540 	bic.w	r5, r5, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004392:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC3NE;
 8004394:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004398:	ea45 1506 	orr.w	r5, r5, r6, lsl #4
 800439c:	e7b3      	b.n	8004306 <HAL_TIM_PWM_ConfigChannel+0x16e>
 800439e:	bf00      	nop
 80043a0:	40010000 	.word	0x40010000

080043a4 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80043a4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d075      	beq.n	8004498 <HAL_TIM_ConfigClockSource+0xf4>
 80043ac:	4602      	mov	r2, r0
{
 80043ae:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 80043b0:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 80043b2:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80043b4:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 80043b8:	2001      	movs	r0, #1
 80043ba:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80043be:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043c0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043c4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80043c8:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 80043ca:	680b      	ldr	r3, [r1, #0]
 80043cc:	2b60      	cmp	r3, #96	; 0x60
 80043ce:	d065      	beq.n	800449c <HAL_TIM_ConfigClockSource+0xf8>
 80043d0:	d824      	bhi.n	800441c <HAL_TIM_ConfigClockSource+0x78>
 80043d2:	2b40      	cmp	r3, #64	; 0x40
 80043d4:	d07c      	beq.n	80044d0 <HAL_TIM_ConfigClockSource+0x12c>
 80043d6:	d94b      	bls.n	8004470 <HAL_TIM_ConfigClockSource+0xcc>
 80043d8:	2b50      	cmp	r3, #80	; 0x50
 80043da:	d117      	bne.n	800440c <HAL_TIM_ConfigClockSource+0x68>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043dc:	6848      	ldr	r0, [r1, #4]
 80043de:	68cd      	ldr	r5, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043e0:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043e2:	6a23      	ldr	r3, [r4, #32]
 80043e4:	f023 0301 	bic.w	r3, r3, #1
 80043e8:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043ea:	69a3      	ldr	r3, [r4, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043ec:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 80043f4:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043f6:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043fa:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 80043fc:	6221      	str	r1, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043fe:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004400:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004404:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  HAL_StatusTypeDef status = HAL_OK;
 8004408:	2000      	movs	r0, #0
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800440a:	60a3      	str	r3, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 800440c:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 800440e:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8004410:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004414:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 8004418:	bc30      	pop	{r4, r5}
 800441a:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 800441c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004420:	d038      	beq.n	8004494 <HAL_TIM_ConfigClockSource+0xf0>
 8004422:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004426:	d110      	bne.n	800444a <HAL_TIM_ConfigClockSource+0xa6>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004428:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800442c:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800442e:	432b      	orrs	r3, r5
 8004430:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004432:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004436:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800443a:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800443c:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800443e:	68a3      	ldr	r3, [r4, #8]
 8004440:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  HAL_StatusTypeDef status = HAL_OK;
 8004444:	2000      	movs	r0, #0
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004446:	60a3      	str	r3, [r4, #8]
      break;
 8004448:	e7e0      	b.n	800440c <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 800444a:	2b70      	cmp	r3, #112	; 0x70
 800444c:	d1de      	bne.n	800440c <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800444e:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8004452:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004454:	432b      	orrs	r3, r5
 8004456:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004458:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800445c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8004460:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8004462:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 8004464:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004466:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  HAL_StatusTypeDef status = HAL_OK;
 800446a:	2000      	movs	r0, #0
      htim->Instance->SMCR = tmpsmcr;
 800446c:	60a3      	str	r3, [r4, #8]
      break;
 800446e:	e7cd      	b.n	800440c <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8004470:	2b20      	cmp	r3, #32
 8004472:	d002      	beq.n	800447a <HAL_TIM_ConfigClockSource+0xd6>
 8004474:	d90a      	bls.n	800448c <HAL_TIM_ConfigClockSource+0xe8>
 8004476:	2b30      	cmp	r3, #48	; 0x30
 8004478:	d1c8      	bne.n	800440c <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr = TIMx->SMCR;
 800447a:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800447c:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004480:	430b      	orrs	r3, r1
 8004482:	f043 0307 	orr.w	r3, r3, #7
  HAL_StatusTypeDef status = HAL_OK;
 8004486:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8004488:	60a3      	str	r3, [r4, #8]
}
 800448a:	e7bf      	b.n	800440c <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 800448c:	f033 0110 	bics.w	r1, r3, #16
 8004490:	d1bc      	bne.n	800440c <HAL_TIM_ConfigClockSource+0x68>
 8004492:	e7f2      	b.n	800447a <HAL_TIM_ConfigClockSource+0xd6>
  HAL_StatusTypeDef status = HAL_OK;
 8004494:	2000      	movs	r0, #0
 8004496:	e7b9      	b.n	800440c <HAL_TIM_ConfigClockSource+0x68>
  __HAL_LOCK(htim);
 8004498:	2002      	movs	r0, #2
}
 800449a:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800449c:	6a20      	ldr	r0, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800449e:	68cb      	ldr	r3, [r1, #12]
 80044a0:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044a2:	f020 0010 	bic.w	r0, r0, #16
 80044a6:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044a8:	69a1      	ldr	r1, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044aa:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044ae:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
  tmpccer = TIMx->CCER;
 80044b2:	6a23      	ldr	r3, [r4, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 80044b4:	61a1      	str	r1, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80044ba:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCER = tmpccer;
 80044be:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 80044c0:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80044c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044c6:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  HAL_StatusTypeDef status = HAL_OK;
 80044ca:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 80044cc:	60a3      	str	r3, [r4, #8]
}
 80044ce:	e79d      	b.n	800440c <HAL_TIM_ConfigClockSource+0x68>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044d0:	6848      	ldr	r0, [r1, #4]
 80044d2:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 80044d4:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044d6:	6a23      	ldr	r3, [r4, #32]
 80044d8:	f023 0301 	bic.w	r3, r3, #1
 80044dc:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044de:	69a3      	ldr	r3, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044e0:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 80044e8:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044ea:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80044ee:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 80044f0:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 80044f2:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80044f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044f8:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  HAL_StatusTypeDef status = HAL_OK;
 80044fc:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 80044fe:	60a3      	str	r3, [r4, #8]
}
 8004500:	e784      	b.n	800440c <HAL_TIM_ConfigClockSource+0x68>
 8004502:	bf00      	nop

08004504 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 8004504:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8004508:	2a01      	cmp	r2, #1
 800450a:	d050      	beq.n	80045ae <HAL_TIM_SlaveConfigSynchro+0xaa>
 800450c:	4603      	mov	r3, r0
{
 800450e:	b470      	push	{r4, r5, r6}
  htim->State = HAL_TIM_STATE_BUSY;
 8004510:	2202      	movs	r2, #2
  tmpsmcr = htim->Instance->SMCR;
 8004512:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  __HAL_LOCK(htim);
 8004518:	2001      	movs	r0, #1
 800451a:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 800451e:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004520:	6848      	ldr	r0, [r1, #4]
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004522:	680d      	ldr	r5, [r1, #0]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004524:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004528:	4302      	orrs	r2, r0
  tmpsmcr &= ~TIM_SMCR_SMS;
 800452a:	f022 0207 	bic.w	r2, r2, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800452e:	432a      	orrs	r2, r5
  switch (sSlaveConfig->InputTrigger)
 8004530:	2850      	cmp	r0, #80	; 0x50
  htim->Instance->SMCR = tmpsmcr;
 8004532:	60a2      	str	r2, [r4, #8]
  switch (sSlaveConfig->InputTrigger)
 8004534:	d060      	beq.n	80045f8 <HAL_TIM_SlaveConfigSynchro+0xf4>
 8004536:	d90f      	bls.n	8004558 <HAL_TIM_SlaveConfigSynchro+0x54>
 8004538:	2860      	cmp	r0, #96	; 0x60
 800453a:	d03a      	beq.n	80045b2 <HAL_TIM_SlaveConfigSynchro+0xae>
 800453c:	2870      	cmp	r0, #112	; 0x70
 800453e:	d10e      	bne.n	800455e <HAL_TIM_SlaveConfigSynchro+0x5a>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004540:	e9d1 5202 	ldrd	r5, r2, [r1, #8]
  tmpsmcr = TIMx->SMCR;
 8004544:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004546:	432a      	orrs	r2, r5
 8004548:	690d      	ldr	r5, [r1, #16]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800454a:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800454e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8004552:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 8004554:	60a2      	str	r2, [r4, #8]
 8004556:	e00f      	b.n	8004578 <HAL_TIM_SlaveConfigSynchro+0x74>
  switch (sSlaveConfig->InputTrigger)
 8004558:	2840      	cmp	r0, #64	; 0x40
 800455a:	d03d      	beq.n	80045d8 <HAL_TIM_SlaveConfigSynchro+0xd4>
 800455c:	d907      	bls.n	800456e <HAL_TIM_SlaveConfigSynchro+0x6a>
    htim->State = HAL_TIM_STATE_READY;
 800455e:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 8004560:	2200      	movs	r2, #0
    htim->State = HAL_TIM_STATE_READY;
 8004562:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800456a:	bc70      	pop	{r4, r5, r6}
 800456c:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 800456e:	2820      	cmp	r0, #32
 8004570:	d002      	beq.n	8004578 <HAL_TIM_SlaveConfigSynchro+0x74>
 8004572:	d912      	bls.n	800459a <HAL_TIM_SlaveConfigSynchro+0x96>
 8004574:	2830      	cmp	r0, #48	; 0x30
 8004576:	d1f2      	bne.n	800455e <HAL_TIM_SlaveConfigSynchro+0x5a>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004578:	68e2      	ldr	r2, [r4, #12]
 800457a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800457e:	60e2      	str	r2, [r4, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004580:	68e2      	ldr	r2, [r4, #12]
  __HAL_UNLOCK(htim);
 8004582:	2100      	movs	r1, #0
  htim->State = HAL_TIM_STATE_READY;
 8004584:	2501      	movs	r5, #1
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004586:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800458a:	60e2      	str	r2, [r4, #12]
  htim->State = HAL_TIM_STATE_READY;
 800458c:	f883 503d 	strb.w	r5, [r3, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004590:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
  return HAL_OK;
 8004594:	4608      	mov	r0, r1
}
 8004596:	bc70      	pop	{r4, r5, r6}
 8004598:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 800459a:	f030 0210 	bics.w	r2, r0, #16
 800459e:	d0eb      	beq.n	8004578 <HAL_TIM_SlaveConfigSynchro+0x74>
    htim->State = HAL_TIM_STATE_READY;
 80045a0:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 80045a2:	2200      	movs	r2, #0
    htim->State = HAL_TIM_STATE_READY;
 80045a4:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80045a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80045ac:	e7dd      	b.n	800456a <HAL_TIM_SlaveConfigSynchro+0x66>
  __HAL_LOCK(htim);
 80045ae:	2002      	movs	r0, #2
}
 80045b0:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045b2:	6a20      	ldr	r0, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80045b4:	690a      	ldr	r2, [r1, #16]
 80045b6:	688d      	ldr	r5, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045b8:	f020 0010 	bic.w	r0, r0, #16
 80045bc:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045be:	69a1      	ldr	r1, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045c0:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045c4:	ea41 3102 	orr.w	r1, r1, r2, lsl #12
  tmpccer = TIMx->CCER;
 80045c8:	6a22      	ldr	r2, [r4, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 80045ca:	61a1      	str	r1, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045cc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80045d0:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCER = tmpccer;
 80045d4:	6222      	str	r2, [r4, #32]
 80045d6:	e7cf      	b.n	8004578 <HAL_TIM_SlaveConfigSynchro+0x74>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80045d8:	2d05      	cmp	r5, #5
 80045da:	d0c0      	beq.n	800455e <HAL_TIM_SlaveConfigSynchro+0x5a>
      tmpccer = htim->Instance->CCER;
 80045dc:	6a25      	ldr	r5, [r4, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80045de:	6a20      	ldr	r0, [r4, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80045e0:	690e      	ldr	r6, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80045e2:	f020 0001 	bic.w	r0, r0, #1
 80045e6:	6220      	str	r0, [r4, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80045e8:	69a2      	ldr	r2, [r4, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045ea:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80045ee:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 80045f2:	61a2      	str	r2, [r4, #24]
      htim->Instance->CCER = tmpccer;
 80045f4:	6225      	str	r5, [r4, #32]
      break;
 80045f6:	e7bf      	b.n	8004578 <HAL_TIM_SlaveConfigSynchro+0x74>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045f8:	6888      	ldr	r0, [r1, #8]
 80045fa:	690d      	ldr	r5, [r1, #16]
  tmpccer = TIMx->CCER;
 80045fc:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045fe:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8004602:	4301      	orrs	r1, r0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004604:	6a20      	ldr	r0, [r4, #32]
 8004606:	f020 0001 	bic.w	r0, r0, #1
 800460a:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800460c:	69a2      	ldr	r2, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800460e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004612:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8004616:	61a2      	str	r2, [r4, #24]
  TIMx->CCER = tmpccer;
 8004618:	6221      	str	r1, [r4, #32]
 800461a:	e7ad      	b.n	8004578 <HAL_TIM_SlaveConfigSynchro+0x74>

0800461c <HAL_TIM_OC_DelayElapsedCallback>:
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop

08004620 <HAL_TIM_IC_CaptureCallback>:
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop

08004624 <HAL_TIM_PWM_PulseFinishedCallback>:
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop

08004628 <HAL_TIM_TriggerCallback>:
 8004628:	4770      	bx	lr
 800462a:	bf00      	nop

0800462c <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800462c:	6803      	ldr	r3, [r0, #0]
 800462e:	691a      	ldr	r2, [r3, #16]
 8004630:	0791      	lsls	r1, r2, #30
{
 8004632:	b510      	push	{r4, lr}
 8004634:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004636:	d502      	bpl.n	800463e <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004638:	68da      	ldr	r2, [r3, #12]
 800463a:	0792      	lsls	r2, r2, #30
 800463c:	d45f      	bmi.n	80046fe <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800463e:	691a      	ldr	r2, [r3, #16]
 8004640:	0750      	lsls	r0, r2, #29
 8004642:	d502      	bpl.n	800464a <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004644:	68da      	ldr	r2, [r3, #12]
 8004646:	0751      	lsls	r1, r2, #29
 8004648:	d446      	bmi.n	80046d8 <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800464a:	691a      	ldr	r2, [r3, #16]
 800464c:	0712      	lsls	r2, r2, #28
 800464e:	d502      	bpl.n	8004656 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004650:	68da      	ldr	r2, [r3, #12]
 8004652:	0710      	lsls	r0, r2, #28
 8004654:	d42e      	bmi.n	80046b4 <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004656:	691a      	ldr	r2, [r3, #16]
 8004658:	06d2      	lsls	r2, r2, #27
 800465a:	d502      	bpl.n	8004662 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800465c:	68da      	ldr	r2, [r3, #12]
 800465e:	06d0      	lsls	r0, r2, #27
 8004660:	d418      	bmi.n	8004694 <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004662:	691a      	ldr	r2, [r3, #16]
 8004664:	07d1      	lsls	r1, r2, #31
 8004666:	d502      	bpl.n	800466e <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004668:	68da      	ldr	r2, [r3, #12]
 800466a:	07d2      	lsls	r2, r2, #31
 800466c:	d45d      	bmi.n	800472a <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800466e:	691a      	ldr	r2, [r3, #16]
 8004670:	0610      	lsls	r0, r2, #24
 8004672:	d502      	bpl.n	800467a <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004674:	68da      	ldr	r2, [r3, #12]
 8004676:	0611      	lsls	r1, r2, #24
 8004678:	d45f      	bmi.n	800473a <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800467a:	691a      	ldr	r2, [r3, #16]
 800467c:	0652      	lsls	r2, r2, #25
 800467e:	d502      	bpl.n	8004686 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004680:	68da      	ldr	r2, [r3, #12]
 8004682:	0650      	lsls	r0, r2, #25
 8004684:	d461      	bmi.n	800474a <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004686:	691a      	ldr	r2, [r3, #16]
 8004688:	0691      	lsls	r1, r2, #26
 800468a:	d502      	bpl.n	8004692 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800468c:	68da      	ldr	r2, [r3, #12]
 800468e:	0692      	lsls	r2, r2, #26
 8004690:	d443      	bmi.n	800471a <HAL_TIM_IRQHandler+0xee>
}
 8004692:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004694:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004698:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800469a:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800469c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800469e:	69db      	ldr	r3, [r3, #28]
 80046a0:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80046a4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80046a6:	d064      	beq.n	8004772 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80046a8:	f7ff ffba 	bl	8004620 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046ac:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80046ae:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046b0:	7722      	strb	r2, [r4, #28]
 80046b2:	e7d6      	b.n	8004662 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80046b4:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046b8:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80046ba:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046bc:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046be:	69db      	ldr	r3, [r3, #28]
 80046c0:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 80046c2:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046c4:	d152      	bne.n	800476c <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046c6:	f7ff ffa9 	bl	800461c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046ca:	4620      	mov	r0, r4
 80046cc:	f7ff ffaa 	bl	8004624 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046d0:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80046d2:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046d4:	7722      	strb	r2, [r4, #28]
 80046d6:	e7be      	b.n	8004656 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80046d8:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046dc:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80046de:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046e0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046e2:	699b      	ldr	r3, [r3, #24]
 80046e4:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80046e8:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046ea:	d13c      	bne.n	8004766 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046ec:	f7ff ff96 	bl	800461c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046f0:	4620      	mov	r0, r4
 80046f2:	f7ff ff97 	bl	8004624 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046f6:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80046f8:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046fa:	7722      	strb	r2, [r4, #28]
 80046fc:	e7a5      	b.n	800464a <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80046fe:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004702:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004704:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004706:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004708:	699b      	ldr	r3, [r3, #24]
 800470a:	079b      	lsls	r3, r3, #30
 800470c:	d025      	beq.n	800475a <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 800470e:	f7ff ff87 	bl	8004620 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004712:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004714:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004716:	7722      	strb	r2, [r4, #28]
 8004718:	e791      	b.n	800463e <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800471a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800471e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004720:	611a      	str	r2, [r3, #16]
}
 8004722:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8004726:	f000 b9ad 	b.w	8004a84 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800472a:	f06f 0201 	mvn.w	r2, #1
 800472e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004730:	4620      	mov	r0, r4
 8004732:	f7fc f9b9 	bl	8000aa8 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004736:	6823      	ldr	r3, [r4, #0]
 8004738:	e799      	b.n	800466e <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800473a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800473e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004740:	4620      	mov	r0, r4
 8004742:	f000 f9a1 	bl	8004a88 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004746:	6823      	ldr	r3, [r4, #0]
 8004748:	e797      	b.n	800467a <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800474a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800474e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004750:	4620      	mov	r0, r4
 8004752:	f7ff ff69 	bl	8004628 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004756:	6823      	ldr	r3, [r4, #0]
 8004758:	e795      	b.n	8004686 <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800475a:	f7ff ff5f 	bl	800461c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800475e:	4620      	mov	r0, r4
 8004760:	f7ff ff60 	bl	8004624 <HAL_TIM_PWM_PulseFinishedCallback>
 8004764:	e7d5      	b.n	8004712 <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 8004766:	f7ff ff5b 	bl	8004620 <HAL_TIM_IC_CaptureCallback>
 800476a:	e7c4      	b.n	80046f6 <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 800476c:	f7ff ff58 	bl	8004620 <HAL_TIM_IC_CaptureCallback>
 8004770:	e7ae      	b.n	80046d0 <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004772:	f7ff ff53 	bl	800461c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004776:	4620      	mov	r0, r4
 8004778:	f7ff ff54 	bl	8004624 <HAL_TIM_PWM_PulseFinishedCallback>
 800477c:	e796      	b.n	80046ac <HAL_TIM_IRQHandler+0x80>
 800477e:	bf00      	nop

08004780 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004780:	4a2a      	ldr	r2, [pc, #168]	; (800482c <TIM_Base_SetConfig+0xac>)
  tmpcr1 = TIMx->CR1;
 8004782:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004784:	4290      	cmp	r0, r2
{
 8004786:	b430      	push	{r4, r5}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004788:	d039      	beq.n	80047fe <TIM_Base_SetConfig+0x7e>
 800478a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800478e:	d021      	beq.n	80047d4 <TIM_Base_SetConfig+0x54>
 8004790:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8004794:	4290      	cmp	r0, r2
 8004796:	d01d      	beq.n	80047d4 <TIM_Base_SetConfig+0x54>
 8004798:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800479c:	4290      	cmp	r0, r2
 800479e:	d019      	beq.n	80047d4 <TIM_Base_SetConfig+0x54>
 80047a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80047a4:	4290      	cmp	r0, r2
 80047a6:	d015      	beq.n	80047d4 <TIM_Base_SetConfig+0x54>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047a8:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 80047ac:	4290      	cmp	r0, r2
 80047ae:	d015      	beq.n	80047dc <TIM_Base_SetConfig+0x5c>
 80047b0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80047b4:	4290      	cmp	r0, r2
 80047b6:	d011      	beq.n	80047dc <TIM_Base_SetConfig+0x5c>
 80047b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80047bc:	4290      	cmp	r0, r2
 80047be:	d00d      	beq.n	80047dc <TIM_Base_SetConfig+0x5c>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047c0:	694d      	ldr	r5, [r1, #20]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047c2:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 80047c4:	680a      	ldr	r2, [r1, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047ca:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80047cc:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047ce:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80047d0:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047d2:	e010      	b.n	80047f6 <TIM_Base_SetConfig+0x76>
    tmpcr1 |= Structure->CounterMode;
 80047d4:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80047da:	4313      	orrs	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047dc:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047de:	694a      	ldr	r2, [r1, #20]
    tmpcr1 &= ~TIM_CR1_CKD;
 80047e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047e4:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047ea:	688c      	ldr	r4, [r1, #8]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047ec:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 80047ee:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 80047f0:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047f2:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80047f4:	6282      	str	r2, [r0, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 80047f6:	2301      	movs	r3, #1
}
 80047f8:	bc30      	pop	{r4, r5}
  TIMx->EGR = TIM_EGR_UG;
 80047fa:	6143      	str	r3, [r0, #20]
}
 80047fc:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 80047fe:	684c      	ldr	r4, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004800:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004806:	4323      	orrs	r3, r4
    tmpcr1 &= ~TIM_CR1_CKD;
 8004808:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800480c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800480e:	694a      	ldr	r2, [r1, #20]
 8004810:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004814:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004816:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004818:	688b      	ldr	r3, [r1, #8]
 800481a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800481c:	680b      	ldr	r3, [r1, #0]
 800481e:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8004820:	690b      	ldr	r3, [r1, #16]
 8004822:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8004824:	2301      	movs	r3, #1
}
 8004826:	bc30      	pop	{r4, r5}
  TIMx->EGR = TIM_EGR_UG;
 8004828:	6143      	str	r3, [r0, #20]
}
 800482a:	4770      	bx	lr
 800482c:	40010000 	.word	0x40010000

08004830 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004830:	6a03      	ldr	r3, [r0, #32]
 8004832:	f023 0310 	bic.w	r3, r3, #16
 8004836:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8004838:	6a03      	ldr	r3, [r0, #32]
{
 800483a:	b470      	push	{r4, r5, r6}
  tmpcr2 =  TIMx->CR2;
 800483c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800483e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004840:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004842:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004846:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800484a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 800484c:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004850:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004854:	4d0c      	ldr	r5, [pc, #48]	; (8004888 <TIM_OC2_SetConfig+0x58>)
 8004856:	42a8      	cmp	r0, r5
 8004858:	d006      	beq.n	8004868 <TIM_OC2_SetConfig+0x38>
  TIMx->CCR2 = OC_Config->Pulse;
 800485a:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800485c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800485e:	6182      	str	r2, [r0, #24]
}
 8004860:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 8004862:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8004864:	6203      	str	r3, [r0, #32]
}
 8004866:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004868:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800486a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800486e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004872:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004876:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800487a:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 800487c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004880:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8004884:	e7e9      	b.n	800485a <TIM_OC2_SetConfig+0x2a>
 8004886:	bf00      	nop
 8004888:	40010000 	.word	0x40010000

0800488c <TIM_TI1_SetConfig>:
{
 800488c:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800488e:	6a05      	ldr	r5, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004890:	4e17      	ldr	r6, [pc, #92]	; (80048f0 <TIM_TI1_SetConfig+0x64>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004892:	f025 0501 	bic.w	r5, r5, #1
 8004896:	6205      	str	r5, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004898:	42b0      	cmp	r0, r6
  tmpccmr1 = TIMx->CCMR1;
 800489a:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800489c:	6a05      	ldr	r5, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800489e:	d015      	beq.n	80048cc <TIM_TI1_SetConfig+0x40>
 80048a0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80048a4:	d012      	beq.n	80048cc <TIM_TI1_SetConfig+0x40>
 80048a6:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 80048aa:	42b0      	cmp	r0, r6
 80048ac:	d00e      	beq.n	80048cc <TIM_TI1_SetConfig+0x40>
 80048ae:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80048b2:	42b0      	cmp	r0, r6
 80048b4:	d00a      	beq.n	80048cc <TIM_TI1_SetConfig+0x40>
 80048b6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80048ba:	42b0      	cmp	r0, r6
 80048bc:	d006      	beq.n	80048cc <TIM_TI1_SetConfig+0x40>
 80048be:	f506 369a 	add.w	r6, r6, #78848	; 0x13400
 80048c2:	42b0      	cmp	r0, r6
 80048c4:	d002      	beq.n	80048cc <TIM_TI1_SetConfig+0x40>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80048c6:	f044 0201 	orr.w	r2, r4, #1
 80048ca:	e002      	b.n	80048d2 <TIM_TI1_SetConfig+0x46>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80048cc:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 80048d0:	4322      	orrs	r2, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80048d2:	011b      	lsls	r3, r3, #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048d4:	f025 040a 	bic.w	r4, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048d8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80048dc:	b2db      	uxtb	r3, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80048de:	f001 010a 	and.w	r1, r1, #10
 80048e2:	4321      	orrs	r1, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80048e4:	4313      	orrs	r3, r2
  TIMx->CCMR1 = tmpccmr1;
 80048e6:	6183      	str	r3, [r0, #24]
}
 80048e8:	bc70      	pop	{r4, r5, r6}
  TIMx->CCER = tmpccer;
 80048ea:	6201      	str	r1, [r0, #32]
}
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop
 80048f0:	40010000 	.word	0x40010000

080048f4 <HAL_TIMEx_HallSensor_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 80048f4:	4770      	bx	lr
 80048f6:	bf00      	nop

080048f8 <HAL_TIMEx_HallSensor_Init>:
  if (htim == NULL)
 80048f8:	2800      	cmp	r0, #0
 80048fa:	d05f      	beq.n	80049bc <HAL_TIMEx_HallSensor_Init+0xc4>
{
 80048fc:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80048fe:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 8004902:	b088      	sub	sp, #32
 8004904:	460d      	mov	r5, r1
 8004906:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8004908:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800490c:	2b00      	cmp	r3, #0
 800490e:	d050      	beq.n	80049b2 <HAL_TIMEx_HallSensor_Init+0xba>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004910:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8004912:	2302      	movs	r3, #2
 8004914:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004918:	f851 0b04 	ldr.w	r0, [r1], #4
 800491c:	f7ff ff30 	bl	8004780 <TIM_Base_SetConfig>
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8004920:	68ab      	ldr	r3, [r5, #8]
 8004922:	6829      	ldr	r1, [r5, #0]
 8004924:	6820      	ldr	r0, [r4, #0]
 8004926:	2203      	movs	r2, #3
 8004928:	f7ff ffb0 	bl	800488c <TIM_TI1_SetConfig>
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800492c:	6820      	ldr	r0, [r4, #0]
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 800492e:	686e      	ldr	r6, [r5, #4]
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004930:	6982      	ldr	r2, [r0, #24]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8004932:	68e9      	ldr	r1, [r5, #12]
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004934:	f022 020c 	bic.w	r2, r2, #12
 8004938:	6182      	str	r2, [r0, #24]
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 800493a:	6983      	ldr	r3, [r0, #24]
 800493c:	4333      	orrs	r3, r6
 800493e:	6183      	str	r3, [r0, #24]
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8004940:	6843      	ldr	r3, [r0, #4]
 8004942:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004946:	6043      	str	r3, [r0, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8004948:	6883      	ldr	r3, [r0, #8]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 800494a:	9102      	str	r1, [sp, #8]
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800494c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004950:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8004952:	6883      	ldr	r3, [r0, #8]
 8004954:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004958:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800495a:	6883      	ldr	r3, [r0, #8]
 800495c:	f023 0307 	bic.w	r3, r3, #7
 8004960:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8004962:	6883      	ldr	r3, [r0, #8]
 8004964:	f043 0304 	orr.w	r3, r3, #4
 8004968:	6083      	str	r3, [r0, #8]
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 800496a:	2500      	movs	r5, #0
  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 800496c:	a901      	add	r1, sp, #4
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 800496e:	2370      	movs	r3, #112	; 0x70
 8004970:	9301      	str	r3, [sp, #4]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004972:	e9cd 5505 	strd	r5, r5, [sp, #20]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004976:	e9cd 5503 	strd	r5, r5, [sp, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800497a:	9507      	str	r5, [sp, #28]
  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 800497c:	f7ff ff58 	bl	8004830 <TIM_OC2_SetConfig>
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8004980:	6822      	ldr	r2, [r4, #0]
 8004982:	6851      	ldr	r1, [r2, #4]
 8004984:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8004988:	6051      	str	r1, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 800498a:	6851      	ldr	r1, [r2, #4]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800498c:	2301      	movs	r3, #1
  return HAL_OK;
 800498e:	4628      	mov	r0, r5
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8004990:	f041 0150 	orr.w	r1, r1, #80	; 0x50
 8004994:	6051      	str	r1, [r2, #4]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004996:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800499a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800499e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80049a2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80049a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  htim->State = HAL_TIM_STATE_READY;
 80049aa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80049ae:	b008      	add	sp, #32
 80049b0:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80049b2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIMEx_HallSensor_MspInit(htim);
 80049b6:	f7ff ff9d 	bl	80048f4 <HAL_TIMEx_HallSensor_MspInit>
 80049ba:	e7a9      	b.n	8004910 <HAL_TIMEx_HallSensor_Init+0x18>
    return HAL_ERROR;
 80049bc:	2001      	movs	r0, #1
}
 80049be:	4770      	bx	lr

080049c0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049c0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d02f      	beq.n	8004a28 <HAL_TIMEx_MasterConfigSynchronization+0x68>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049c8:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80049ca:	2202      	movs	r2, #2
{
 80049cc:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 80049ce:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 80049d2:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049d4:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 80049d6:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 80049d8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049dc:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049de:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049e0:	4a12      	ldr	r2, [pc, #72]	; (8004a2c <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d012      	beq.n	8004a0c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80049e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049ea:	d00f      	beq.n	8004a0c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80049ec:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d00b      	beq.n	8004a0c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80049f4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d007      	beq.n	8004a0c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80049fc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d003      	beq.n	8004a0c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004a04:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d104      	bne.n	8004a16 <HAL_TIMEx_MasterConfigSynchronization+0x56>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a0c:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a0e:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a12:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a14:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8004a16:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8004a18:	2201      	movs	r2, #1
 8004a1a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004a1e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8004a22:	bc30      	pop	{r4, r5}
  return HAL_OK;
 8004a24:	4618      	mov	r0, r3
}
 8004a26:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004a28:	2002      	movs	r0, #2
}
 8004a2a:	4770      	bx	lr
 8004a2c:	40010000 	.word	0x40010000

08004a30 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a30:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d023      	beq.n	8004a80 <HAL_TIMEx_ConfigBreakDeadTime+0x50>
{
 8004a38:	b410      	push	{r4}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004a3a:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 8004a3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a42:	4602      	mov	r2, r0
 8004a44:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004a46:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004a48:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004a4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a4e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004a50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004a54:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004a56:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004a58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a5c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004a5e:	6948      	ldr	r0, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004a60:	69cc      	ldr	r4, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004a62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a66:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004a68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004a6c:	6810      	ldr	r0, [r2, #0]

  __HAL_UNLOCK(htim);
 8004a6e:	2100      	movs	r1, #0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004a70:	4323      	orrs	r3, r4
  htim->Instance->BDTR = tmpbdtr;
 8004a72:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8004a74:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c

  return HAL_OK;
 8004a78:	4608      	mov	r0, r1
}
 8004a7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a7e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004a80:	2002      	movs	r0, #2
}
 8004a82:	4770      	bx	lr

08004a84 <HAL_TIMEx_CommutCallback>:
 8004a84:	4770      	bx	lr
 8004a86:	bf00      	nop

08004a88 <HAL_TIMEx_BreakCallback>:
 8004a88:	4770      	bx	lr
 8004a8a:	bf00      	nop

08004a8c <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a8c:	2800      	cmp	r0, #0
 8004a8e:	f000 808f 	beq.w	8004bb0 <HAL_UART_Init+0x124>
{
 8004a92:	b538      	push	{r3, r4, r5, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a94:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004a98:	4604      	mov	r4, r0
 8004a9a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	f000 8081 	beq.w	8004ba6 <HAL_UART_Init+0x11a>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004aa4:	6823      	ldr	r3, [r4, #0]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004aa6:	68e0      	ldr	r0, [r4, #12]
  huart->gState = HAL_UART_STATE_BUSY;
 8004aa8:	2224      	movs	r2, #36	; 0x24
 8004aaa:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8004aae:	68da      	ldr	r2, [r3, #12]
 8004ab0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ab4:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ab6:	6919      	ldr	r1, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ab8:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004aba:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8004abe:	4301      	orrs	r1, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ac0:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ac2:	6119      	str	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ac4:	4302      	orrs	r2, r0
 8004ac6:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8004ac8:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004aca:	4302      	orrs	r2, r0
 8004acc:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 8004ace:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 8004ad2:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ad6:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8004ad8:	430a      	orrs	r2, r1
 8004ada:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004adc:	695a      	ldr	r2, [r3, #20]
 8004ade:	69a0      	ldr	r0, [r4, #24]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ae0:	4934      	ldr	r1, [pc, #208]	; (8004bb4 <HAL_UART_Init+0x128>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ae2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004ae6:	4302      	orrs	r2, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ae8:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004aea:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004aec:	d035      	beq.n	8004b5a <HAL_UART_Init+0xce>
 8004aee:	4a32      	ldr	r2, [pc, #200]	; (8004bb8 <HAL_UART_Init+0x12c>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d032      	beq.n	8004b5a <HAL_UART_Init+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004af4:	f7ff f9dc 	bl	8003eb0 <HAL_RCC_GetPCLK1Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004af8:	69e3      	ldr	r3, [r4, #28]
 8004afa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004afe:	d032      	beq.n	8004b66 <HAL_UART_Init+0xda>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b00:	6863      	ldr	r3, [r4, #4]
 8004b02:	2119      	movs	r1, #25
 8004b04:	009a      	lsls	r2, r3, #2
 8004b06:	fba0 0101 	umull	r0, r1, r0, r1
 8004b0a:	0f9b      	lsrs	r3, r3, #30
 8004b0c:	f7fb fb68 	bl	80001e0 <__aeabi_uldivmod>
 8004b10:	492a      	ldr	r1, [pc, #168]	; (8004bbc <HAL_UART_Init+0x130>)
 8004b12:	fba1 3200 	umull	r3, r2, r1, r0
 8004b16:	0952      	lsrs	r2, r2, #5
 8004b18:	2564      	movs	r5, #100	; 0x64
 8004b1a:	fb05 0012 	mls	r0, r5, r2, r0
 8004b1e:	0100      	lsls	r0, r0, #4
 8004b20:	3032      	adds	r0, #50	; 0x32
 8004b22:	6823      	ldr	r3, [r4, #0]
 8004b24:	fba1 1000 	umull	r1, r0, r1, r0
 8004b28:	0112      	lsls	r2, r2, #4
 8004b2a:	eb02 1050 	add.w	r0, r2, r0, lsr #5
 8004b2e:	6098      	str	r0, [r3, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b30:	691a      	ldr	r2, [r3, #16]
 8004b32:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b36:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b38:	695a      	ldr	r2, [r3, #20]
 8004b3a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b3e:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8004b40:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b42:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8004b44:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 8004b46:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b4a:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b4c:	6425      	str	r5, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004b4e:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004b52:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  return HAL_OK;
 8004b56:	4628      	mov	r0, r5
}
 8004b58:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b5a:	f7ff f9b9 	bl	8003ed0 <HAL_RCC_GetPCLK2Freq>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b5e:	69e3      	ldr	r3, [r4, #28]
 8004b60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b64:	d1cc      	bne.n	8004b00 <HAL_UART_Init+0x74>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b66:	6862      	ldr	r2, [r4, #4]
 8004b68:	2119      	movs	r1, #25
 8004b6a:	1892      	adds	r2, r2, r2
 8004b6c:	f04f 0300 	mov.w	r3, #0
 8004b70:	415b      	adcs	r3, r3
 8004b72:	fba0 0101 	umull	r0, r1, r0, r1
 8004b76:	f7fb fb33 	bl	80001e0 <__aeabi_uldivmod>
 8004b7a:	4b10      	ldr	r3, [pc, #64]	; (8004bbc <HAL_UART_Init+0x130>)
 8004b7c:	fba3 2100 	umull	r2, r1, r3, r0
 8004b80:	094d      	lsrs	r5, r1, #5
 8004b82:	2264      	movs	r2, #100	; 0x64
 8004b84:	fb02 0215 	mls	r2, r2, r5, r0
 8004b88:	00d2      	lsls	r2, r2, #3
 8004b8a:	3232      	adds	r2, #50	; 0x32
 8004b8c:	fba3 3202 	umull	r3, r2, r3, r2
 8004b90:	f3c2 1142 	ubfx	r1, r2, #5, #3
 8004b94:	0912      	lsrs	r2, r2, #4
 8004b96:	6823      	ldr	r3, [r4, #0]
 8004b98:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 8004b9c:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8004ba0:	440a      	add	r2, r1
 8004ba2:	609a      	str	r2, [r3, #8]
 8004ba4:	e7c4      	b.n	8004b30 <HAL_UART_Init+0xa4>
    huart->Lock = HAL_UNLOCKED;
 8004ba6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8004baa:	f7fd fd45 	bl	8002638 <HAL_UART_MspInit>
 8004bae:	e779      	b.n	8004aa4 <HAL_UART_Init+0x18>
    return HAL_ERROR;
 8004bb0:	2001      	movs	r0, #1
}
 8004bb2:	4770      	bx	lr
 8004bb4:	40011000 	.word	0x40011000
 8004bb8:	40011400 	.word	0x40011400
 8004bbc:	51eb851f 	.word	0x51eb851f

08004bc0 <ESCOOTER_ThrottleSignalTrigger>:
/**To be called by motor control protocol**/
/**Before running the Main Task, please verify this function carefully**/
/*Input some dummy commands -> check it*/
bool ESCOOTER_ThrottleSignalTrigger(ESCOOTER_BrakeANDThrottleInput *inputHandle)
{
	if(inputHandle->TARGET_IQ != 0)
 8004bc0:	f9b0 0000 	ldrsh.w	r0, [r0]
	{
		return true;
	}
	return false;
}
 8004bc4:	3800      	subs	r0, #0
 8004bc6:	bf18      	it	ne
 8004bc8:	2001      	movne	r0, #1
 8004bca:	4770      	bx	lr

08004bcc <ESCOOTER_BrakeSignalTrigger>:
/**Before running the Main Task, please verify this function carefully**/
/*Input some dummy commands -> check it*/
/*This function must be triggered by UART Commands!!*/
bool ESCOOTER_BrakeSignalTrigger(ESCOOTER_Operation *opHandle,ESCOOTER_BrakeANDThrottleInput *inputHandle)
{
	if(inputHandle->brake == false)
 8004bcc:	7a0b      	ldrb	r3, [r1, #8]
 8004bce:	b90b      	cbnz	r3, 8004bd4 <ESCOOTER_BrakeSignalTrigger+0x8>
	{
	    if ((opHandle->ESCOOTER_MOVE == true) || (opHandle->ESCOOTER_MOVE == false))
	    {
	    	inputHandle->brake = true;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	720b      	strb	r3, [r1, #8]
	if(inputHandle->brake == true)
	{
		return true;
	}
	return false;
}
 8004bd4:	2001      	movs	r0, #1
 8004bd6:	4770      	bx	lr

08004bd8 <ESCOOTER_DEBUG_ReleaseBrakeSignal>:
/*Input some dummy commands -> check it*/
/*This function must be triggered by UART Commands!!*/
/*Change it to boolean*/
void ESCOOTER_DEBUG_ReleaseBrakeSignal(ESCOOTER_Operation *opHandle, ESCOOTER_BrakeANDThrottleInput *inputHandle)
{
	if(inputHandle->brake == true)
 8004bd8:	7a0b      	ldrb	r3, [r1, #8]
 8004bda:	b10b      	cbz	r3, 8004be0 <ESCOOTER_DEBUG_ReleaseBrakeSignal+0x8>
	{
	    if ((opHandle->ESCOOTER_MOVE == true) || (opHandle->ESCOOTER_MOVE == false))
	    {
	    	inputHandle->brake = false;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	720b      	strb	r3, [r1, #8]
	}
	if(inputHandle->brake == false)
	{
		//HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,GPIO_PIN_RESET);
	}
}
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop

08004be4 <ESCOOTER_saveStatus>:

ESCOOTER_Driving_State Driving_State;
ESCOOTER_BrakeANDThrottleInput modeControl;
void ESCOOTER_saveStatus (uint8_t state)
{
	  Driving_State = state;
 8004be4:	4b01      	ldr	r3, [pc, #4]	; (8004bec <ESCOOTER_saveStatus+0x8>)
 8004be6:	7018      	strb	r0, [r3, #0]
}
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop
 8004bec:	20001104 	.word	0x20001104

08004bf0 <ESCOOTER_getStatus>:

ESCOOTER_Driving_State ESCOOTER_getStatus()
{
	return Driving_State;
 8004bf0:	4b01      	ldr	r3, [pc, #4]	; (8004bf8 <ESCOOTER_getStatus+0x8>)
}
 8004bf2:	7818      	ldrb	r0, [r3, #0]
 8004bf4:	4770      	bx	lr
 8004bf6:	bf00      	nop
 8004bf8:	20001104 	.word	0x20001104

08004bfc <ESCOOTER_Set_Limit>:

void ESCOOTER_Set_Limit(ESCOOTER_BrakeANDThrottleInput *limitHandle)
{
 8004bfc:	4602      	mov	r2, r0
     modeControl = *limitHandle;
 8004bfe:	4b03      	ldr	r3, [pc, #12]	; (8004c0c <ESCOOTER_Set_Limit+0x10>)
 8004c00:	6851      	ldr	r1, [r2, #4]
 8004c02:	6800      	ldr	r0, [r0, #0]
 8004c04:	c303      	stmia	r3!, {r0, r1}
 8004c06:	8912      	ldrh	r2, [r2, #8]
 8004c08:	801a      	strh	r2, [r3, #0]
}
 8004c0a:	4770      	bx	lr
 8004c0c:	20001108 	.word	0x20001108

08004c10 <ESCOOTER_Driving_Start>:

int16_t throttle_Current = 0;
void ESCOOTER_Driving_Start()
{
 8004c10:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,GPIO_PIN_SET);
 8004c12:	2201      	movs	r2, #1
 8004c14:	4804      	ldr	r0, [pc, #16]	; (8004c28 <ESCOOTER_Driving_Start+0x18>)
 8004c16:	2120      	movs	r1, #32
 8004c18:	f7fe fe5a 	bl	80038d0 <HAL_GPIO_WritePin>
	/*Set acceleration ramp*/
	throttle_Current = modeControl.TARGET_IQ;
 8004c1c:	4a03      	ldr	r2, [pc, #12]	; (8004c2c <ESCOOTER_Driving_Start+0x1c>)
 8004c1e:	4b04      	ldr	r3, [pc, #16]	; (8004c30 <ESCOOTER_Driving_Start+0x20>)
 8004c20:	8812      	ldrh	r2, [r2, #0]
 8004c22:	801a      	strh	r2, [r3, #0]
}
 8004c24:	bd08      	pop	{r3, pc}
 8004c26:	bf00      	nop
 8004c28:	40020000 	.word	0x40020000
 8004c2c:	20001108 	.word	0x20001108
 8004c30:	20001112 	.word	0x20001112

08004c34 <ESCOOTER_Driving_Stop>:

void ESCOOTER_Driving_Stop()
{
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,GPIO_PIN_RESET);
 8004c34:	4802      	ldr	r0, [pc, #8]	; (8004c40 <ESCOOTER_Driving_Stop+0xc>)
 8004c36:	2200      	movs	r2, #0
 8004c38:	2120      	movs	r1, #32
 8004c3a:	f7fe be49 	b.w	80038d0 <HAL_GPIO_WritePin>
 8004c3e:	bf00      	nop
 8004c40:	40020000 	.word	0x40020000

08004c44 <ESboot>:
ESCOOTER_Physical_State pstateHandle; //Monitor the Escooter's Electrical & Mechanical Parameters
ESCOOTER_BrakeANDThrottleInput inputHandle;

/*ESboot() must be called when the E-Scooter is turned-on！*/
void ESboot()
{
 8004c44:	b510      	push	{r4, lr}
    tempHandle.need_KICK_OFF    = true;
    tempHandle.ESCOOTER_MOVE    = false;
    tempHandle.systemError      = false;

    /*Save the current driving status. IDLE Mode is set in Default*/
    ESCOOTER_saveStatus(opInitHandle.bDrivingState);
 8004c46:	4a0b      	ldr	r2, [pc, #44]	; (8004c74 <ESboot+0x30>)
    tempHandle.bDrivingState    = DRIVING_IDLE;
 8004c48:	4b0b      	ldr	r3, [pc, #44]	; (8004c78 <ESboot+0x34>)
    /*Create The Task for controlling the E-Scooter Driving Status !!!*/
    //osThreadDef(driving,ESCOOTER_DrivingTaskControl,osPriorityBelowNormal,0,128);
    //opInitHandle.EScooterInDriving = osThreadCreate(osThread(driving),NULL);

    /*Initialize the E-Scooter in Ambler Mode*/
    ESCOOTER_DrivingModeSetDefault(&inputHandle);
 8004c4a:	4c0c      	ldr	r4, [pc, #48]	; (8004c7c <ESboot+0x38>)
    ESCOOTER_saveStatus(opInitHandle.bDrivingState);
 8004c4c:	7810      	ldrb	r0, [r2, #0]
    tempHandle.bDrivingState    = DRIVING_IDLE;
 8004c4e:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    tempHandle.BRAKE_Trigger    = false;
 8004c52:	2200      	movs	r2, #0
    tempHandle.bDrivingState    = DRIVING_IDLE;
 8004c54:	6019      	str	r1, [r3, #0]
    tempHandle.BRAKE_Trigger    = false;
 8004c56:	809a      	strh	r2, [r3, #4]
    ESCOOTER_saveStatus(opInitHandle.bDrivingState);
 8004c58:	f7ff ffc4 	bl	8004be4 <ESCOOTER_saveStatus>
    ESCOOTER_DrivingModeSetDefault(&inputHandle);
 8004c5c:	4620      	mov	r0, r4
 8004c5e:	f000 f90b 	bl	8004e78 <ESCOOTER_DrivingModeSetDefault>
    ESCOOTER_DetermineDrivingMode(&inputHandle);
 8004c62:	4620      	mov	r0, r4
 8004c64:	f000 f952 	bl	8004f0c <ESCOOTER_DetermineDrivingMode>

    /*Initialize the Motor Parameters*/
    ESCOOTER_PhysicalParameterInit(&pstateHandle);


}
 8004c68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ESCOOTER_PhysicalParameterInit(&pstateHandle);
 8004c6c:	4804      	ldr	r0, [pc, #16]	; (8004c80 <ESboot+0x3c>)
 8004c6e:	f000 b8e7 	b.w	8004e40 <ESCOOTER_PhysicalParameterInit>
 8004c72:	bf00      	nop
 8004c74:	20001124 	.word	0x20001124
 8004c78:	20001140 	.word	0x20001140
 8004c7c:	20001118 	.word	0x20001118
 8004c80:	20001130 	.word	0x20001130

08004c84 <ESCOOTER_DriveModeConfig>:
/*Triggered by Dashboard's commands! Configure the driving mode by adjusting the current, speed and acceleration ramp limits*/
/*Save those parameters in form of &inputHandle pointer*/
/*Input some dummy commands -> check it*/
/*It's assumed that the E-Scooter is in IDLE State*/
void ESCOOTER_DriveModeConfig(int16_t max_IQ, int16_t allowable_rpm, uint16_t acceleration_ramp)
{
 8004c84:	4684      	mov	ip, r0
 8004c86:	4613      	mov	r3, r2
	ESCOOTER_ConfigDrivingMode(&inputHandle,max_IQ,allowable_rpm,acceleration_ramp);
 8004c88:	4802      	ldr	r0, [pc, #8]	; (8004c94 <ESCOOTER_DriveModeConfig+0x10>)
 8004c8a:	460a      	mov	r2, r1
 8004c8c:	4661      	mov	r1, ip
 8004c8e:	f000 b903 	b.w	8004e98 <ESCOOTER_ConfigDrivingMode>
 8004c92:	bf00      	nop
 8004c94:	20001118 	.word	0x20001118

08004c98 <ESCOOTER_InputThrottleSignal>:

/**To be called by motor control protocol**/
/**Before running the Main Task, please verify this function carefully**/
/*Input some dummy commands -> check it*/
void ESCOOTER_InputThrottleSignal(int16_t targetCurrent)
{
 8004c98:	b510      	push	{r4, lr}
	inputHandle.TARGET_IQ = targetCurrent;
 8004c9a:	4c07      	ldr	r4, [pc, #28]	; (8004cb8 <ESCOOTER_InputThrottleSignal+0x20>)
{
 8004c9c:	4603      	mov	r3, r0

	/*to give the message if the throttle is pressed or not ! */
	tempHandle.THROTTLE_Pressed = ESCOOTER_ThrottleSignalTrigger(&inputHandle);
 8004c9e:	4620      	mov	r0, r4
	inputHandle.TARGET_IQ = targetCurrent;
 8004ca0:	8023      	strh	r3, [r4, #0]
	tempHandle.THROTTLE_Pressed = ESCOOTER_ThrottleSignalTrigger(&inputHandle);
 8004ca2:	f7ff ff8d 	bl	8004bc0 <ESCOOTER_ThrottleSignalTrigger>
 8004ca6:	4b05      	ldr	r3, [pc, #20]	; (8004cbc <ESCOOTER_InputThrottleSignal+0x24>)
 8004ca8:	4602      	mov	r2, r0

	/*Send the Iq signal to the ESCOOTER_DRIVING (?)*/
	ESCOOTER_Set_Limit(&inputHandle);
 8004caa:	4620      	mov	r0, r4

}
 8004cac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tempHandle.THROTTLE_Pressed = ESCOOTER_ThrottleSignalTrigger(&inputHandle);
 8004cb0:	709a      	strb	r2, [r3, #2]
	ESCOOTER_Set_Limit(&inputHandle);
 8004cb2:	f7ff bfa3 	b.w	8004bfc <ESCOOTER_Set_Limit>
 8004cb6:	bf00      	nop
 8004cb8:	20001118 	.word	0x20001118
 8004cbc:	20001140 	.word	0x20001140

08004cc0 <ESCOOTER_InputBrakeSignal>:

/**To be called by motor control protocol**/
/**Before running the Main Task, please verify this function carefully**/
/*Input some dummy commands -> check it*/
void ESCOOTER_InputBrakeSignal()
{
 8004cc0:	b510      	push	{r4, lr}
	tempHandle.BRAKE_Trigger = ESCOOTER_BrakeSignalTrigger(&tempHandle,&inputHandle);
 8004cc2:	4c03      	ldr	r4, [pc, #12]	; (8004cd0 <ESCOOTER_InputBrakeSignal+0x10>)
 8004cc4:	4903      	ldr	r1, [pc, #12]	; (8004cd4 <ESCOOTER_InputBrakeSignal+0x14>)
 8004cc6:	4620      	mov	r0, r4
 8004cc8:	f7ff ff80 	bl	8004bcc <ESCOOTER_BrakeSignalTrigger>
 8004ccc:	7060      	strb	r0, [r4, #1]

	/*to give the message if the brake is pressed or not*/
}
 8004cce:	bd10      	pop	{r4, pc}
 8004cd0:	20001140 	.word	0x20001140
 8004cd4:	20001118 	.word	0x20001118

08004cd8 <ESCOOTER_DEBUG_CancelBrakeSignal>:
/**To be called by motor control protocol**/
/**Before running the Main Task, please verify this function carefully**/
/*Input some dummy commands -> check it*/
void ESCOOTER_DEBUG_CancelBrakeSignal()
{
	ESCOOTER_DEBUG_ReleaseBrakeSignal(&tempHandle,&inputHandle);
 8004cd8:	4901      	ldr	r1, [pc, #4]	; (8004ce0 <ESCOOTER_DEBUG_CancelBrakeSignal+0x8>)
 8004cda:	4802      	ldr	r0, [pc, #8]	; (8004ce4 <ESCOOTER_DEBUG_CancelBrakeSignal+0xc>)
 8004cdc:	f7ff bf7c 	b.w	8004bd8 <ESCOOTER_DEBUG_ReleaseBrakeSignal>
 8004ce0:	20001118 	.word	0x20001118
 8004ce4:	20001140 	.word	0x20001140

08004ce8 <ESCOOTER_SendReportStatus>:
    return false;
}

void ESCOOTER_SendReportStatus(bool error)
{
	tempHandle.systemError = error;
 8004ce8:	4b01      	ldr	r3, [pc, #4]	; (8004cf0 <ESCOOTER_SendReportStatus+0x8>)
 8004cea:	7158      	strb	r0, [r3, #5]
}
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop
 8004cf0:	20001140 	.word	0x20001140

08004cf4 <ESCOOTER_StateMachineHighFrequencyTask>:
/*Please check all the functionalities e.g. brake,throttle,parameter inputs carefully before running the High Frequency Task*/
/*Input some dummy commands -> check it*/
uint8_t failure = 0;
uint16_t error = 0;
__weak void ESCOOTER_StateMachineHighFrequencyTask(void const *argument)
{
 8004cf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     for(;;)
     {
    	  /*Before using the MC_API to track the Motor's status, to ensure the State Machine runs properly, it's better to input dummy data to check if the
    	   *logic is right*/
           //uint16_t error = MC_GetOccurredFaultsMotor1();
           ESCOOTER_saveStatus(tempHandle.bDrivingState);
 8004cf8:	4c2c      	ldr	r4, [pc, #176]	; (8004dac <ESCOOTER_StateMachineHighFrequencyTask+0xb8>)
 8004cfa:	4d2d      	ldr	r5, [pc, #180]	; (8004db0 <ESCOOTER_StateMachineHighFrequencyTask+0xbc>)
 8004cfc:	7820      	ldrb	r0, [r4, #0]
 8004cfe:	4f2d      	ldr	r7, [pc, #180]	; (8004db4 <ESCOOTER_StateMachineHighFrequencyTask+0xc0>)
 8004d00:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 8004db8 <ESCOOTER_StateMachineHighFrequencyTask+0xc4>
           /*To verify the state machine for debug purpose, please un-comment the following lines: */
    	   //int32_t status = 0;
         ESCOOTER_DRIVING_CONTROL();
         if(failure == 0)
         {
             tempHandle.THROTTLE_Pressed = true;
 8004d04:	2601      	movs	r6, #1
            	 tempHandle.bDrivingState = DRIVING_STOP;
            	 tempHandle.BRAKE_Trigger = false;
            	 tempHandle.ESCOOTER_MOVE = false;
            	 ESCOOTER_saveStatus(tempHandle.bDrivingState);
            	 HAL_Delay(1500);
            	 tempHandle.bDrivingState = DRIVING_IDLE;
 8004d06:	f04f 0800 	mov.w	r8, #0
           ESCOOTER_saveStatus(tempHandle.bDrivingState);
 8004d0a:	f7ff ff6b 	bl	8004be4 <ESCOOTER_saveStatus>
	if(ESCOOTER_getStatus() == DRIVING_IDLE)
 8004d0e:	f7ff ff6f 	bl	8004bf0 <ESCOOTER_getStatus>
 8004d12:	b1d8      	cbz	r0, 8004d4c <ESCOOTER_StateMachineHighFrequencyTask+0x58>
	else if (ESCOOTER_getStatus() == DRIVING_START)
 8004d14:	f7ff ff6c 	bl	8004bf0 <ESCOOTER_getStatus>
 8004d18:	2801      	cmp	r0, #1
 8004d1a:	d034      	beq.n	8004d86 <ESCOOTER_StateMachineHighFrequencyTask+0x92>
	else if (ESCOOTER_getStatus() == DRIVING_STOP)
 8004d1c:	f7ff ff68 	bl	8004bf0 <ESCOOTER_getStatus>
 8004d20:	2802      	cmp	r0, #2
 8004d22:	d013      	beq.n	8004d4c <ESCOOTER_StateMachineHighFrequencyTask+0x58>
         if(failure == 0)
 8004d24:	782b      	ldrb	r3, [r5, #0]
 8004d26:	b903      	cbnz	r3, 8004d2a <ESCOOTER_StateMachineHighFrequencyTask+0x36>
             tempHandle.THROTTLE_Pressed = true;
 8004d28:	70a6      	strb	r6, [r4, #2]
         if ((tempHandle.ESCOOTER_MOVE == false) && (tempHandle.need_KICK_OFF == true))
 8004d2a:	7923      	ldrb	r3, [r4, #4]
 8004d2c:	b18b      	cbz	r3, 8004d52 <ESCOOTER_StateMachineHighFrequencyTask+0x5e>
             if (tempHandle.BRAKE_Trigger == true && (inputHandle.TARGET_IQ <= 6) )
 8004d2e:	7863      	ldrb	r3, [r4, #1]
 8004d30:	b11b      	cbz	r3, 8004d3a <ESCOOTER_StateMachineHighFrequencyTask+0x46>
 8004d32:	f9b9 3000 	ldrsh.w	r3, [r9]
 8004d36:	2b06      	cmp	r3, #6
 8004d38:	dd28      	ble.n	8004d8c <ESCOOTER_StateMachineHighFrequencyTask+0x98>
                 //HAL_Delay(2000);
             }

             /*Emergency Stop due to motor error, system error, ..... Once error occurs, system jumps to the following instructions... */
             /*As the MCSDK automatically stops the motor,we no need to call the driving stop functions....*/
             else if(error != 0)
 8004d3a:	883b      	ldrh	r3, [r7, #0]
 8004d3c:	bb33      	cbnz	r3, 8004d8c <ESCOOTER_StateMachineHighFrequencyTask+0x98>
           ESCOOTER_saveStatus(tempHandle.bDrivingState);
 8004d3e:	7820      	ldrb	r0, [r4, #0]
 8004d40:	f7ff ff50 	bl	8004be4 <ESCOOTER_saveStatus>
	if(ESCOOTER_getStatus() == DRIVING_IDLE)
 8004d44:	f7ff ff54 	bl	8004bf0 <ESCOOTER_getStatus>
 8004d48:	2800      	cmp	r0, #0
 8004d4a:	d1e3      	bne.n	8004d14 <ESCOOTER_StateMachineHighFrequencyTask+0x20>
		ESCOOTER_Driving_Stop();
 8004d4c:	f7ff ff72 	bl	8004c34 <ESCOOTER_Driving_Stop>
 8004d50:	e7e8      	b.n	8004d24 <ESCOOTER_StateMachineHighFrequencyTask+0x30>
         if ((tempHandle.ESCOOTER_MOVE == false) && (tempHandle.need_KICK_OFF == true))
 8004d52:	78e3      	ldrb	r3, [r4, #3]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d0f2      	beq.n	8004d3e <ESCOOTER_StateMachineHighFrequencyTask+0x4a>
             if ( (ESCOOTER_IsCarReady() == true) && (tempHandle.THROTTLE_Pressed == true) && (error == 0)
 8004d58:	78a3      	ldrb	r3, [r4, #2]
 8004d5a:	b16b      	cbz	r3, 8004d78 <ESCOOTER_StateMachineHighFrequencyTask+0x84>
 8004d5c:	883b      	ldrh	r3, [r7, #0]
 8004d5e:	b95b      	cbnz	r3, 8004d78 <ESCOOTER_StateMachineHighFrequencyTask+0x84>
                   && (tempHandle.BRAKE_Trigger == false) )
 8004d60:	7863      	ldrb	r3, [r4, #1]
 8004d62:	b94b      	cbnz	r3, 8004d78 <ESCOOTER_StateMachineHighFrequencyTask+0x84>
            	 tempHandle.need_KICK_OFF = false;
 8004d64:	f44f 7380 	mov.w	r3, #256	; 0x100
            	 ESCOOTER_saveStatus(tempHandle.bDrivingState);
 8004d68:	2001      	movs	r0, #1
            	 tempHandle.need_KICK_OFF = false;
 8004d6a:	f8a4 3003 	strh.w	r3, [r4, #3]
            	 tempHandle.bDrivingState = DRIVING_START;
 8004d6e:	7026      	strb	r6, [r4, #0]
            	 ESCOOTER_saveStatus(tempHandle.bDrivingState);
 8004d70:	f7ff ff38 	bl	8004be4 <ESCOOTER_saveStatus>
           ESCOOTER_saveStatus(tempHandle.bDrivingState);
 8004d74:	7820      	ldrb	r0, [r4, #0]
            	 ESCOOTER_saveStatus(tempHandle.bDrivingState);
 8004d76:	e7c8      	b.n	8004d0a <ESCOOTER_StateMachineHighFrequencyTask+0x16>
            	 ESCOOTER_saveStatus(tempHandle.bDrivingState);
 8004d78:	2000      	movs	r0, #0
            	 tempHandle.bDrivingState = DRIVING_IDLE;
 8004d7a:	f884 8000 	strb.w	r8, [r4]
            	 ESCOOTER_saveStatus(tempHandle.bDrivingState);
 8004d7e:	f7ff ff31 	bl	8004be4 <ESCOOTER_saveStatus>
           ESCOOTER_saveStatus(tempHandle.bDrivingState);
 8004d82:	7820      	ldrb	r0, [r4, #0]
 8004d84:	e7c1      	b.n	8004d0a <ESCOOTER_StateMachineHighFrequencyTask+0x16>
        ESCOOTER_Driving_Start();
 8004d86:	f7ff ff43 	bl	8004c10 <ESCOOTER_Driving_Start>
 8004d8a:	e7cb      	b.n	8004d24 <ESCOOTER_StateMachineHighFrequencyTask+0x30>
            	 tempHandle.bDrivingState = DRIVING_STOP;
 8004d8c:	2002      	movs	r0, #2
            	 tempHandle.BRAKE_Trigger = false;
 8004d8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
            	 tempHandle.bDrivingState = DRIVING_STOP;
 8004d92:	7020      	strb	r0, [r4, #0]
            	 tempHandle.BRAKE_Trigger = false;
 8004d94:	f8c4 3001 	str.w	r3, [r4, #1]
            	 ESCOOTER_saveStatus(tempHandle.bDrivingState);
 8004d98:	f7ff ff24 	bl	8004be4 <ESCOOTER_saveStatus>
            	 HAL_Delay(1500);
 8004d9c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004da0:	f7fe f9d4 	bl	800314c <HAL_Delay>
            	 tempHandle.bDrivingState = DRIVING_IDLE;
 8004da4:	f884 8000 	strb.w	r8, [r4]
 8004da8:	2000      	movs	r0, #0
 8004daa:	e7ae      	b.n	8004d0a <ESCOOTER_StateMachineHighFrequencyTask+0x16>
 8004dac:	20001140 	.word	0x20001140
 8004db0:	20001116 	.word	0x20001116
 8004db4:	20001114 	.word	0x20001114
 8004db8:	20001118 	.word	0x20001118

08004dbc <ESCOOTER_ParameterMonitoring>:
/*Input some dummy commands -> check it*/
/*It's better to call this task regularly with specific time interval*/
uint16_t timer_interval = PERIODIC_CAPTURE_TIME;
uint16_t task_Counter = 0;
void ESCOOTER_ParameterMonitoring(void const *argument)
{
 8004dbc:	b580      	push	{r7, lr}
    for(;;)
    {
    	if((task_Counter % 2) == 0)
 8004dbe:	4e0c      	ldr	r6, [pc, #48]	; (8004df0 <ESCOOTER_ParameterMonitoring+0x34>)
 8004dc0:	4d0c      	ldr	r5, [pc, #48]	; (8004df4 <ESCOOTER_ParameterMonitoring+0x38>)
 8004dc2:	8833      	ldrh	r3, [r6, #0]
 8004dc4:	4f0c      	ldr	r7, [pc, #48]	; (8004df8 <ESCOOTER_ParameterMonitoring+0x3c>)
{
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	466c      	mov	r4, sp
    	if((task_Counter % 2) == 0)
 8004dca:	07db      	lsls	r3, r3, #31
    	{
        	pstateHandle = ESCOOTER_PhysicalParameterMonitoring(&pstateHandle);
 8004dcc:	4629      	mov	r1, r5
 8004dce:	4620      	mov	r0, r4
    	if((task_Counter % 2) == 0)
 8004dd0:	d405      	bmi.n	8004dde <ESCOOTER_ParameterMonitoring+0x22>
        	pstateHandle = ESCOOTER_PhysicalParameterMonitoring(&pstateHandle);
 8004dd2:	f000 f83b 	bl	8004e4c <ESCOOTER_PhysicalParameterMonitoring>
 8004dd6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004dda:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    	}
    	osDelay(timer_interval);
 8004dde:	8838      	ldrh	r0, [r7, #0]
 8004de0:	f000 f946 	bl	8005070 <osDelay>
    	task_Counter++;
 8004de4:	8833      	ldrh	r3, [r6, #0]
 8004de6:	3301      	adds	r3, #1
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	8033      	strh	r3, [r6, #0]
    	if((task_Counter % 2) == 0)
 8004dec:	e7ed      	b.n	8004dca <ESCOOTER_ParameterMonitoring+0xe>
 8004dee:	bf00      	nop
 8004df0:	2000113c 	.word	0x2000113c
 8004df4:	20001130 	.word	0x20001130
 8004df8:	20000584 	.word	0x20000584

08004dfc <ESCOOTER_Stop_Driving_Task>:
    }
}

void ESCOOTER_Stop_Driving_Task()
{
 8004dfc:	b510      	push	{r4, lr}
	/*Failure occurs when the E-Scooter is in operation*/
	if((ESCOOTER_getStatus() == DRIVING_START) && (tempHandle.ESCOOTER_MOVE == true))
 8004dfe:	f7ff fef7 	bl	8004bf0 <ESCOOTER_getStatus>
 8004e02:	2801      	cmp	r0, #1
 8004e04:	d102      	bne.n	8004e0c <ESCOOTER_Stop_Driving_Task+0x10>
 8004e06:	4c0c      	ldr	r4, [pc, #48]	; (8004e38 <ESCOOTER_Stop_Driving_Task+0x3c>)
 8004e08:	7922      	ldrb	r2, [r4, #4]
 8004e0a:	b91a      	cbnz	r2, 8004e14 <ESCOOTER_Stop_Driving_Task+0x18>
	else if (ESCOOTER_getStatus() == DRIVING_IDLE)
	{
		//vTaskSuspend(opInitHandle.EScooterInDriving);
	}
	//osThreadTerminate(opInitHandle.EScooterInDriving);
}
 8004e0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	else if (ESCOOTER_getStatus() == DRIVING_IDLE)
 8004e10:	f7ff beee 	b.w	8004bf0 <ESCOOTER_getStatus>
		failure = 1;
 8004e14:	4a09      	ldr	r2, [pc, #36]	; (8004e3c <ESCOOTER_Stop_Driving_Task+0x40>)
 8004e16:	4603      	mov	r3, r0
		tempHandle.BRAKE_Trigger = false;
 8004e18:	f44f 3180 	mov.w	r1, #65536	; 0x10000
		tempHandle.bDrivingState = DRIVING_STOP;
 8004e1c:	2002      	movs	r0, #2
		failure = 1;
 8004e1e:	7013      	strb	r3, [r2, #0]
		tempHandle.BRAKE_Trigger = false;
 8004e20:	f8c4 1001 	str.w	r1, [r4, #1]
		tempHandle.bDrivingState = DRIVING_STOP;
 8004e24:	7020      	strb	r0, [r4, #0]
		ESCOOTER_saveStatus(tempHandle.bDrivingState);
 8004e26:	f7ff fedd 	bl	8004be4 <ESCOOTER_saveStatus>
		HAL_Delay(1500);
 8004e2a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004e2e:	f7fe f98d 	bl	800314c <HAL_Delay>
		tempHandle.bDrivingState = DRIVING_IDLE;
 8004e32:	2300      	movs	r3, #0
 8004e34:	7023      	strb	r3, [r4, #0]
}
 8004e36:	bd10      	pop	{r4, pc}
 8004e38:	20001140 	.word	0x20001140
 8004e3c:	20001116 	.word	0x20001116

08004e40 <ESCOOTER_PhysicalParameterInit>:
#include "mc_api.h"
#include "main.h"

void ESCOOTER_PhysicalParameterInit(ESCOOTER_Physical_State *stateHandle)
{
	stateHandle->current_speed = 0;
 8004e40:	2300      	movs	r3, #0
 8004e42:	6003      	str	r3, [r0, #0]
	stateHandle->phase_current = 0;
	stateHandle->phase_voltage = 0;
 8004e44:	8083      	strh	r3, [r0, #4]
	stateHandle->motor_status  = 0;
 8004e46:	6083      	str	r3, [r0, #8]
}
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop

08004e4c <ESCOOTER_PhysicalParameterMonitoring>:

ESCOOTER_Physical_State ESCOOTER_PhysicalParameterMonitoring(ESCOOTER_Physical_State *stateHandle)
{
 8004e4c:	b538      	push	{r3, r4, r5, lr}
 8004e4e:	460c      	mov	r4, r1
 8004e50:	4605      	mov	r5, r0
	/*You could test it by inputing dummy data */
    stateHandle->current_speed = MC_GetMecSpeedAverageMotor1();
 8004e52:	f7fb fe53 	bl	8000afc <MC_GetMecSpeedAverageMotor1>
 8004e56:	8020      	strh	r0, [r4, #0]
    stateHandle->phase_current = MC_GetPhaseCurrentAmplitudeMotor1();
 8004e58:	f7fb fe56 	bl	8000b08 <MC_GetPhaseCurrentAmplitudeMotor1>
 8004e5c:	8060      	strh	r0, [r4, #2]
    stateHandle->phase_voltage = MC_GetPhaseVoltageAmplitudeMotor1();
 8004e5e:	f7fb fe59 	bl	8000b14 <MC_GetPhaseVoltageAmplitudeMotor1>
 8004e62:	80a0      	strh	r0, [r4, #4]
    stateHandle->motor_status = (int32_t)MC_GetSTMStateMotor1();
 8004e64:	f7fb fe5c 	bl	8000b20 <MC_GetSTMStateMotor1>
 8004e68:	60a0      	str	r0, [r4, #8]
    return *stateHandle;
 8004e6a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004e6e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8004e72:	4628      	mov	r0, r5
 8004e74:	bd38      	pop	{r3, r4, r5, pc}
 8004e76:	bf00      	nop

08004e78 <ESCOOTER_DrivingModeSetDefault>:

EScooter_Driving_Mode driving_mode;

/*Static + Default*/
void ESCOOTER_DrivingModeSetDefault(ESCOOTER_BrakeANDThrottleInput *limit)
{
 8004e78:	b410      	push	{r4}
   limit->TARGET_IQ = 0;
   limit->IQ_LIMIT = 6500;
   limit->SPEED_LIMIT = 270;
 8004e7a:	f44f 7187 	mov.w	r1, #270	; 0x10e
   limit->TARGET_IQ = 0;
 8004e7e:	4c05      	ldr	r4, [pc, #20]	; (8004e94 <ESCOOTER_DrivingModeSetDefault+0x1c>)
 8004e80:	6004      	str	r4, [r0, #0]
   limit->RAMP_DURATION = 4000;
 8004e82:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
   ESCOOTER_Set_Limit(limit);
}
 8004e86:	f85d 4b04 	ldr.w	r4, [sp], #4
   limit->SPEED_LIMIT = 270;
 8004e8a:	8081      	strh	r1, [r0, #4]
   limit->RAMP_DURATION = 4000;
 8004e8c:	80c2      	strh	r2, [r0, #6]
   ESCOOTER_Set_Limit(limit);
 8004e8e:	f7ff beb5 	b.w	8004bfc <ESCOOTER_Set_Limit>
 8004e92:	bf00      	nop
 8004e94:	19640000 	.word	0x19640000

08004e98 <ESCOOTER_ConfigDrivingMode>:

/*Dynamic*/
void ESCOOTER_ConfigDrivingMode(ESCOOTER_BrakeANDThrottleInput *limit,int16_t max_IQ, int16_t allowable_rpm, uint16_t acceleration_ramp)
{
 8004e98:	b500      	push	{lr}
{
	int16_t max_Current[3] = {6500,11450,15750};
	int16_t max_RPM[3]     = {270,480,663};
	int16_t max_Ramp[3]    = {4000,3000,2000};

	if ( ((limit->IQ_LIMIT) == max_Current[0]) && ((limit->SPEED_LIMIT) == max_RPM[0]) && ((limit->RAMP_DURATION) == max_Ramp[0]) )
 8004e9a:	f641 1e64 	movw	lr, #6500	; 0x1964
	limit->TARGET_IQ = 0;
 8004e9e:	f04f 0c00 	mov.w	ip, #0
	if ( ((limit->IQ_LIMIT) == max_Current[0]) && ((limit->SPEED_LIMIT) == max_RPM[0]) && ((limit->RAMP_DURATION) == max_Ramp[0]) )
 8004ea2:	4571      	cmp	r1, lr
	limit->TARGET_IQ = 0;
 8004ea4:	f8a0 c000 	strh.w	ip, [r0]
	limit->IQ_LIMIT = max_IQ;
 8004ea8:	8041      	strh	r1, [r0, #2]
	limit->SPEED_LIMIT = allowable_rpm;
 8004eaa:	8082      	strh	r2, [r0, #4]
	limit->RAMP_DURATION = acceleration_ramp;
 8004eac:	80c3      	strh	r3, [r0, #6]
	if ( ((limit->IQ_LIMIT) == max_Current[0]) && ((limit->SPEED_LIMIT) == max_RPM[0]) && ((limit->RAMP_DURATION) == max_Ramp[0]) )
 8004eae:	d01a      	beq.n	8004ee6 <ESCOOTER_ConfigDrivingMode+0x4e>
	{
       driving_mode = BRAKE_AND_THROTTLE_SPEED_MODE_AMBLE;
	}
	else if ( ((limit->IQ_LIMIT) == max_Current[1]) && ((limit->SPEED_LIMIT) == max_RPM[1]) && ((limit->RAMP_DURATION) == max_Ramp[1]) )
 8004eb0:	f642 4cba 	movw	ip, #11450	; 0x2cba
 8004eb4:	4561      	cmp	r1, ip
 8004eb6:	d00b      	beq.n	8004ed0 <ESCOOTER_ConfigDrivingMode+0x38>
	{
	   driving_mode = BRAKE_AND_THROTTLE_SPEED_MODE_LEISURE;
	}
	else if ( ((limit->IQ_LIMIT) == max_Current[2]) && ((limit->SPEED_LIMIT) == max_RPM[2]) && ((limit->RAMP_DURATION) == max_Ramp[2]) )
 8004eb8:	f643 5c86 	movw	ip, #15750	; 0x3d86
 8004ebc:	4561      	cmp	r1, ip
 8004ebe:	d103      	bne.n	8004ec8 <ESCOOTER_ConfigDrivingMode+0x30>
 8004ec0:	f240 2197 	movw	r1, #663	; 0x297
 8004ec4:	428a      	cmp	r2, r1
 8004ec6:	d018      	beq.n	8004efa <ESCOOTER_ConfigDrivingMode+0x62>
}
 8004ec8:	f85d eb04 	ldr.w	lr, [sp], #4
	ESCOOTER_Set_Limit(limit);
 8004ecc:	f7ff be96 	b.w	8004bfc <ESCOOTER_Set_Limit>
	else if ( ((limit->IQ_LIMIT) == max_Current[1]) && ((limit->SPEED_LIMIT) == max_RPM[1]) && ((limit->RAMP_DURATION) == max_Ramp[1]) )
 8004ed0:	f5b2 7ff0 	cmp.w	r2, #480	; 0x1e0
 8004ed4:	d1f8      	bne.n	8004ec8 <ESCOOTER_ConfigDrivingMode+0x30>
 8004ed6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d1f4      	bne.n	8004ec8 <ESCOOTER_ConfigDrivingMode+0x30>
	   driving_mode = BRAKE_AND_THROTTLE_SPEED_MODE_LEISURE;
 8004ede:	4b0a      	ldr	r3, [pc, #40]	; (8004f08 <ESCOOTER_ConfigDrivingMode+0x70>)
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	701a      	strb	r2, [r3, #0]
 8004ee4:	e7f0      	b.n	8004ec8 <ESCOOTER_ConfigDrivingMode+0x30>
	if ( ((limit->IQ_LIMIT) == max_Current[0]) && ((limit->SPEED_LIMIT) == max_RPM[0]) && ((limit->RAMP_DURATION) == max_Ramp[0]) )
 8004ee6:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
 8004eea:	d1ed      	bne.n	8004ec8 <ESCOOTER_ConfigDrivingMode+0x30>
 8004eec:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8004ef0:	d1ea      	bne.n	8004ec8 <ESCOOTER_ConfigDrivingMode+0x30>
       driving_mode = BRAKE_AND_THROTTLE_SPEED_MODE_AMBLE;
 8004ef2:	4b05      	ldr	r3, [pc, #20]	; (8004f08 <ESCOOTER_ConfigDrivingMode+0x70>)
 8004ef4:	f883 c000 	strb.w	ip, [r3]
 8004ef8:	e7e6      	b.n	8004ec8 <ESCOOTER_ConfigDrivingMode+0x30>
	else if ( ((limit->IQ_LIMIT) == max_Current[2]) && ((limit->SPEED_LIMIT) == max_RPM[2]) && ((limit->RAMP_DURATION) == max_Ramp[2]) )
 8004efa:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004efe:	d1e3      	bne.n	8004ec8 <ESCOOTER_ConfigDrivingMode+0x30>
	{
	   driving_mode = BRAKE_AND_THROTTLE_SPEED_MODE_SPORTS;
 8004f00:	4b01      	ldr	r3, [pc, #4]	; (8004f08 <ESCOOTER_ConfigDrivingMode+0x70>)
 8004f02:	2202      	movs	r2, #2
 8004f04:	701a      	strb	r2, [r3, #0]
 8004f06:	e7df      	b.n	8004ec8 <ESCOOTER_ConfigDrivingMode+0x30>
 8004f08:	2000114c 	.word	0x2000114c

08004f0c <ESCOOTER_DetermineDrivingMode>:
	if ( ((limit->IQ_LIMIT) == max_Current[0]) && ((limit->SPEED_LIMIT) == max_RPM[0]) && ((limit->RAMP_DURATION) == max_Ramp[0]) )
 8004f0c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8004f10:	f641 1264 	movw	r2, #6500	; 0x1964
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d01c      	beq.n	8004f52 <ESCOOTER_DetermineDrivingMode+0x46>
	else if ( ((limit->IQ_LIMIT) == max_Current[1]) && ((limit->SPEED_LIMIT) == max_RPM[1]) && ((limit->RAMP_DURATION) == max_Ramp[1]) )
 8004f18:	f642 42ba 	movw	r2, #11450	; 0x2cba
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d00a      	beq.n	8004f36 <ESCOOTER_DetermineDrivingMode+0x2a>
	else if ( ((limit->IQ_LIMIT) == max_Current[2]) && ((limit->SPEED_LIMIT) == max_RPM[2]) && ((limit->RAMP_DURATION) == max_Ramp[2]) )
 8004f20:	f643 5286 	movw	r2, #15750	; 0x3d86
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d105      	bne.n	8004f34 <ESCOOTER_DetermineDrivingMode+0x28>
 8004f28:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8004f2c:	f240 2397 	movw	r3, #663	; 0x297
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d01b      	beq.n	8004f6c <ESCOOTER_DetermineDrivingMode+0x60>
	}
	else
	{
		driving_mode = driving_mode;
	}
}
 8004f34:	4770      	bx	lr
	else if ( ((limit->IQ_LIMIT) == max_Current[1]) && ((limit->SPEED_LIMIT) == max_RPM[1]) && ((limit->RAMP_DURATION) == max_Ramp[1]) )
 8004f36:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8004f3a:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8004f3e:	d1f9      	bne.n	8004f34 <ESCOOTER_DetermineDrivingMode+0x28>
 8004f40:	88c2      	ldrh	r2, [r0, #6]
 8004f42:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d1f4      	bne.n	8004f34 <ESCOOTER_DetermineDrivingMode+0x28>
	   driving_mode = BRAKE_AND_THROTTLE_SPEED_MODE_LEISURE;
 8004f4a:	4b0c      	ldr	r3, [pc, #48]	; (8004f7c <ESCOOTER_DetermineDrivingMode+0x70>)
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	701a      	strb	r2, [r3, #0]
 8004f50:	4770      	bx	lr
	if ( ((limit->IQ_LIMIT) == max_Current[0]) && ((limit->SPEED_LIMIT) == max_RPM[0]) && ((limit->RAMP_DURATION) == max_Ramp[0]) )
 8004f52:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8004f56:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8004f5a:	d1eb      	bne.n	8004f34 <ESCOOTER_DetermineDrivingMode+0x28>
 8004f5c:	88c3      	ldrh	r3, [r0, #6]
 8004f5e:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8004f62:	d1e7      	bne.n	8004f34 <ESCOOTER_DetermineDrivingMode+0x28>
       driving_mode = BRAKE_AND_THROTTLE_SPEED_MODE_AMBLE;
 8004f64:	4b05      	ldr	r3, [pc, #20]	; (8004f7c <ESCOOTER_DetermineDrivingMode+0x70>)
 8004f66:	2200      	movs	r2, #0
 8004f68:	701a      	strb	r2, [r3, #0]
 8004f6a:	4770      	bx	lr
	else if ( ((limit->IQ_LIMIT) == max_Current[2]) && ((limit->SPEED_LIMIT) == max_RPM[2]) && ((limit->RAMP_DURATION) == max_Ramp[2]) )
 8004f6c:	88c3      	ldrh	r3, [r0, #6]
 8004f6e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004f72:	d1df      	bne.n	8004f34 <ESCOOTER_DetermineDrivingMode+0x28>
	   driving_mode = BRAKE_AND_THROTTLE_SPEED_MODE_SPORTS;
 8004f74:	4b01      	ldr	r3, [pc, #4]	; (8004f7c <ESCOOTER_DetermineDrivingMode+0x70>)
 8004f76:	2202      	movs	r2, #2
 8004f78:	701a      	strb	r2, [r3, #0]
}
 8004f7a:	e7db      	b.n	8004f34 <ESCOOTER_DetermineDrivingMode+0x28>
 8004f7c:	2000114c 	.word	0x2000114c

08004f80 <ESCOOTER_init>:
osThreadId EScooterMonitorHandle;


__weak void ESCOOTER_init()
{
   ESboot();
 8004f80:	f7ff be60 	b.w	8004c44 <ESboot>

08004f84 <ESCOOTER_RunCoreTask>:
}

__weak void ESCOOTER_RunCoreTask(void)
{
 8004f84:	b510      	push	{r4, lr}
	/*Controls the E-Scooter's main operation*/
    osThreadDef(stateMachine,ESCOOTER_StateMachineHighFrequencyTask,osPriorityBelowNormal,0,128);
 8004f86:	4c12      	ldr	r4, [pc, #72]	; (8004fd0 <ESCOOTER_RunCoreTask+0x4c>)
 8004f88:	46a6      	mov	lr, r4
 8004f8a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
{
 8004f8e:	b08e      	sub	sp, #56	; 0x38
    osThreadDef(stateMachine,ESCOOTER_StateMachineHighFrequencyTask,osPriorityBelowNormal,0,128);
 8004f90:	46ec      	mov	ip, sp
 8004f92:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004f96:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8004f9a:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    EScooterStateMachineHandle = osThreadCreate(osThread(stateMachine), NULL);
 8004f9e:	2100      	movs	r1, #0
 8004fa0:	4668      	mov	r0, sp
 8004fa2:	f000 f833 	bl	800500c <osThreadCreate>
 8004fa6:	4b0b      	ldr	r3, [pc, #44]	; (8004fd4 <ESCOOTER_RunCoreTask+0x50>)

    osThreadDef(motorParameter,ESCOOTER_ParameterMonitoring,osPriorityBelowNormal,0,128);
 8004fa8:	f104 0c1c 	add.w	ip, r4, #28
    EScooterStateMachineHandle = osThreadCreate(osThread(stateMachine), NULL);
 8004fac:	6018      	str	r0, [r3, #0]
    osThreadDef(motorParameter,ESCOOTER_ParameterMonitoring,osPriorityBelowNormal,0,128);
 8004fae:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8004fb2:	ac07      	add	r4, sp, #28
 8004fb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004fb6:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8004fba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    EScooterMonitorHandle = osThreadCreate(osThread(motorParameter), NULL);
 8004fbe:	2100      	movs	r1, #0
 8004fc0:	a807      	add	r0, sp, #28
 8004fc2:	f000 f823 	bl	800500c <osThreadCreate>
 8004fc6:	4b04      	ldr	r3, [pc, #16]	; (8004fd8 <ESCOOTER_RunCoreTask+0x54>)
 8004fc8:	6018      	str	r0, [r3, #0]

}
 8004fca:	b00e      	add	sp, #56	; 0x38
 8004fcc:	bd10      	pop	{r4, pc}
 8004fce:	bf00      	nop
 8004fd0:	08009440 	.word	0x08009440
 8004fd4:	20001154 	.word	0x20001154
 8004fd8:	20001150 	.word	0x20001150

08004fdc <ESCOOTER_StopCoreTask>:

__weak void ESCOOTER_StopCoreTask(void)
{
 8004fdc:	b508      	push	{r3, lr}
    /*Stops the E-Scooter's main application*/
	ESCOOTER_Stop_Driving_Task();
 8004fde:	f7ff ff0d 	bl	8004dfc <ESCOOTER_Stop_Driving_Task>
	vTaskSuspend(EScooterStateMachineHandle);
 8004fe2:	4b05      	ldr	r3, [pc, #20]	; (8004ff8 <ESCOOTER_StopCoreTask+0x1c>)
 8004fe4:	6818      	ldr	r0, [r3, #0]
 8004fe6:	f001 fc27 	bl	8006838 <vTaskSuspend>
	vTaskSuspend(EScooterMonitorHandle);
 8004fea:	4b04      	ldr	r3, [pc, #16]	; (8004ffc <ESCOOTER_StopCoreTask+0x20>)
 8004fec:	6818      	ldr	r0, [r3, #0]
}
 8004fee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	vTaskSuspend(EScooterMonitorHandle);
 8004ff2:	f001 bc21 	b.w	8006838 <vTaskSuspend>
 8004ff6:	bf00      	nop
 8004ff8:	20001154 	.word	0x20001154
 8004ffc:	20001150 	.word	0x20001150

08005000 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005000:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8005002:	f001 fb05 	bl	8006610 <vTaskStartScheduler>
  
  return osOK;
}
 8005006:	2000      	movs	r0, #0
 8005008:	bd08      	pop	{r3, pc}
 800500a:	bf00      	nop

0800500c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800500c:	b570      	push	{r4, r5, r6, lr}
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800500e:	6944      	ldr	r4, [r0, #20]
{
 8005010:	b086      	sub	sp, #24
 8005012:	4684      	mov	ip, r0
 8005014:	460b      	mov	r3, r1
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005016:	b1ac      	cbz	r4, 8005044 <osThreadCreate+0x38>
 8005018:	6986      	ldr	r6, [r0, #24]
 800501a:	b19e      	cbz	r6, 8005044 <osThreadCreate+0x38>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800501c:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8005020:	f8dc 1000 	ldr.w	r1, [ip]
 8005024:	f8dc 2010 	ldr.w	r2, [ip, #16]
 8005028:	6840      	ldr	r0, [r0, #4]
  if (priority != osPriorityError) {
 800502a:	f1be 0f84 	cmp.w	lr, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 800502e:	bf14      	ite	ne
 8005030:	f10e 0503 	addne.w	r5, lr, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005034:	2500      	moveq	r5, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005036:	e9cd 4601 	strd	r4, r6, [sp, #4]
 800503a:	9500      	str	r5, [sp, #0]
 800503c:	f001 fa4c 	bl	80064d8 <xTaskCreateStatic>
    return NULL;
  }     
#endif
  
  return handle;
}
 8005040:	b006      	add	sp, #24
 8005042:	bd70      	pop	{r4, r5, r6, pc}
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005044:	f9bc 4008 	ldrsh.w	r4, [ip, #8]
 8005048:	f8bc 2010 	ldrh.w	r2, [ip, #16]
  if (priority != osPriorityError) {
 800504c:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 800504e:	bf14      	ite	ne
 8005050:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005052:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005054:	e9dc 1000 	ldrd	r1, r0, [ip]
 8005058:	9400      	str	r4, [sp, #0]
 800505a:	ac05      	add	r4, sp, #20
 800505c:	9401      	str	r4, [sp, #4]
 800505e:	f001 fa75 	bl	800654c <xTaskCreate>
 8005062:	2801      	cmp	r0, #1
  return handle;
 8005064:	bf0c      	ite	eq
 8005066:	9805      	ldreq	r0, [sp, #20]
      return NULL;
 8005068:	2000      	movne	r0, #0
}
 800506a:	b006      	add	sp, #24
 800506c:	bd70      	pop	{r4, r5, r6, pc}
 800506e:	bf00      	nop

08005070 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005070:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005072:	2801      	cmp	r0, #1
 8005074:	bf38      	it	cc
 8005076:	2001      	movcc	r0, #1
 8005078:	f001 fa9a 	bl	80065b0 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800507c:	2000      	movs	r0, #0
 800507e:	bd08      	pop	{r3, pc}

08005080 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005084:	4606      	mov	r6, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
 8005086:	f001 fb6b 	bl	8006760 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800508a:	4b52      	ldr	r3, [pc, #328]	; (80051d4 <pvPortMalloc+0x154>)
 800508c:	681d      	ldr	r5, [r3, #0]
 800508e:	2d00      	cmp	r5, #0
 8005090:	d06e      	beq.n	8005170 <pvPortMalloc+0xf0>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005092:	4b51      	ldr	r3, [pc, #324]	; (80051d8 <pvPortMalloc+0x158>)
 8005094:	681f      	ldr	r7, [r3, #0]
 8005096:	423e      	tst	r6, r7
 8005098:	d12e      	bne.n	80050f8 <pvPortMalloc+0x78>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800509a:	b36e      	cbz	r6, 80050f8 <pvPortMalloc+0x78>
			{
				xWantedSize += xHeapStructSize;
 800509c:	f106 0408 	add.w	r4, r6, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80050a0:	0776      	lsls	r6, r6, #29
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80050a2:	bf1c      	itt	ne
 80050a4:	f024 0407 	bicne.w	r4, r4, #7
 80050a8:	3408      	addne	r4, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80050aa:	b32c      	cbz	r4, 80050f8 <pvPortMalloc+0x78>
 80050ac:	f8df c13c 	ldr.w	ip, [pc, #316]	; 80051ec <pvPortMalloc+0x16c>
 80050b0:	f8dc 6000 	ldr.w	r6, [ip]
 80050b4:	42a6      	cmp	r6, r4
 80050b6:	d31f      	bcc.n	80050f8 <pvPortMalloc+0x78>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
 80050b8:	4848      	ldr	r0, [pc, #288]	; (80051dc <pvPortMalloc+0x15c>)
 80050ba:	6803      	ldr	r3, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80050bc:	e003      	b.n	80050c6 <pvPortMalloc+0x46>
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	b122      	cbz	r2, 80050cc <pvPortMalloc+0x4c>
 80050c2:	4618      	mov	r0, r3
 80050c4:	4613      	mov	r3, r2
 80050c6:	6859      	ldr	r1, [r3, #4]
 80050c8:	42a1      	cmp	r1, r4
 80050ca:	d3f8      	bcc.n	80050be <pvPortMalloc+0x3e>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80050cc:	42ab      	cmp	r3, r5
 80050ce:	d013      	beq.n	80050f8 <pvPortMalloc+0x78>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80050d0:	4698      	mov	r8, r3
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80050d2:	1b0a      	subs	r2, r1, r4
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80050d4:	f858 eb08 	ldr.w	lr, [r8], #8
 80050d8:	f8c0 e000 	str.w	lr, [r0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80050dc:	2a10      	cmp	r2, #16
 80050de:	d929      	bls.n	8005134 <pvPortMalloc+0xb4>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80050e0:	1919      	adds	r1, r3, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80050e2:	0748      	lsls	r0, r1, #29
 80050e4:	d00f      	beq.n	8005106 <pvPortMalloc+0x86>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80050e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ea:	f383 8811 	msr	BASEPRI, r3
 80050ee:	f3bf 8f6f 	isb	sy
 80050f2:	f3bf 8f4f 	dsb	sy
 80050f6:	e7fe      	b.n	80050f6 <pvPortMalloc+0x76>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80050f8:	f001 fb3a 	bl	8006770 <xTaskResumeAll>
 80050fc:	f04f 0800 	mov.w	r8, #0
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
 8005100:	4640      	mov	r0, r8
 8005102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005106:	604a      	str	r2, [r1, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005108:	4a34      	ldr	r2, [pc, #208]	; (80051dc <pvPortMalloc+0x15c>)
						pxBlock->xBlockSize = xWantedSize;
 800510a:	605c      	str	r4, [r3, #4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800510c:	4614      	mov	r4, r2
 800510e:	6812      	ldr	r2, [r2, #0]
 8005110:	4291      	cmp	r1, r2
 8005112:	d8fb      	bhi.n	800510c <pvPortMalloc+0x8c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005114:	6860      	ldr	r0, [r4, #4]
 8005116:	eb04 0e00 	add.w	lr, r4, r0
 800511a:	4571      	cmp	r1, lr
 800511c:	d04a      	beq.n	80051b4 <pvPortMalloc+0x134>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800511e:	f8d1 e004 	ldr.w	lr, [r1, #4]
 8005122:	eb01 000e 	add.w	r0, r1, lr
 8005126:	4282      	cmp	r2, r0
 8005128:	d04b      	beq.n	80051c2 <pvPortMalloc+0x142>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800512a:	600a      	str	r2, [r1, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800512c:	428c      	cmp	r4, r1
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800512e:	bf18      	it	ne
 8005130:	6021      	strne	r1, [r4, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005132:	6859      	ldr	r1, [r3, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005134:	4a2a      	ldr	r2, [pc, #168]	; (80051e0 <pvPortMalloc+0x160>)
 8005136:	6810      	ldr	r0, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005138:	1a76      	subs	r6, r6, r1
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800513a:	4286      	cmp	r6, r0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800513c:	bf38      	it	cc
 800513e:	6016      	strcc	r6, [r2, #0]
					xNumberOfSuccessfulAllocations++;
 8005140:	4a28      	ldr	r2, [pc, #160]	; (80051e4 <pvPortMalloc+0x164>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005142:	f8cc 6000 	str.w	r6, [ip]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005146:	4339      	orrs	r1, r7
					pxBlock->pxNextFreeBlock = NULL;
 8005148:	2000      	movs	r0, #0
 800514a:	e9c3 0100 	strd	r0, r1, [r3]
					xNumberOfSuccessfulAllocations++;
 800514e:	6813      	ldr	r3, [r2, #0]
 8005150:	3301      	adds	r3, #1
 8005152:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 8005154:	f001 fb0c 	bl	8006770 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005158:	f018 0f07 	tst.w	r8, #7
 800515c:	d0d0      	beq.n	8005100 <pvPortMalloc+0x80>
 800515e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005162:	f383 8811 	msr	BASEPRI, r3
 8005166:	f3bf 8f6f 	isb	sy
 800516a:	f3bf 8f4f 	dsb	sy
 800516e:	e7fe      	b.n	800516e <pvPortMalloc+0xee>
	uxAddress = ( size_t ) ucHeap;
 8005170:	491d      	ldr	r1, [pc, #116]	; (80051e8 <pvPortMalloc+0x168>)
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005172:	4c19      	ldr	r4, [pc, #100]	; (80051d8 <pvPortMalloc+0x158>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005174:	074f      	lsls	r7, r1, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005176:	bf14      	ite	ne
 8005178:	1dca      	addne	r2, r1, #7
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800517a:	460a      	moveq	r2, r1
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800517c:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
	uxAddress -= xHeapStructSize;
 8005180:	f1a1 0508 	sub.w	r5, r1, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005184:	f025 0507 	bic.w	r5, r5, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005188:	bf18      	it	ne
 800518a:	f022 0207 	bicne.w	r2, r2, #7
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800518e:	4914      	ldr	r1, [pc, #80]	; (80051e0 <pvPortMalloc+0x160>)
	pxEnd = ( void * ) uxAddress;
 8005190:	601d      	str	r5, [r3, #0]
	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005192:	4610      	mov	r0, r2
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005194:	1aab      	subs	r3, r5, r2
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005196:	4a15      	ldr	r2, [pc, #84]	; (80051ec <pvPortMalloc+0x16c>)
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005198:	600b      	str	r3, [r1, #0]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800519a:	4910      	ldr	r1, [pc, #64]	; (80051dc <pvPortMalloc+0x15c>)
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800519c:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800519e:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
	xStart.xBlockSize = ( size_t ) 0;
 80051a2:	2200      	movs	r2, #0
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80051a4:	6008      	str	r0, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80051a6:	604a      	str	r2, [r1, #4]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80051a8:	6027      	str	r7, [r4, #0]
	pxEnd->pxNextFreeBlock = NULL;
 80051aa:	e9c5 2200 	strd	r2, r2, [r5]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80051ae:	e9c0 5300 	strd	r5, r3, [r0]
}
 80051b2:	e770      	b.n	8005096 <pvPortMalloc+0x16>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80051b4:	6849      	ldr	r1, [r1, #4]
 80051b6:	eb00 0e01 	add.w	lr, r0, r1
 80051ba:	f8c4 e004 	str.w	lr, [r4, #4]
		pxBlockToInsert = pxIterator;
 80051be:	4621      	mov	r1, r4
 80051c0:	e7af      	b.n	8005122 <pvPortMalloc+0xa2>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80051c2:	42aa      	cmp	r2, r5
 80051c4:	d0b1      	beq.n	800512a <pvPortMalloc+0xaa>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80051c6:	6850      	ldr	r0, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80051c8:	6812      	ldr	r2, [r2, #0]
 80051ca:	600a      	str	r2, [r1, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80051cc:	4470      	add	r0, lr
 80051ce:	6048      	str	r0, [r1, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80051d0:	e7ac      	b.n	800512c <pvPortMalloc+0xac>
 80051d2:	bf00      	nop
 80051d4:	20001158 	.word	0x20001158
 80051d8:	20004d5c 	.word	0x20004d5c
 80051dc:	20004d70 	.word	0x20004d70
 80051e0:	20004d64 	.word	0x20004d64
 80051e4:	20004d68 	.word	0x20004d68
 80051e8:	2000115c 	.word	0x2000115c
 80051ec:	20004d60 	.word	0x20004d60

080051f0 <vPortFree>:
	if( pv != NULL )
 80051f0:	b1d0      	cbz	r0, 8005228 <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80051f2:	4a2b      	ldr	r2, [pc, #172]	; (80052a0 <vPortFree+0xb0>)
 80051f4:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80051f8:	6812      	ldr	r2, [r2, #0]
 80051fa:	4213      	tst	r3, r2
 80051fc:	d00b      	beq.n	8005216 <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80051fe:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8005202:	b191      	cbz	r1, 800522a <vPortFree+0x3a>
 8005204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005208:	f383 8811 	msr	BASEPRI, r3
 800520c:	f3bf 8f6f 	isb	sy
 8005210:	f3bf 8f4f 	dsb	sy
 8005214:	e7fe      	b.n	8005214 <vPortFree+0x24>
 8005216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800521a:	f383 8811 	msr	BASEPRI, r3
 800521e:	f3bf 8f6f 	isb	sy
 8005222:	f3bf 8f4f 	dsb	sy
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005226:	e7fe      	b.n	8005226 <vPortFree+0x36>
 8005228:	4770      	bx	lr
{
 800522a:	b510      	push	{r4, lr}
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800522c:	ea23 0302 	bic.w	r3, r3, r2
{
 8005230:	b082      	sub	sp, #8
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005232:	f840 3c04 	str.w	r3, [r0, #-4]
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005236:	4c1b      	ldr	r4, [pc, #108]	; (80052a4 <vPortFree+0xb4>)
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005238:	9001      	str	r0, [sp, #4]
				vTaskSuspendAll();
 800523a:	f001 fa91 	bl	8006760 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800523e:	9801      	ldr	r0, [sp, #4]
 8005240:	6822      	ldr	r2, [r4, #0]
 8005242:	f850 1c04 	ldr.w	r1, [r0, #-4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005246:	4b18      	ldr	r3, [pc, #96]	; (80052a8 <vPortFree+0xb8>)
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005248:	440a      	add	r2, r1
		puc -= xHeapStructSize;
 800524a:	3808      	subs	r0, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800524c:	6022      	str	r2, [r4, #0]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800524e:	461a      	mov	r2, r3
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4298      	cmp	r0, r3
 8005254:	d8fb      	bhi.n	800524e <vPortFree+0x5e>
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005256:	6854      	ldr	r4, [r2, #4]
 8005258:	eb02 0e04 	add.w	lr, r2, r4
 800525c:	4570      	cmp	r0, lr
 800525e:	d01a      	beq.n	8005296 <vPortFree+0xa6>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005260:	eb00 0c01 	add.w	ip, r0, r1
 8005264:	4563      	cmp	r3, ip
 8005266:	d00c      	beq.n	8005282 <vPortFree+0x92>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005268:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 800526a:	4282      	cmp	r2, r0
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800526c:	bf18      	it	ne
 800526e:	6010      	strne	r0, [r2, #0]
					xNumberOfSuccessfulFrees++;
 8005270:	4a0e      	ldr	r2, [pc, #56]	; (80052ac <vPortFree+0xbc>)
 8005272:	6813      	ldr	r3, [r2, #0]
 8005274:	3301      	adds	r3, #1
 8005276:	6013      	str	r3, [r2, #0]
}
 8005278:	b002      	add	sp, #8
 800527a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 800527e:	f001 ba77 	b.w	8006770 <xTaskResumeAll>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005282:	4c0b      	ldr	r4, [pc, #44]	; (80052b0 <vPortFree+0xc0>)
 8005284:	6824      	ldr	r4, [r4, #0]
 8005286:	42a3      	cmp	r3, r4
 8005288:	d0ee      	beq.n	8005268 <vPortFree+0x78>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800528a:	e9d3 3400 	ldrd	r3, r4, [r3]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800528e:	4421      	add	r1, r4
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005290:	e9c0 3100 	strd	r3, r1, [r0]
 8005294:	e7e9      	b.n	800526a <vPortFree+0x7a>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005296:	4421      	add	r1, r4
 8005298:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 800529a:	4610      	mov	r0, r2
 800529c:	e7e0      	b.n	8005260 <vPortFree+0x70>
 800529e:	bf00      	nop
 80052a0:	20004d5c 	.word	0x20004d5c
 80052a4:	20004d60 	.word	0x20004d60
 80052a8:	20004d70 	.word	0x20004d70
 80052ac:	20004d6c 	.word	0x20004d6c
 80052b0:	20001158 	.word	0x20001158

080052b4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052b4:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80052b8:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80052bc:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80052be:	e9c0 3101 	strd	r3, r1, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052c2:	e9c0 3303 	strd	r3, r3, [r0, #12]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80052c6:	6002      	str	r2, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80052c8:	4770      	bx	lr
 80052ca:	bf00      	nop

080052cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80052cc:	2300      	movs	r3, #0
 80052ce:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80052d0:	4770      	bx	lr
 80052d2:	bf00      	nop

080052d4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80052d4:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80052d6:	689a      	ldr	r2, [r3, #8]
 80052d8:	608a      	str	r2, [r1, #8]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80052da:	6802      	ldr	r2, [r0, #0]
{
 80052dc:	b410      	push	{r4}
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80052de:	689c      	ldr	r4, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 80052e0:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 80052e2:	3201      	adds	r2, #1
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80052e4:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80052e6:	6099      	str	r1, [r3, #8]
}
 80052e8:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
 80052ec:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80052ee:	6002      	str	r2, [r0, #0]
}
 80052f0:	4770      	bx	lr
 80052f2:	bf00      	nop

080052f4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80052f4:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80052f6:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80052f8:	1c6b      	adds	r3, r5, #1
 80052fa:	d010      	beq.n	800531e <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80052fc:	f100 0308 	add.w	r3, r0, #8
 8005300:	461c      	mov	r4, r3
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	42aa      	cmp	r2, r5
 8005308:	d9fa      	bls.n	8005300 <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800530a:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 800530c:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 800530e:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005310:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005312:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8005314:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
 8005316:	6108      	str	r0, [r1, #16]
}
 8005318:	bc30      	pop	{r4, r5}
	( pxList->uxNumberOfItems )++;
 800531a:	6002      	str	r2, [r0, #0]
}
 800531c:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 800531e:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8005320:	6863      	ldr	r3, [r4, #4]
 8005322:	e7f2      	b.n	800530a <vListInsert+0x16>

08005324 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005324:	6903      	ldr	r3, [r0, #16]
{
 8005326:	b410      	push	{r4}

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005328:	e9d0 1201 	ldrd	r1, r2, [r0, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800532c:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800532e:	608a      	str	r2, [r1, #8]
	if( pxList->pxIndex == pxItemToRemove )
 8005330:	4284      	cmp	r4, r0
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005332:	6051      	str	r1, [r2, #4]
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005334:	bf08      	it	eq
 8005336:	605a      	streq	r2, [r3, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;
 8005338:	681a      	ldr	r2, [r3, #0]

	return pxList->uxNumberOfItems;
}
 800533a:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxContainer = NULL;
 800533e:	2100      	movs	r1, #0
	( pxList->uxNumberOfItems )--;
 8005340:	3a01      	subs	r2, #1
	pxItemToRemove->pxContainer = NULL;
 8005342:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8005344:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
 8005346:	6818      	ldr	r0, [r3, #0]
}
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop

0800534c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800534c:	4808      	ldr	r0, [pc, #32]	; (8005370 <prvPortStartFirstTask+0x24>)
 800534e:	6800      	ldr	r0, [r0, #0]
 8005350:	6800      	ldr	r0, [r0, #0]
 8005352:	f380 8808 	msr	MSP, r0
 8005356:	f04f 0000 	mov.w	r0, #0
 800535a:	f380 8814 	msr	CONTROL, r0
 800535e:	b662      	cpsie	i
 8005360:	b661      	cpsie	f
 8005362:	f3bf 8f4f 	dsb	sy
 8005366:	f3bf 8f6f 	isb	sy
 800536a:	df00      	svc	0
 800536c:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800536e:	0000      	.short	0x0000
 8005370:	e000ed08 	.word	0xe000ed08

08005374 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005374:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005384 <vPortEnableVFP+0x10>
 8005378:	6801      	ldr	r1, [r0, #0]
 800537a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800537e:	6001      	str	r1, [r0, #0]
 8005380:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005382:	0000      	.short	0x0000
 8005384:	e000ed88 	.word	0xe000ed88

08005388 <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
 8005388:	4b0e      	ldr	r3, [pc, #56]	; (80053c4 <prvTaskExitError+0x3c>)
 800538a:	681b      	ldr	r3, [r3, #0]
{
 800538c:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800538e:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 8005390:	3301      	adds	r3, #1
volatile uint32_t ulDummy = 0;
 8005392:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8005394:	d008      	beq.n	80053a8 <prvTaskExitError+0x20>
 8005396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800539a:	f383 8811 	msr	BASEPRI, r3
 800539e:	f3bf 8f6f 	isb	sy
 80053a2:	f3bf 8f4f 	dsb	sy
 80053a6:	e7fe      	b.n	80053a6 <prvTaskExitError+0x1e>
 80053a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ac:	f383 8811 	msr	BASEPRI, r3
 80053b0:	f3bf 8f6f 	isb	sy
 80053b4:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 80053b8:	9b01      	ldr	r3, [sp, #4]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d0fc      	beq.n	80053b8 <prvTaskExitError+0x30>
}
 80053be:	b002      	add	sp, #8
 80053c0:	4770      	bx	lr
 80053c2:	bf00      	nop
 80053c4:	20000588 	.word	0x20000588

080053c8 <pxPortInitialiseStack>:
{
 80053c8:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80053ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80053ce:	4c07      	ldr	r4, [pc, #28]	; (80053ec <pxPortInitialiseStack+0x24>)
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80053d0:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80053d4:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80053d8:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80053dc:	e940 4103 	strd	r4, r1, [r0, #-12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80053e0:	e940 3209 	strd	r3, r2, [r0, #-36]	; 0x24
}
 80053e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80053e8:	3844      	subs	r0, #68	; 0x44
 80053ea:	4770      	bx	lr
 80053ec:	08005389 	.word	0x08005389

080053f0 <SVC_Handler>:
	__asm volatile (
 80053f0:	4b07      	ldr	r3, [pc, #28]	; (8005410 <pxCurrentTCBConst2>)
 80053f2:	6819      	ldr	r1, [r3, #0]
 80053f4:	6808      	ldr	r0, [r1, #0]
 80053f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053fa:	f380 8809 	msr	PSP, r0
 80053fe:	f3bf 8f6f 	isb	sy
 8005402:	f04f 0000 	mov.w	r0, #0
 8005406:	f380 8811 	msr	BASEPRI, r0
 800540a:	4770      	bx	lr
 800540c:	f3af 8000 	nop.w

08005410 <pxCurrentTCBConst2>:
 8005410:	20004dc0 	.word	0x20004dc0

08005414 <vPortEnterCritical>:
 8005414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005418:	f383 8811 	msr	BASEPRI, r3
 800541c:	f3bf 8f6f 	isb	sy
 8005420:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8005424:	4a0b      	ldr	r2, [pc, #44]	; (8005454 <vPortEnterCritical+0x40>)
 8005426:	6813      	ldr	r3, [r2, #0]
 8005428:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800542a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800542c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800542e:	d000      	beq.n	8005432 <vPortEnterCritical+0x1e>
}
 8005430:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005432:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005436:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 800543a:	b2db      	uxtb	r3, r3
 800543c:	2b00      	cmp	r3, #0
 800543e:	d0f7      	beq.n	8005430 <vPortEnterCritical+0x1c>
 8005440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005444:	f383 8811 	msr	BASEPRI, r3
 8005448:	f3bf 8f6f 	isb	sy
 800544c:	f3bf 8f4f 	dsb	sy
 8005450:	e7fe      	b.n	8005450 <vPortEnterCritical+0x3c>
 8005452:	bf00      	nop
 8005454:	20000588 	.word	0x20000588

08005458 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8005458:	4a08      	ldr	r2, [pc, #32]	; (800547c <vPortExitCritical+0x24>)
 800545a:	6813      	ldr	r3, [r2, #0]
 800545c:	b943      	cbnz	r3, 8005470 <vPortExitCritical+0x18>
 800545e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005462:	f383 8811 	msr	BASEPRI, r3
 8005466:	f3bf 8f6f 	isb	sy
 800546a:	f3bf 8f4f 	dsb	sy
 800546e:	e7fe      	b.n	800546e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8005470:	3b01      	subs	r3, #1
 8005472:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005474:	b90b      	cbnz	r3, 800547a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005476:	f383 8811 	msr	BASEPRI, r3
}
 800547a:	4770      	bx	lr
 800547c:	20000588 	.word	0x20000588

08005480 <PendSV_Handler>:
	__asm volatile
 8005480:	f3ef 8009 	mrs	r0, PSP
 8005484:	f3bf 8f6f 	isb	sy
 8005488:	4b15      	ldr	r3, [pc, #84]	; (80054e0 <pxCurrentTCBConst>)
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	f01e 0f10 	tst.w	lr, #16
 8005490:	bf08      	it	eq
 8005492:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005496:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800549a:	6010      	str	r0, [r2, #0]
 800549c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80054a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80054a4:	f380 8811 	msr	BASEPRI, r0
 80054a8:	f3bf 8f4f 	dsb	sy
 80054ac:	f3bf 8f6f 	isb	sy
 80054b0:	f001 f984 	bl	80067bc <vTaskSwitchContext>
 80054b4:	f04f 0000 	mov.w	r0, #0
 80054b8:	f380 8811 	msr	BASEPRI, r0
 80054bc:	bc09      	pop	{r0, r3}
 80054be:	6819      	ldr	r1, [r3, #0]
 80054c0:	6808      	ldr	r0, [r1, #0]
 80054c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054c6:	f01e 0f10 	tst.w	lr, #16
 80054ca:	bf08      	it	eq
 80054cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80054d0:	f380 8809 	msr	PSP, r0
 80054d4:	f3bf 8f6f 	isb	sy
 80054d8:	4770      	bx	lr
 80054da:	bf00      	nop
 80054dc:	f3af 8000 	nop.w

080054e0 <pxCurrentTCBConst>:
 80054e0:	20004dc0 	.word	0x20004dc0

080054e4 <SysTick_Handler>:
{
 80054e4:	b508      	push	{r3, lr}
	__asm volatile
 80054e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ea:	f383 8811 	msr	BASEPRI, r3
 80054ee:	f3bf 8f6f 	isb	sy
 80054f2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 80054f6:	f001 f951 	bl	800679c <xTaskIncrementTick>
 80054fa:	b128      	cbz	r0, 8005508 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80054fc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005500:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005504:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8005508:	2300      	movs	r3, #0
 800550a:	f383 8811 	msr	BASEPRI, r3
}
 800550e:	bd08      	pop	{r3, pc}

08005510 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005510:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005514:	4a48      	ldr	r2, [pc, #288]	; (8005638 <xPortStartScheduler+0x128>)
 8005516:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	; 0xd00
 800551a:	4291      	cmp	r1, r2
 800551c:	d041      	beq.n	80055a2 <xPortStartScheduler+0x92>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800551e:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8005522:	4b46      	ldr	r3, [pc, #280]	; (800563c <xPortStartScheduler+0x12c>)
 8005524:	429a      	cmp	r2, r3
 8005526:	d033      	beq.n	8005590 <xPortStartScheduler+0x80>
{
 8005528:	b570      	push	{r4, r5, r6, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800552a:	4b45      	ldr	r3, [pc, #276]	; (8005640 <xPortStartScheduler+0x130>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800552c:	4c45      	ldr	r4, [pc, #276]	; (8005644 <xPortStartScheduler+0x134>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800552e:	781a      	ldrb	r2, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005530:	4845      	ldr	r0, [pc, #276]	; (8005648 <xPortStartScheduler+0x138>)
{
 8005532:	b084      	sub	sp, #16
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005534:	21ff      	movs	r1, #255	; 0xff
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005536:	b2d2      	uxtb	r2, r2
 8005538:	9202      	str	r2, [sp, #8]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800553a:	7019      	strb	r1, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	b2db      	uxtb	r3, r3
 8005540:	f88d 3007 	strb.w	r3, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005544:	f89d 3007 	ldrb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005548:	f89d 2007 	ldrb.w	r2, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800554c:	f003 0350 	and.w	r3, r3, #80	; 0x50
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005550:	2107      	movs	r1, #7
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005552:	0612      	lsls	r2, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005554:	7023      	strb	r3, [r4, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005556:	6001      	str	r1, [r0, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005558:	bf48      	it	mi
 800555a:	2206      	movmi	r2, #6
 800555c:	d50f      	bpl.n	800557e <xPortStartScheduler+0x6e>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800555e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005562:	005b      	lsls	r3, r3, #1
 8005564:	b2db      	uxtb	r3, r3
 8005566:	f88d 3007 	strb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800556a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800556e:	061b      	lsls	r3, r3, #24
 8005570:	4611      	mov	r1, r2
 8005572:	f102 32ff 	add.w	r2, r2, #4294967295
 8005576:	d4f2      	bmi.n	800555e <xPortStartScheduler+0x4e>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005578:	2903      	cmp	r1, #3
 800557a:	d01b      	beq.n	80055b4 <xPortStartScheduler+0xa4>
 800557c:	6001      	str	r1, [r0, #0]
	__asm volatile
 800557e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005582:	f383 8811 	msr	BASEPRI, r3
 8005586:	f3bf 8f6f 	isb	sy
 800558a:	f3bf 8f4f 	dsb	sy
 800558e:	e7fe      	b.n	800558e <xPortStartScheduler+0x7e>
 8005590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005594:	f383 8811 	msr	BASEPRI, r3
 8005598:	f3bf 8f6f 	isb	sy
 800559c:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80055a0:	e7fe      	b.n	80055a0 <xPortStartScheduler+0x90>
 80055a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a6:	f383 8811 	msr	BASEPRI, r3
 80055aa:	f3bf 8f6f 	isb	sy
 80055ae:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80055b2:	e7fe      	b.n	80055b2 <xPortStartScheduler+0xa2>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80055b4:	9b02      	ldr	r3, [sp, #8]
 80055b6:	4a22      	ldr	r2, [pc, #136]	; (8005640 <xPortStartScheduler+0x130>)
	uxCriticalNesting = 0;
 80055b8:	4d24      	ldr	r5, [pc, #144]	; (800564c <xPortStartScheduler+0x13c>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80055ba:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80055be:	f44f 7140 	mov.w	r1, #768	; 0x300
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80055c2:	b2db      	uxtb	r3, r3
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80055c4:	6001      	str	r1, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80055c6:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80055c8:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 80055cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80055d0:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80055d4:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 80055d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80055dc:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	uxCriticalNesting = 0;
 80055e0:	2600      	movs	r6, #0
	vPortSetupTimerInterrupt();
 80055e2:	f7fc fda5 	bl	8002130 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80055e6:	602e      	str	r6, [r5, #0]
	vPortEnableVFP();
 80055e8:	f7ff fec4 	bl	8005374 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80055ec:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 80055f0:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80055f4:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 80055f8:	f7ff fea8 	bl	800534c <prvPortStartFirstTask>
	vTaskSwitchContext();
 80055fc:	f001 f8de 	bl	80067bc <vTaskSwitchContext>
	configASSERT( uxCriticalNesting == ~0UL );
 8005600:	682b      	ldr	r3, [r5, #0]
volatile uint32_t ulDummy = 0;
 8005602:	9603      	str	r6, [sp, #12]
	configASSERT( uxCriticalNesting == ~0UL );
 8005604:	3301      	adds	r3, #1
 8005606:	d008      	beq.n	800561a <xPortStartScheduler+0x10a>
 8005608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800560c:	f383 8811 	msr	BASEPRI, r3
 8005610:	f3bf 8f6f 	isb	sy
 8005614:	f3bf 8f4f 	dsb	sy
 8005618:	e7fe      	b.n	8005618 <xPortStartScheduler+0x108>
 800561a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800561e:	f383 8811 	msr	BASEPRI, r3
 8005622:	f3bf 8f6f 	isb	sy
 8005626:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 800562a:	9b03      	ldr	r3, [sp, #12]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d0fc      	beq.n	800562a <xPortStartScheduler+0x11a>
}
 8005630:	2000      	movs	r0, #0
 8005632:	b004      	add	sp, #16
 8005634:	bd70      	pop	{r4, r5, r6, pc}
 8005636:	bf00      	nop
 8005638:	410fc271 	.word	0x410fc271
 800563c:	410fc270 	.word	0x410fc270
 8005640:	e000e400 	.word	0xe000e400
 8005644:	20004d78 	.word	0x20004d78
 8005648:	20004d7c 	.word	0x20004d7c
 800564c:	20000588 	.word	0x20000588

08005650 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005650:	b570      	push	{r4, r5, r6, lr}
 8005652:	4604      	mov	r4, r0

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005654:	6c00      	ldr	r0, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005656:	6ba6      	ldr	r6, [r4, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005658:	b920      	cbnz	r0, 8005664 <prvCopyDataToQueue+0x14>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800565a:	6825      	ldr	r5, [r4, #0]
 800565c:	b34d      	cbz	r5, 80056b2 <prvCopyDataToQueue+0x62>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800565e:	3601      	adds	r6, #1
 8005660:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 8005662:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8005664:	4615      	mov	r5, r2
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005666:	4602      	mov	r2, r0
	else if( xPosition == queueSEND_TO_BACK )
 8005668:	b97d      	cbnz	r5, 800568a <prvCopyDataToQueue+0x3a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800566a:	6860      	ldr	r0, [r4, #4]
 800566c:	f003 fde8 	bl	8009240 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005670:	6863      	ldr	r3, [r4, #4]
 8005672:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005674:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005676:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005678:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800567a:	4293      	cmp	r3, r2
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800567c:	bf24      	itt	cs
 800567e:	6823      	ldrcs	r3, [r4, #0]
 8005680:	6063      	strcs	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005682:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 8005684:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005686:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8005688:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800568a:	68e0      	ldr	r0, [r4, #12]
 800568c:	f003 fdd8 	bl	8009240 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005690:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005692:	68e3      	ldr	r3, [r4, #12]
 8005694:	4251      	negs	r1, r2
 8005696:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005698:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800569a:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800569c:	4293      	cmp	r3, r2
 800569e:	d202      	bcs.n	80056a6 <prvCopyDataToQueue+0x56>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80056a0:	68a3      	ldr	r3, [r4, #8]
 80056a2:	440b      	add	r3, r1
 80056a4:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80056a6:	2d02      	cmp	r5, #2
 80056a8:	d008      	beq.n	80056bc <prvCopyDataToQueue+0x6c>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80056aa:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 80056ac:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80056ae:	63a6      	str	r6, [r4, #56]	; 0x38
}
 80056b0:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80056b2:	68a0      	ldr	r0, [r4, #8]
 80056b4:	f001 faa6 	bl	8006c04 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80056b8:	60a5      	str	r5, [r4, #8]
 80056ba:	e7d0      	b.n	800565e <prvCopyDataToQueue+0xe>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80056bc:	2e01      	cmp	r6, #1
 80056be:	bf38      	it	cc
 80056c0:	2601      	movcc	r6, #1
BaseType_t xReturn = pdFALSE;
 80056c2:	2000      	movs	r0, #0
 80056c4:	e7cc      	b.n	8005660 <prvCopyDataToQueue+0x10>
 80056c6:	bf00      	nop

080056c8 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80056c8:	b940      	cbnz	r0, 80056dc <xQueueGenericCreateStatic+0x14>
 80056ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ce:	f383 8811 	msr	BASEPRI, r3
 80056d2:	f3bf 8f6f 	isb	sy
 80056d6:	f3bf 8f4f 	dsb	sy
 80056da:	e7fe      	b.n	80056da <xQueueGenericCreateStatic+0x12>
	{
 80056dc:	b510      	push	{r4, lr}
 80056de:	461c      	mov	r4, r3
 80056e0:	b082      	sub	sp, #8
		configASSERT( pxStaticQueue != NULL );
 80056e2:	b17b      	cbz	r3, 8005704 <xQueueGenericCreateStatic+0x3c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80056e4:	b302      	cbz	r2, 8005728 <xQueueGenericCreateStatic+0x60>
 80056e6:	b1b1      	cbz	r1, 8005716 <xQueueGenericCreateStatic+0x4e>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80056e8:	2348      	movs	r3, #72	; 0x48
 80056ea:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 80056ec:	9b01      	ldr	r3, [sp, #4]
 80056ee:	2b48      	cmp	r3, #72	; 0x48
 80056f0:	d026      	beq.n	8005740 <xQueueGenericCreateStatic+0x78>
 80056f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f6:	f383 8811 	msr	BASEPRI, r3
 80056fa:	f3bf 8f6f 	isb	sy
 80056fe:	f3bf 8f4f 	dsb	sy
 8005702:	e7fe      	b.n	8005702 <xQueueGenericCreateStatic+0x3a>
 8005704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005708:	f383 8811 	msr	BASEPRI, r3
 800570c:	f3bf 8f6f 	isb	sy
 8005710:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8005714:	e7fe      	b.n	8005714 <xQueueGenericCreateStatic+0x4c>
 8005716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800571a:	f383 8811 	msr	BASEPRI, r3
 800571e:	f3bf 8f6f 	isb	sy
 8005722:	f3bf 8f4f 	dsb	sy
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005726:	e7fe      	b.n	8005726 <xQueueGenericCreateStatic+0x5e>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005728:	bb99      	cbnz	r1, 8005792 <xQueueGenericCreateStatic+0xca>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800572a:	2248      	movs	r2, #72	; 0x48
 800572c:	9201      	str	r2, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800572e:	9a01      	ldr	r2, [sp, #4]
 8005730:	2a48      	cmp	r2, #72	; 0x48
 8005732:	d1de      	bne.n	80056f2 <xQueueGenericCreateStatic+0x2a>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005734:	2201      	movs	r2, #1
 8005736:	f884 2046 	strb.w	r2, [r4, #70]	; 0x46
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800573a:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800573c:	4622      	mov	r2, r4
 800573e:	e004      	b.n	800574a <xQueueGenericCreateStatic+0x82>
 8005740:	f04f 0c01 	mov.w	ip, #1
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005744:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005746:	f884 c046 	strb.w	ip, [r4, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 800574a:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
 800574e:	6022      	str	r2, [r4, #0]
	taskENTER_CRITICAL();
 8005750:	f7ff fe60 	bl	8005414 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005754:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	; 0x3c
 8005758:	6823      	ldr	r3, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800575a:	6063      	str	r3, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800575c:	fb02 f101 	mul.w	r1, r2, r1
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005760:	1a8a      	subs	r2, r1, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005762:	4419      	add	r1, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005764:	441a      	add	r2, r3
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005766:	60a1      	str	r1, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005768:	2000      	movs	r0, #0
		pxQueue->cRxLock = queueUNLOCKED;
 800576a:	21ff      	movs	r1, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800576c:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800576e:	60e2      	str	r2, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005770:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005774:	f104 0010 	add.w	r0, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 8005778:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800577c:	f7ff fd9a 	bl	80052b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005780:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005784:	f7ff fd96 	bl	80052b4 <vListInitialise>
	taskEXIT_CRITICAL();
 8005788:	f7ff fe66 	bl	8005458 <vPortExitCritical>
	}
 800578c:	4620      	mov	r0, r4
 800578e:	b002      	add	sp, #8
 8005790:	bd10      	pop	{r4, pc}
 8005792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005796:	f383 8811 	msr	BASEPRI, r3
 800579a:	f3bf 8f6f 	isb	sy
 800579e:	f3bf 8f4f 	dsb	sy
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80057a2:	e7fe      	b.n	80057a2 <xQueueGenericCreateStatic+0xda>

080057a4 <xQueueGenericSend>:
{
 80057a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80057a8:	b085      	sub	sp, #20
 80057aa:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 80057ac:	2800      	cmp	r0, #0
 80057ae:	f000 80a4 	beq.w	80058fa <xQueueGenericSend+0x156>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80057b2:	4688      	mov	r8, r1
 80057b4:	461f      	mov	r7, r3
 80057b6:	4604      	mov	r4, r0
 80057b8:	2900      	cmp	r1, #0
 80057ba:	f000 8091 	beq.w	80058e0 <xQueueGenericSend+0x13c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80057be:	2f02      	cmp	r7, #2
 80057c0:	d10b      	bne.n	80057da <xQueueGenericSend+0x36>
 80057c2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d008      	beq.n	80057da <xQueueGenericSend+0x36>
 80057c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057cc:	f383 8811 	msr	BASEPRI, r3
 80057d0:	f3bf 8f6f 	isb	sy
 80057d4:	f3bf 8f4f 	dsb	sy
 80057d8:	e7fe      	b.n	80057d8 <xQueueGenericSend+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80057da:	f001 fa03 	bl	8006be4 <xTaskGetSchedulerState>
 80057de:	4605      	mov	r5, r0
 80057e0:	2800      	cmp	r0, #0
 80057e2:	f000 8093 	beq.w	800590c <xQueueGenericSend+0x168>
 80057e6:	2500      	movs	r5, #0
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057e8:	f104 0624 	add.w	r6, r4, #36	; 0x24
		taskENTER_CRITICAL();
 80057ec:	f7ff fe12 	bl	8005414 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80057f0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80057f2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80057f4:	429a      	cmp	r2, r3
 80057f6:	f0c0 80ef 	bcc.w	80059d8 <xQueueGenericSend+0x234>
 80057fa:	2f02      	cmp	r7, #2
 80057fc:	f000 80ec 	beq.w	80059d8 <xQueueGenericSend+0x234>
				if( xTicksToWait == ( TickType_t ) 0 )
 8005800:	9801      	ldr	r0, [sp, #4]
 8005802:	2800      	cmp	r0, #0
 8005804:	f000 8101 	beq.w	8005a0a <xQueueGenericSend+0x266>
				else if( xEntryTimeSet == pdFALSE )
 8005808:	2d00      	cmp	r5, #0
 800580a:	f000 80e1 	beq.w	80059d0 <xQueueGenericSend+0x22c>
		taskEXIT_CRITICAL();
 800580e:	f7ff fe23 	bl	8005458 <vPortExitCritical>
		vTaskSuspendAll();
 8005812:	f000 ffa5 	bl	8006760 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005816:	f7ff fdfd 	bl	8005414 <vPortEnterCritical>
 800581a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800581e:	2bff      	cmp	r3, #255	; 0xff
 8005820:	bf04      	itt	eq
 8005822:	2300      	moveq	r3, #0
 8005824:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 8005828:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800582c:	2bff      	cmp	r3, #255	; 0xff
 800582e:	bf04      	itt	eq
 8005830:	2300      	moveq	r3, #0
 8005832:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 8005836:	f7ff fe0f 	bl	8005458 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800583a:	a901      	add	r1, sp, #4
 800583c:	a802      	add	r0, sp, #8
 800583e:	f001 f983 	bl	8006b48 <xTaskCheckForTimeOut>
 8005842:	2800      	cmp	r0, #0
 8005844:	f040 80e6 	bne.w	8005a14 <xQueueGenericSend+0x270>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005848:	f7ff fde4 	bl	8005414 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800584c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800584e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005850:	429a      	cmp	r2, r3
 8005852:	d068      	beq.n	8005926 <xQueueGenericSend+0x182>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8005854:	f7ff fe00 	bl	8005458 <vPortExitCritical>
	taskENTER_CRITICAL();
 8005858:	f7ff fddc 	bl	8005414 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800585c:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 8005860:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005862:	2d00      	cmp	r5, #0
 8005864:	dc04      	bgt.n	8005870 <xQueueGenericSend+0xcc>
 8005866:	e011      	b.n	800588c <xQueueGenericSend+0xe8>
			--cTxLock;
 8005868:	1e6a      	subs	r2, r5, #1
 800586a:	b2d3      	uxtb	r3, r2
 800586c:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800586e:	b16b      	cbz	r3, 800588c <xQueueGenericSend+0xe8>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005870:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005872:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005874:	b153      	cbz	r3, 800588c <xQueueGenericSend+0xe8>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005876:	f001 f913 	bl	8006aa0 <xTaskRemoveFromEventList>
 800587a:	2800      	cmp	r0, #0
 800587c:	d0f4      	beq.n	8005868 <xQueueGenericSend+0xc4>
						vTaskMissedYield();
 800587e:	f001 f9ab 	bl	8006bd8 <vTaskMissedYield>
			--cTxLock;
 8005882:	1e6a      	subs	r2, r5, #1
 8005884:	b2d3      	uxtb	r3, r2
 8005886:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005888:	2b00      	cmp	r3, #0
 800588a:	d1f1      	bne.n	8005870 <xQueueGenericSend+0xcc>
		pxQueue->cTxLock = queueUNLOCKED;
 800588c:	23ff      	movs	r3, #255	; 0xff
 800588e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8005892:	f7ff fde1 	bl	8005458 <vPortExitCritical>
	taskENTER_CRITICAL();
 8005896:	f7ff fdbd 	bl	8005414 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800589a:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 800589e:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80058a0:	2d00      	cmp	r5, #0
 80058a2:	dd14      	ble.n	80058ce <xQueueGenericSend+0x12a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058a4:	f104 0910 	add.w	r9, r4, #16
 80058a8:	e003      	b.n	80058b2 <xQueueGenericSend+0x10e>
				--cRxLock;
 80058aa:	1e6a      	subs	r2, r5, #1
 80058ac:	b2d3      	uxtb	r3, r2
 80058ae:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80058b0:	b16b      	cbz	r3, 80058ce <xQueueGenericSend+0x12a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058b2:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058b4:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058b6:	b153      	cbz	r3, 80058ce <xQueueGenericSend+0x12a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058b8:	f001 f8f2 	bl	8006aa0 <xTaskRemoveFromEventList>
 80058bc:	2800      	cmp	r0, #0
 80058be:	d0f4      	beq.n	80058aa <xQueueGenericSend+0x106>
					vTaskMissedYield();
 80058c0:	f001 f98a 	bl	8006bd8 <vTaskMissedYield>
				--cRxLock;
 80058c4:	1e6a      	subs	r2, r5, #1
 80058c6:	b2d3      	uxtb	r3, r2
 80058c8:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d1f1      	bne.n	80058b2 <xQueueGenericSend+0x10e>
		pxQueue->cRxLock = queueUNLOCKED;
 80058ce:	23ff      	movs	r3, #255	; 0xff
 80058d0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 80058d4:	f7ff fdc0 	bl	8005458 <vPortExitCritical>
				( void ) xTaskResumeAll();
 80058d8:	f000 ff4a 	bl	8006770 <xTaskResumeAll>
 80058dc:	2501      	movs	r5, #1
 80058de:	e785      	b.n	80057ec <xQueueGenericSend+0x48>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80058e0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	f43f af6b 	beq.w	80057be <xQueueGenericSend+0x1a>
 80058e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ec:	f383 8811 	msr	BASEPRI, r3
 80058f0:	f3bf 8f6f 	isb	sy
 80058f4:	f3bf 8f4f 	dsb	sy
 80058f8:	e7fe      	b.n	80058f8 <xQueueGenericSend+0x154>
 80058fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058fe:	f383 8811 	msr	BASEPRI, r3
 8005902:	f3bf 8f6f 	isb	sy
 8005906:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800590a:	e7fe      	b.n	800590a <xQueueGenericSend+0x166>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800590c:	9b01      	ldr	r3, [sp, #4]
 800590e:	2b00      	cmp	r3, #0
 8005910:	f43f af6a 	beq.w	80057e8 <xQueueGenericSend+0x44>
 8005914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005918:	f383 8811 	msr	BASEPRI, r3
 800591c:	f3bf 8f6f 	isb	sy
 8005920:	f3bf 8f4f 	dsb	sy
 8005924:	e7fe      	b.n	8005924 <xQueueGenericSend+0x180>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005926:	f104 0910 	add.w	r9, r4, #16
	taskEXIT_CRITICAL();
 800592a:	f7ff fd95 	bl	8005458 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800592e:	9901      	ldr	r1, [sp, #4]
 8005930:	4648      	mov	r0, r9
 8005932:	f001 f805 	bl	8006940 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 8005936:	f7ff fd6d 	bl	8005414 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800593a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800593e:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005940:	2d00      	cmp	r5, #0
 8005942:	dc04      	bgt.n	800594e <xQueueGenericSend+0x1aa>
 8005944:	e011      	b.n	800596a <xQueueGenericSend+0x1c6>
			--cTxLock;
 8005946:	1e6b      	subs	r3, r5, #1
 8005948:	b2da      	uxtb	r2, r3
 800594a:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800594c:	b16a      	cbz	r2, 800596a <xQueueGenericSend+0x1c6>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800594e:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005950:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005952:	b153      	cbz	r3, 800596a <xQueueGenericSend+0x1c6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005954:	f001 f8a4 	bl	8006aa0 <xTaskRemoveFromEventList>
 8005958:	2800      	cmp	r0, #0
 800595a:	d0f4      	beq.n	8005946 <xQueueGenericSend+0x1a2>
						vTaskMissedYield();
 800595c:	f001 f93c 	bl	8006bd8 <vTaskMissedYield>
			--cTxLock;
 8005960:	1e6b      	subs	r3, r5, #1
 8005962:	b2da      	uxtb	r2, r3
 8005964:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005966:	2a00      	cmp	r2, #0
 8005968:	d1f1      	bne.n	800594e <xQueueGenericSend+0x1aa>
		pxQueue->cTxLock = queueUNLOCKED;
 800596a:	23ff      	movs	r3, #255	; 0xff
 800596c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8005970:	f7ff fd72 	bl	8005458 <vPortExitCritical>
	taskENTER_CRITICAL();
 8005974:	f7ff fd4e 	bl	8005414 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8005978:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800597c:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800597e:	2d00      	cmp	r5, #0
 8005980:	dc04      	bgt.n	800598c <xQueueGenericSend+0x1e8>
 8005982:	e011      	b.n	80059a8 <xQueueGenericSend+0x204>
				--cRxLock;
 8005984:	1e6b      	subs	r3, r5, #1
 8005986:	b2da      	uxtb	r2, r3
 8005988:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800598a:	b16a      	cbz	r2, 80059a8 <xQueueGenericSend+0x204>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800598c:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800598e:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005990:	b153      	cbz	r3, 80059a8 <xQueueGenericSend+0x204>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005992:	f001 f885 	bl	8006aa0 <xTaskRemoveFromEventList>
 8005996:	2800      	cmp	r0, #0
 8005998:	d0f4      	beq.n	8005984 <xQueueGenericSend+0x1e0>
					vTaskMissedYield();
 800599a:	f001 f91d 	bl	8006bd8 <vTaskMissedYield>
				--cRxLock;
 800599e:	1e6b      	subs	r3, r5, #1
 80059a0:	b2da      	uxtb	r2, r3
 80059a2:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80059a4:	2a00      	cmp	r2, #0
 80059a6:	d1f1      	bne.n	800598c <xQueueGenericSend+0x1e8>
		pxQueue->cRxLock = queueUNLOCKED;
 80059a8:	23ff      	movs	r3, #255	; 0xff
 80059aa:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 80059ae:	f7ff fd53 	bl	8005458 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 80059b2:	f000 fedd 	bl	8006770 <xTaskResumeAll>
 80059b6:	2800      	cmp	r0, #0
 80059b8:	d190      	bne.n	80058dc <xQueueGenericSend+0x138>
					portYIELD_WITHIN_API();
 80059ba:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80059be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059c2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80059c6:	f3bf 8f4f 	dsb	sy
 80059ca:	f3bf 8f6f 	isb	sy
 80059ce:	e785      	b.n	80058dc <xQueueGenericSend+0x138>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80059d0:	a802      	add	r0, sp, #8
 80059d2:	f001 f8ad 	bl	8006b30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80059d6:	e71a      	b.n	800580e <xQueueGenericSend+0x6a>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80059d8:	463a      	mov	r2, r7
 80059da:	4641      	mov	r1, r8
 80059dc:	4620      	mov	r0, r4
 80059de:	f7ff fe37 	bl	8005650 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d153      	bne.n	8005a90 <xQueueGenericSend+0x2ec>
					else if( xYieldRequired != pdFALSE )
 80059e8:	b148      	cbz	r0, 80059fe <xQueueGenericSend+0x25a>
						queueYIELD_IF_USING_PREEMPTION();
 80059ea:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80059ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059f2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80059f6:	f3bf 8f4f 	dsb	sy
 80059fa:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80059fe:	f7ff fd2b 	bl	8005458 <vPortExitCritical>
				return pdPASS;
 8005a02:	2001      	movs	r0, #1
}
 8005a04:	b005      	add	sp, #20
 8005a06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005a0a:	9000      	str	r0, [sp, #0]
					taskEXIT_CRITICAL();
 8005a0c:	f7ff fd24 	bl	8005458 <vPortExitCritical>
					return errQUEUE_FULL;
 8005a10:	9800      	ldr	r0, [sp, #0]
 8005a12:	e7f7      	b.n	8005a04 <xQueueGenericSend+0x260>
	taskENTER_CRITICAL();
 8005a14:	f7ff fcfe 	bl	8005414 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8005a18:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005a1c:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a1e:	2d00      	cmp	r5, #0
 8005a20:	dd10      	ble.n	8005a44 <xQueueGenericSend+0x2a0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a22:	f104 0624 	add.w	r6, r4, #36	; 0x24
 8005a26:	e003      	b.n	8005a30 <xQueueGenericSend+0x28c>
			--cTxLock;
 8005a28:	1e6b      	subs	r3, r5, #1
 8005a2a:	b2da      	uxtb	r2, r3
 8005a2c:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a2e:	b14a      	cbz	r2, 8005a44 <xQueueGenericSend+0x2a0>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a30:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a32:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a34:	b133      	cbz	r3, 8005a44 <xQueueGenericSend+0x2a0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a36:	f001 f833 	bl	8006aa0 <xTaskRemoveFromEventList>
 8005a3a:	2800      	cmp	r0, #0
 8005a3c:	d0f4      	beq.n	8005a28 <xQueueGenericSend+0x284>
						vTaskMissedYield();
 8005a3e:	f001 f8cb 	bl	8006bd8 <vTaskMissedYield>
 8005a42:	e7f1      	b.n	8005a28 <xQueueGenericSend+0x284>
		pxQueue->cTxLock = queueUNLOCKED;
 8005a44:	23ff      	movs	r3, #255	; 0xff
 8005a46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8005a4a:	f7ff fd05 	bl	8005458 <vPortExitCritical>
	taskENTER_CRITICAL();
 8005a4e:	f7ff fce1 	bl	8005414 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8005a52:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005a56:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005a58:	2d00      	cmp	r5, #0
 8005a5a:	dd10      	ble.n	8005a7e <xQueueGenericSend+0x2da>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a5c:	f104 0610 	add.w	r6, r4, #16
 8005a60:	e003      	b.n	8005a6a <xQueueGenericSend+0x2c6>
				--cRxLock;
 8005a62:	1e6b      	subs	r3, r5, #1
 8005a64:	b2da      	uxtb	r2, r3
 8005a66:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005a68:	b14a      	cbz	r2, 8005a7e <xQueueGenericSend+0x2da>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a6a:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a6c:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a6e:	b133      	cbz	r3, 8005a7e <xQueueGenericSend+0x2da>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a70:	f001 f816 	bl	8006aa0 <xTaskRemoveFromEventList>
 8005a74:	2800      	cmp	r0, #0
 8005a76:	d0f4      	beq.n	8005a62 <xQueueGenericSend+0x2be>
					vTaskMissedYield();
 8005a78:	f001 f8ae 	bl	8006bd8 <vTaskMissedYield>
 8005a7c:	e7f1      	b.n	8005a62 <xQueueGenericSend+0x2be>
		pxQueue->cRxLock = queueUNLOCKED;
 8005a7e:	23ff      	movs	r3, #255	; 0xff
 8005a80:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8005a84:	f7ff fce8 	bl	8005458 <vPortExitCritical>
			( void ) xTaskResumeAll();
 8005a88:	f000 fe72 	bl	8006770 <xTaskResumeAll>
			return errQUEUE_FULL;
 8005a8c:	2000      	movs	r0, #0
 8005a8e:	e7b9      	b.n	8005a04 <xQueueGenericSend+0x260>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a90:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005a94:	f001 f804 	bl	8006aa0 <xTaskRemoveFromEventList>
 8005a98:	2800      	cmp	r0, #0
 8005a9a:	d0b0      	beq.n	80059fe <xQueueGenericSend+0x25a>
 8005a9c:	e7a5      	b.n	80059ea <xQueueGenericSend+0x246>
 8005a9e:	bf00      	nop

08005aa0 <xQueueReceive>:
{
 8005aa0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005aa4:	b085      	sub	sp, #20
 8005aa6:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8005aa8:	2800      	cmp	r0, #0
 8005aaa:	f000 815f 	beq.w	8005d6c <xQueueReceive+0x2cc>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005aae:	460f      	mov	r7, r1
 8005ab0:	4604      	mov	r4, r0
 8005ab2:	2900      	cmp	r1, #0
 8005ab4:	f000 8094 	beq.w	8005be0 <xQueueReceive+0x140>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005ab8:	f001 f894 	bl	8006be4 <xTaskGetSchedulerState>
 8005abc:	2800      	cmp	r0, #0
 8005abe:	f000 809c 	beq.w	8005bfa <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 8005ac2:	f7ff fca7 	bl	8005414 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ac6:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ac8:	2d00      	cmp	r5, #0
 8005aca:	d172      	bne.n	8005bb2 <xQueueReceive+0x112>
				if( xTicksToWait == ( TickType_t ) 0 )
 8005acc:	9b01      	ldr	r3, [sp, #4]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	f000 80f1 	beq.w	8005cb6 <xQueueReceive+0x216>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005ad4:	a802      	add	r0, sp, #8
 8005ad6:	f001 f82b 	bl	8006b30 <vTaskInternalSetTimeOutState>
		prvLockQueue( pxQueue );
 8005ada:	46a8      	mov	r8, r5
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005adc:	f104 0624 	add.w	r6, r4, #36	; 0x24
		taskEXIT_CRITICAL();
 8005ae0:	f7ff fcba 	bl	8005458 <vPortExitCritical>
		vTaskSuspendAll();
 8005ae4:	f000 fe3c 	bl	8006760 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005ae8:	f7ff fc94 	bl	8005414 <vPortEnterCritical>
 8005aec:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005af0:	2bff      	cmp	r3, #255	; 0xff
 8005af2:	bf08      	it	eq
 8005af4:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8005af8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005afc:	2bff      	cmp	r3, #255	; 0xff
 8005afe:	bf08      	it	eq
 8005b00:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 8005b04:	f7ff fca8 	bl	8005458 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b08:	a901      	add	r1, sp, #4
 8005b0a:	a802      	add	r0, sp, #8
 8005b0c:	f001 f81c 	bl	8006b48 <xTaskCheckForTimeOut>
 8005b10:	2800      	cmp	r0, #0
 8005b12:	d17f      	bne.n	8005c14 <xQueueReceive+0x174>
	taskENTER_CRITICAL();
 8005b14:	f7ff fc7e 	bl	8005414 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005b18:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	f000 80d1 	beq.w	8005cc2 <xQueueReceive+0x222>
	taskEXIT_CRITICAL();
 8005b20:	f7ff fc9a 	bl	8005458 <vPortExitCritical>
	taskENTER_CRITICAL();
 8005b24:	f7ff fc76 	bl	8005414 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8005b28:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005b2c:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005b2e:	2d00      	cmp	r5, #0
 8005b30:	dc04      	bgt.n	8005b3c <xQueueReceive+0x9c>
 8005b32:	e011      	b.n	8005b58 <xQueueReceive+0xb8>
			--cTxLock;
 8005b34:	1e6b      	subs	r3, r5, #1
 8005b36:	b2da      	uxtb	r2, r3
 8005b38:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005b3a:	b16a      	cbz	r2, 8005b58 <xQueueReceive+0xb8>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b3e:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b40:	b153      	cbz	r3, 8005b58 <xQueueReceive+0xb8>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b42:	f000 ffad 	bl	8006aa0 <xTaskRemoveFromEventList>
 8005b46:	2800      	cmp	r0, #0
 8005b48:	d0f4      	beq.n	8005b34 <xQueueReceive+0x94>
						vTaskMissedYield();
 8005b4a:	f001 f845 	bl	8006bd8 <vTaskMissedYield>
			--cTxLock;
 8005b4e:	1e6b      	subs	r3, r5, #1
 8005b50:	b2da      	uxtb	r2, r3
 8005b52:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005b54:	2a00      	cmp	r2, #0
 8005b56:	d1f1      	bne.n	8005b3c <xQueueReceive+0x9c>
		pxQueue->cTxLock = queueUNLOCKED;
 8005b58:	23ff      	movs	r3, #255	; 0xff
 8005b5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8005b5e:	f7ff fc7b 	bl	8005458 <vPortExitCritical>
	taskENTER_CRITICAL();
 8005b62:	f7ff fc57 	bl	8005414 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8005b66:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005b6a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005b6c:	2d00      	cmp	r5, #0
 8005b6e:	dd14      	ble.n	8005b9a <xQueueReceive+0xfa>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b70:	f104 0910 	add.w	r9, r4, #16
 8005b74:	e003      	b.n	8005b7e <xQueueReceive+0xde>
				--cRxLock;
 8005b76:	1e6b      	subs	r3, r5, #1
 8005b78:	b2da      	uxtb	r2, r3
 8005b7a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005b7c:	b16a      	cbz	r2, 8005b9a <xQueueReceive+0xfa>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b7e:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b80:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b82:	b153      	cbz	r3, 8005b9a <xQueueReceive+0xfa>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b84:	f000 ff8c 	bl	8006aa0 <xTaskRemoveFromEventList>
 8005b88:	2800      	cmp	r0, #0
 8005b8a:	d0f4      	beq.n	8005b76 <xQueueReceive+0xd6>
					vTaskMissedYield();
 8005b8c:	f001 f824 	bl	8006bd8 <vTaskMissedYield>
				--cRxLock;
 8005b90:	1e6b      	subs	r3, r5, #1
 8005b92:	b2da      	uxtb	r2, r3
 8005b94:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005b96:	2a00      	cmp	r2, #0
 8005b98:	d1f1      	bne.n	8005b7e <xQueueReceive+0xde>
		pxQueue->cRxLock = queueUNLOCKED;
 8005b9a:	23ff      	movs	r3, #255	; 0xff
 8005b9c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8005ba0:	f7ff fc5a 	bl	8005458 <vPortExitCritical>
				( void ) xTaskResumeAll();
 8005ba4:	f000 fde4 	bl	8006770 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8005ba8:	f7ff fc34 	bl	8005414 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005bac:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005bae:	2d00      	cmp	r5, #0
 8005bb0:	d07d      	beq.n	8005cae <xQueueReceive+0x20e>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005bb2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005bb4:	b152      	cbz	r2, 8005bcc <xQueueReceive+0x12c>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005bb6:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005bb8:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005bba:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005bbc:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005bbe:	60e1      	str	r1, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005bc0:	bf24      	itt	cs
 8005bc2:	6821      	ldrcs	r1, [r4, #0]
 8005bc4:	60e1      	strcs	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005bc6:	4638      	mov	r0, r7
 8005bc8:	f003 fb3a 	bl	8009240 <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005bcc:	3d01      	subs	r5, #1
 8005bce:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005bd0:	6923      	ldr	r3, [r4, #16]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	f040 80d3 	bne.w	8005d7e <xQueueReceive+0x2de>
				taskEXIT_CRITICAL();
 8005bd8:	f7ff fc3e 	bl	8005458 <vPortExitCritical>
				return pdPASS;
 8005bdc:	2001      	movs	r0, #1
 8005bde:	e06d      	b.n	8005cbc <xQueueReceive+0x21c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005be0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	f43f af68 	beq.w	8005ab8 <xQueueReceive+0x18>
 8005be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bec:	f383 8811 	msr	BASEPRI, r3
 8005bf0:	f3bf 8f6f 	isb	sy
 8005bf4:	f3bf 8f4f 	dsb	sy
 8005bf8:	e7fe      	b.n	8005bf8 <xQueueReceive+0x158>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005bfa:	9b01      	ldr	r3, [sp, #4]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	f43f af60 	beq.w	8005ac2 <xQueueReceive+0x22>
 8005c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c06:	f383 8811 	msr	BASEPRI, r3
 8005c0a:	f3bf 8f6f 	isb	sy
 8005c0e:	f3bf 8f4f 	dsb	sy
 8005c12:	e7fe      	b.n	8005c12 <xQueueReceive+0x172>
	taskENTER_CRITICAL();
 8005c14:	f7ff fbfe 	bl	8005414 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8005c18:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005c1c:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005c1e:	2d00      	cmp	r5, #0
 8005c20:	dc04      	bgt.n	8005c2c <xQueueReceive+0x18c>
 8005c22:	e011      	b.n	8005c48 <xQueueReceive+0x1a8>
			--cTxLock;
 8005c24:	1e6b      	subs	r3, r5, #1
 8005c26:	b2da      	uxtb	r2, r3
 8005c28:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005c2a:	b16a      	cbz	r2, 8005c48 <xQueueReceive+0x1a8>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c2e:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c30:	b153      	cbz	r3, 8005c48 <xQueueReceive+0x1a8>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c32:	f000 ff35 	bl	8006aa0 <xTaskRemoveFromEventList>
 8005c36:	2800      	cmp	r0, #0
 8005c38:	d0f4      	beq.n	8005c24 <xQueueReceive+0x184>
						vTaskMissedYield();
 8005c3a:	f000 ffcd 	bl	8006bd8 <vTaskMissedYield>
			--cTxLock;
 8005c3e:	1e6b      	subs	r3, r5, #1
 8005c40:	b2da      	uxtb	r2, r3
 8005c42:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005c44:	2a00      	cmp	r2, #0
 8005c46:	d1f1      	bne.n	8005c2c <xQueueReceive+0x18c>
		pxQueue->cTxLock = queueUNLOCKED;
 8005c48:	23ff      	movs	r3, #255	; 0xff
 8005c4a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8005c4e:	f7ff fc03 	bl	8005458 <vPortExitCritical>
	taskENTER_CRITICAL();
 8005c52:	f7ff fbdf 	bl	8005414 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8005c56:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005c5a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005c5c:	2d00      	cmp	r5, #0
 8005c5e:	dd14      	ble.n	8005c8a <xQueueReceive+0x1ea>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c60:	f104 0910 	add.w	r9, r4, #16
 8005c64:	e003      	b.n	8005c6e <xQueueReceive+0x1ce>
				--cRxLock;
 8005c66:	1e6b      	subs	r3, r5, #1
 8005c68:	b2da      	uxtb	r2, r3
 8005c6a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005c6c:	b16a      	cbz	r2, 8005c8a <xQueueReceive+0x1ea>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c6e:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c70:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c72:	b153      	cbz	r3, 8005c8a <xQueueReceive+0x1ea>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c74:	f000 ff14 	bl	8006aa0 <xTaskRemoveFromEventList>
 8005c78:	2800      	cmp	r0, #0
 8005c7a:	d0f4      	beq.n	8005c66 <xQueueReceive+0x1c6>
					vTaskMissedYield();
 8005c7c:	f000 ffac 	bl	8006bd8 <vTaskMissedYield>
				--cRxLock;
 8005c80:	1e6b      	subs	r3, r5, #1
 8005c82:	b2da      	uxtb	r2, r3
 8005c84:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005c86:	2a00      	cmp	r2, #0
 8005c88:	d1f1      	bne.n	8005c6e <xQueueReceive+0x1ce>
		pxQueue->cRxLock = queueUNLOCKED;
 8005c8a:	23ff      	movs	r3, #255	; 0xff
 8005c8c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8005c90:	f7ff fbe2 	bl	8005458 <vPortExitCritical>
			( void ) xTaskResumeAll();
 8005c94:	f000 fd6c 	bl	8006770 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8005c98:	f7ff fbbc 	bl	8005414 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005c9c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005c9e:	b153      	cbz	r3, 8005cb6 <xQueueReceive+0x216>
	taskEXIT_CRITICAL();
 8005ca0:	f7ff fbda 	bl	8005458 <vPortExitCritical>
		taskENTER_CRITICAL();
 8005ca4:	f7ff fbb6 	bl	8005414 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ca8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005caa:	2d00      	cmp	r5, #0
 8005cac:	d181      	bne.n	8005bb2 <xQueueReceive+0x112>
				if( xTicksToWait == ( TickType_t ) 0 )
 8005cae:	9b01      	ldr	r3, [sp, #4]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	f47f af15 	bne.w	8005ae0 <xQueueReceive+0x40>
					taskEXIT_CRITICAL();
 8005cb6:	f7ff fbcf 	bl	8005458 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8005cba:	2000      	movs	r0, #0
}
 8005cbc:	b005      	add	sp, #20
 8005cbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
 8005cc2:	f7ff fbc9 	bl	8005458 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005cc6:	9901      	ldr	r1, [sp, #4]
 8005cc8:	4630      	mov	r0, r6
 8005cca:	f000 fe39 	bl	8006940 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 8005cce:	f7ff fba1 	bl	8005414 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8005cd2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005cd6:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005cd8:	2d00      	cmp	r5, #0
 8005cda:	dc04      	bgt.n	8005ce6 <xQueueReceive+0x246>
 8005cdc:	e011      	b.n	8005d02 <xQueueReceive+0x262>
			--cTxLock;
 8005cde:	1e6b      	subs	r3, r5, #1
 8005ce0:	b2da      	uxtb	r2, r3
 8005ce2:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ce4:	b16a      	cbz	r2, 8005d02 <xQueueReceive+0x262>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ce6:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ce8:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005cea:	b153      	cbz	r3, 8005d02 <xQueueReceive+0x262>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005cec:	f000 fed8 	bl	8006aa0 <xTaskRemoveFromEventList>
 8005cf0:	2800      	cmp	r0, #0
 8005cf2:	d0f4      	beq.n	8005cde <xQueueReceive+0x23e>
						vTaskMissedYield();
 8005cf4:	f000 ff70 	bl	8006bd8 <vTaskMissedYield>
			--cTxLock;
 8005cf8:	1e6b      	subs	r3, r5, #1
 8005cfa:	b2da      	uxtb	r2, r3
 8005cfc:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005cfe:	2a00      	cmp	r2, #0
 8005d00:	d1f1      	bne.n	8005ce6 <xQueueReceive+0x246>
		pxQueue->cTxLock = queueUNLOCKED;
 8005d02:	23ff      	movs	r3, #255	; 0xff
 8005d04:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8005d08:	f7ff fba6 	bl	8005458 <vPortExitCritical>
	taskENTER_CRITICAL();
 8005d0c:	f7ff fb82 	bl	8005414 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8005d10:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005d14:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d16:	2d00      	cmp	r5, #0
 8005d18:	dd14      	ble.n	8005d44 <xQueueReceive+0x2a4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d1a:	f104 0910 	add.w	r9, r4, #16
 8005d1e:	e003      	b.n	8005d28 <xQueueReceive+0x288>
				--cRxLock;
 8005d20:	1e6b      	subs	r3, r5, #1
 8005d22:	b2da      	uxtb	r2, r3
 8005d24:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d26:	b16a      	cbz	r2, 8005d44 <xQueueReceive+0x2a4>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d28:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d2a:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d2c:	b153      	cbz	r3, 8005d44 <xQueueReceive+0x2a4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d2e:	f000 feb7 	bl	8006aa0 <xTaskRemoveFromEventList>
 8005d32:	2800      	cmp	r0, #0
 8005d34:	d0f4      	beq.n	8005d20 <xQueueReceive+0x280>
					vTaskMissedYield();
 8005d36:	f000 ff4f 	bl	8006bd8 <vTaskMissedYield>
				--cRxLock;
 8005d3a:	1e6b      	subs	r3, r5, #1
 8005d3c:	b2da      	uxtb	r2, r3
 8005d3e:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d40:	2a00      	cmp	r2, #0
 8005d42:	d1f1      	bne.n	8005d28 <xQueueReceive+0x288>
		pxQueue->cRxLock = queueUNLOCKED;
 8005d44:	23ff      	movs	r3, #255	; 0xff
 8005d46:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8005d4a:	f7ff fb85 	bl	8005458 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 8005d4e:	f000 fd0f 	bl	8006770 <xTaskResumeAll>
 8005d52:	2800      	cmp	r0, #0
 8005d54:	d1a6      	bne.n	8005ca4 <xQueueReceive+0x204>
					portYIELD_WITHIN_API();
 8005d56:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005d5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d5e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005d62:	f3bf 8f4f 	dsb	sy
 8005d66:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
 8005d6a:	e79b      	b.n	8005ca4 <xQueueReceive+0x204>
 8005d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d70:	f383 8811 	msr	BASEPRI, r3
 8005d74:	f3bf 8f6f 	isb	sy
 8005d78:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8005d7c:	e7fe      	b.n	8005d7c <xQueueReceive+0x2dc>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d7e:	f104 0010 	add.w	r0, r4, #16
 8005d82:	f000 fe8d 	bl	8006aa0 <xTaskRemoveFromEventList>
 8005d86:	2800      	cmp	r0, #0
 8005d88:	f43f af26 	beq.w	8005bd8 <xQueueReceive+0x138>
						queueYIELD_IF_USING_PREEMPTION();
 8005d8c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005d90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d94:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005d98:	f3bf 8f4f 	dsb	sy
 8005d9c:	f3bf 8f6f 	isb	sy
 8005da0:	e71a      	b.n	8005bd8 <xQueueReceive+0x138>
 8005da2:	bf00      	nop

08005da4 <vQueueAddToRegistry>:

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005da4:	4b12      	ldr	r3, [pc, #72]	; (8005df0 <vQueueAddToRegistry+0x4c>)
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	b17a      	cbz	r2, 8005dca <vQueueAddToRegistry+0x26>
 8005daa:	689a      	ldr	r2, [r3, #8]
 8005dac:	b162      	cbz	r2, 8005dc8 <vQueueAddToRegistry+0x24>
 8005dae:	691a      	ldr	r2, [r3, #16]
 8005db0:	b192      	cbz	r2, 8005dd8 <vQueueAddToRegistry+0x34>
 8005db2:	699a      	ldr	r2, [r3, #24]
 8005db4:	b192      	cbz	r2, 8005ddc <vQueueAddToRegistry+0x38>
 8005db6:	6a1a      	ldr	r2, [r3, #32]
 8005db8:	b192      	cbz	r2, 8005de0 <vQueueAddToRegistry+0x3c>
 8005dba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005dbc:	b192      	cbz	r2, 8005de4 <vQueueAddToRegistry+0x40>
 8005dbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005dc0:	b192      	cbz	r2, 8005de8 <vQueueAddToRegistry+0x44>
 8005dc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dc4:	b192      	cbz	r2, 8005dec <vQueueAddToRegistry+0x48>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005dc6:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005dc8:	2201      	movs	r2, #1
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005dca:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005dce:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005dd2:	f8cc 0004 	str.w	r0, [ip, #4]
	}
 8005dd6:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005dd8:	2202      	movs	r2, #2
 8005dda:	e7f6      	b.n	8005dca <vQueueAddToRegistry+0x26>
 8005ddc:	2203      	movs	r2, #3
 8005dde:	e7f4      	b.n	8005dca <vQueueAddToRegistry+0x26>
 8005de0:	2204      	movs	r2, #4
 8005de2:	e7f2      	b.n	8005dca <vQueueAddToRegistry+0x26>
 8005de4:	2205      	movs	r2, #5
 8005de6:	e7f0      	b.n	8005dca <vQueueAddToRegistry+0x26>
 8005de8:	2206      	movs	r2, #6
 8005dea:	e7ee      	b.n	8005dca <vQueueAddToRegistry+0x26>
 8005dec:	2207      	movs	r2, #7
 8005dee:	e7ec      	b.n	8005dca <vQueueAddToRegistry+0x26>
 8005df0:	20004d80 	.word	0x20004d80

08005df4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005df4:	b570      	push	{r4, r5, r6, lr}
 8005df6:	4605      	mov	r5, r0
 8005df8:	460e      	mov	r6, r1
 8005dfa:	4614      	mov	r4, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005dfc:	f7ff fb0a 	bl	8005414 <vPortEnterCritical>
 8005e00:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
 8005e04:	2bff      	cmp	r3, #255	; 0xff
 8005e06:	bf04      	itt	eq
 8005e08:	2300      	moveq	r3, #0
 8005e0a:	f885 3044 	strbeq.w	r3, [r5, #68]	; 0x44
 8005e0e:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 8005e12:	2bff      	cmp	r3, #255	; 0xff
 8005e14:	bf04      	itt	eq
 8005e16:	2300      	moveq	r3, #0
 8005e18:	f885 3045 	strbeq.w	r3, [r5, #69]	; 0x45
 8005e1c:	f7ff fb1c 	bl	8005458 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005e20:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d043      	beq.n	8005eae <vQueueWaitForMessageRestricted+0xba>
	taskENTER_CRITICAL();
 8005e26:	f7ff faf5 	bl	8005414 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8005e2a:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 8005e2e:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005e30:	2c00      	cmp	r4, #0
 8005e32:	dd14      	ble.n	8005e5e <vQueueWaitForMessageRestricted+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e34:	f105 0624 	add.w	r6, r5, #36	; 0x24
 8005e38:	e003      	b.n	8005e42 <vQueueWaitForMessageRestricted+0x4e>
			--cTxLock;
 8005e3a:	1e63      	subs	r3, r4, #1
 8005e3c:	b2da      	uxtb	r2, r3
 8005e3e:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005e40:	b16a      	cbz	r2, 8005e5e <vQueueWaitForMessageRestricted+0x6a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e42:	6a6b      	ldr	r3, [r5, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e44:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e46:	b153      	cbz	r3, 8005e5e <vQueueWaitForMessageRestricted+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e48:	f000 fe2a 	bl	8006aa0 <xTaskRemoveFromEventList>
 8005e4c:	2800      	cmp	r0, #0
 8005e4e:	d0f4      	beq.n	8005e3a <vQueueWaitForMessageRestricted+0x46>
						vTaskMissedYield();
 8005e50:	f000 fec2 	bl	8006bd8 <vTaskMissedYield>
			--cTxLock;
 8005e54:	1e63      	subs	r3, r4, #1
 8005e56:	b2da      	uxtb	r2, r3
 8005e58:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005e5a:	2a00      	cmp	r2, #0
 8005e5c:	d1f1      	bne.n	8005e42 <vQueueWaitForMessageRestricted+0x4e>
		pxQueue->cTxLock = queueUNLOCKED;
 8005e5e:	23ff      	movs	r3, #255	; 0xff
 8005e60:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8005e64:	f7ff faf8 	bl	8005458 <vPortExitCritical>
	taskENTER_CRITICAL();
 8005e68:	f7ff fad4 	bl	8005414 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8005e6c:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
 8005e70:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005e72:	2c00      	cmp	r4, #0
 8005e74:	dd14      	ble.n	8005ea0 <vQueueWaitForMessageRestricted+0xac>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e76:	f105 0610 	add.w	r6, r5, #16
 8005e7a:	e003      	b.n	8005e84 <vQueueWaitForMessageRestricted+0x90>
				--cRxLock;
 8005e7c:	1e63      	subs	r3, r4, #1
 8005e7e:	b2da      	uxtb	r2, r3
 8005e80:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005e82:	b16a      	cbz	r2, 8005ea0 <vQueueWaitForMessageRestricted+0xac>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e84:	692b      	ldr	r3, [r5, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e86:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e88:	b153      	cbz	r3, 8005ea0 <vQueueWaitForMessageRestricted+0xac>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e8a:	f000 fe09 	bl	8006aa0 <xTaskRemoveFromEventList>
 8005e8e:	2800      	cmp	r0, #0
 8005e90:	d0f4      	beq.n	8005e7c <vQueueWaitForMessageRestricted+0x88>
					vTaskMissedYield();
 8005e92:	f000 fea1 	bl	8006bd8 <vTaskMissedYield>
				--cRxLock;
 8005e96:	1e63      	subs	r3, r4, #1
 8005e98:	b2da      	uxtb	r2, r3
 8005e9a:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005e9c:	2a00      	cmp	r2, #0
 8005e9e:	d1f1      	bne.n	8005e84 <vQueueWaitForMessageRestricted+0x90>
		pxQueue->cRxLock = queueUNLOCKED;
 8005ea0:	23ff      	movs	r3, #255	; 0xff
 8005ea2:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
	}
 8005ea6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8005eaa:	f7ff bad5 	b.w	8005458 <vPortExitCritical>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005eae:	4622      	mov	r2, r4
 8005eb0:	4631      	mov	r1, r6
 8005eb2:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8005eb6:	f000 fd93 	bl	80069e0 <vTaskPlaceOnEventListRestricted>
 8005eba:	e7b4      	b.n	8005e26 <vQueueWaitForMessageRestricted+0x32>

08005ebc <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005ebc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ec0:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005ec2:	f7ff faa7 	bl	8005414 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005ec6:	4a34      	ldr	r2, [pc, #208]	; (8005f98 <prvAddNewTaskToReadyList+0xdc>)
		if( pxCurrentTCB == NULL )
 8005ec8:	4d34      	ldr	r5, [pc, #208]	; (8005f9c <prvAddNewTaskToReadyList+0xe0>)
		uxCurrentNumberOfTasks++;
 8005eca:	6813      	ldr	r3, [r2, #0]
 8005ecc:	3301      	adds	r3, #1
 8005ece:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005ed0:	682b      	ldr	r3, [r5, #0]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d032      	beq.n	8005f3c <prvAddNewTaskToReadyList+0x80>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005ed6:	4e32      	ldr	r6, [pc, #200]	; (8005fa0 <prvAddNewTaskToReadyList+0xe4>)
 8005ed8:	6833      	ldr	r3, [r6, #0]
 8005eda:	b33b      	cbz	r3, 8005f2c <prvAddNewTaskToReadyList+0x70>
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005edc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005ede:	4f31      	ldr	r7, [pc, #196]	; (8005fa4 <prvAddNewTaskToReadyList+0xe8>)
		uxTaskNumber++;
 8005ee0:	4831      	ldr	r0, [pc, #196]	; (8005fa8 <prvAddNewTaskToReadyList+0xec>)
		prvAddTaskToReadyList( pxNewTCB );
 8005ee2:	4932      	ldr	r1, [pc, #200]	; (8005fac <prvAddNewTaskToReadyList+0xf0>)
		uxTaskNumber++;
 8005ee4:	6802      	ldr	r2, [r0, #0]
 8005ee6:	3201      	adds	r2, #1
 8005ee8:	6002      	str	r2, [r0, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8005eea:	6808      	ldr	r0, [r1, #0]
 8005eec:	2201      	movs	r2, #1
 8005eee:	409a      	lsls	r2, r3
 8005ef0:	4302      	orrs	r2, r0
 8005ef2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005ef6:	600a      	str	r2, [r1, #0]
 8005ef8:	eb07 0083 	add.w	r0, r7, r3, lsl #2
 8005efc:	1d21      	adds	r1, r4, #4
 8005efe:	f7ff f9e9 	bl	80052d4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005f02:	f7ff faa9 	bl	8005458 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005f06:	6833      	ldr	r3, [r6, #0]
 8005f08:	b173      	cbz	r3, 8005f28 <prvAddNewTaskToReadyList+0x6c>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005f0a:	682a      	ldr	r2, [r5, #0]
 8005f0c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005f0e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d209      	bcs.n	8005f28 <prvAddNewTaskToReadyList+0x6c>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005f14:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005f18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f1c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005f20:	f3bf 8f4f 	dsb	sy
 8005f24:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005f2c:	682a      	ldr	r2, [r5, #0]
 8005f2e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005f30:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005f32:	4f1c      	ldr	r7, [pc, #112]	; (8005fa4 <prvAddNewTaskToReadyList+0xe8>)
 8005f34:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8005f36:	bf98      	it	ls
 8005f38:	602c      	strls	r4, [r5, #0]
 8005f3a:	e7d1      	b.n	8005ee0 <prvAddNewTaskToReadyList+0x24>
			pxCurrentTCB = pxNewTCB;
 8005f3c:	602c      	str	r4, [r5, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005f3e:	6813      	ldr	r3, [r2, #0]
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d003      	beq.n	8005f4c <prvAddNewTaskToReadyList+0x90>
		prvAddTaskToReadyList( pxNewTCB );
 8005f44:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005f46:	4f17      	ldr	r7, [pc, #92]	; (8005fa4 <prvAddNewTaskToReadyList+0xe8>)
 8005f48:	4e15      	ldr	r6, [pc, #84]	; (8005fa0 <prvAddNewTaskToReadyList+0xe4>)
 8005f4a:	e7c9      	b.n	8005ee0 <prvAddNewTaskToReadyList+0x24>
 8005f4c:	4f15      	ldr	r7, [pc, #84]	; (8005fa4 <prvAddNewTaskToReadyList+0xe8>)
 8005f4e:	463e      	mov	r6, r7
 8005f50:	f107 088c 	add.w	r8, r7, #140	; 0x8c
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005f54:	4630      	mov	r0, r6
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f56:	3614      	adds	r6, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005f58:	f7ff f9ac 	bl	80052b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f5c:	45b0      	cmp	r8, r6
 8005f5e:	d1f9      	bne.n	8005f54 <prvAddNewTaskToReadyList+0x98>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005f60:	f8df 9060 	ldr.w	r9, [pc, #96]	; 8005fc4 <prvAddNewTaskToReadyList+0x108>
	vListInitialise( &xDelayedTaskList2 );
 8005f64:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8005fc8 <prvAddNewTaskToReadyList+0x10c>
 8005f68:	4e0d      	ldr	r6, [pc, #52]	; (8005fa0 <prvAddNewTaskToReadyList+0xe4>)
	vListInitialise( &xDelayedTaskList1 );
 8005f6a:	4648      	mov	r0, r9
 8005f6c:	f7ff f9a2 	bl	80052b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005f70:	4640      	mov	r0, r8
 8005f72:	f7ff f99f 	bl	80052b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005f76:	480e      	ldr	r0, [pc, #56]	; (8005fb0 <prvAddNewTaskToReadyList+0xf4>)
 8005f78:	f7ff f99c 	bl	80052b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005f7c:	480d      	ldr	r0, [pc, #52]	; (8005fb4 <prvAddNewTaskToReadyList+0xf8>)
 8005f7e:	f7ff f999 	bl	80052b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005f82:	480d      	ldr	r0, [pc, #52]	; (8005fb8 <prvAddNewTaskToReadyList+0xfc>)
 8005f84:	f7ff f996 	bl	80052b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005f88:	4b0c      	ldr	r3, [pc, #48]	; (8005fbc <prvAddNewTaskToReadyList+0x100>)
 8005f8a:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005f8e:	4b0c      	ldr	r3, [pc, #48]	; (8005fc0 <prvAddNewTaskToReadyList+0x104>)
 8005f90:	f8c3 8000 	str.w	r8, [r3]
		prvAddTaskToReadyList( pxNewTCB );
 8005f94:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
}
 8005f96:	e7a3      	b.n	8005ee0 <prvAddNewTaskToReadyList+0x24>
 8005f98:	20004e58 	.word	0x20004e58
 8005f9c:	20004dc0 	.word	0x20004dc0
 8005fa0:	20004eb4 	.word	0x20004eb4
 8005fa4:	20004dcc 	.word	0x20004dcc
 8005fa8:	20004e64 	.word	0x20004e64
 8005fac:	20004e68 	.word	0x20004e68
 8005fb0:	20004ea0 	.word	0x20004ea0
 8005fb4:	20004ecc 	.word	0x20004ecc
 8005fb8:	20004eb8 	.word	0x20004eb8
 8005fbc:	20004dc4 	.word	0x20004dc4
 8005fc0:	20004dc8 	.word	0x20004dc8
 8005fc4:	20004e6c 	.word	0x20004e6c
 8005fc8:	20004e80 	.word	0x20004e80

08005fcc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005fce:	4b1b      	ldr	r3, [pc, #108]	; (800603c <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005fd0:	4e1b      	ldr	r6, [pc, #108]	; (8006040 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8005fd2:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005fd4:	6833      	ldr	r3, [r6, #0]
{
 8005fd6:	4605      	mov	r5, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005fd8:	1d18      	adds	r0, r3, #4
{
 8005fda:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005fdc:	f7ff f9a2 	bl	8005324 <uxListRemove>
 8005fe0:	b948      	cbnz	r0, 8005ff6 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005fe2:	6833      	ldr	r3, [r6, #0]
 8005fe4:	4917      	ldr	r1, [pc, #92]	; (8006044 <prvAddCurrentTaskToDelayedList+0x78>)
 8005fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fe8:	2301      	movs	r3, #1
 8005fea:	fa03 f202 	lsl.w	r2, r3, r2
 8005fee:	680b      	ldr	r3, [r1, #0]
 8005ff0:	ea23 0302 	bic.w	r3, r3, r2
 8005ff4:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005ff6:	1c6b      	adds	r3, r5, #1
 8005ff8:	d017      	beq.n	800602a <prvAddCurrentTaskToDelayedList+0x5e>
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005ffa:	6833      	ldr	r3, [r6, #0]
 8005ffc:	1964      	adds	r4, r4, r5
 8005ffe:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8006000:	d307      	bcc.n	8006012 <prvAddCurrentTaskToDelayedList+0x46>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006002:	4b11      	ldr	r3, [pc, #68]	; (8006048 <prvAddCurrentTaskToDelayedList+0x7c>)
 8006004:	6818      	ldr	r0, [r3, #0]
 8006006:	6831      	ldr	r1, [r6, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006008:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800600c:	3104      	adds	r1, #4
 800600e:	f7ff b971 	b.w	80052f4 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006012:	4b0e      	ldr	r3, [pc, #56]	; (800604c <prvAddCurrentTaskToDelayedList+0x80>)
 8006014:	6818      	ldr	r0, [r3, #0]
 8006016:	6831      	ldr	r1, [r6, #0]
 8006018:	3104      	adds	r1, #4
 800601a:	f7ff f96b 	bl	80052f4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800601e:	4b0c      	ldr	r3, [pc, #48]	; (8006050 <prvAddCurrentTaskToDelayedList+0x84>)
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 8006024:	bf88      	it	hi
 8006026:	601c      	strhi	r4, [r3, #0]
}
 8006028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800602a:	2f00      	cmp	r7, #0
 800602c:	d0e5      	beq.n	8005ffa <prvAddCurrentTaskToDelayedList+0x2e>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800602e:	6831      	ldr	r1, [r6, #0]
 8006030:	4808      	ldr	r0, [pc, #32]	; (8006054 <prvAddCurrentTaskToDelayedList+0x88>)
}
 8006032:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006036:	3104      	adds	r1, #4
 8006038:	f7ff b94c 	b.w	80052d4 <vListInsertEnd>
 800603c:	20004ee0 	.word	0x20004ee0
 8006040:	20004dc0 	.word	0x20004dc0
 8006044:	20004e68 	.word	0x20004e68
 8006048:	20004dc8 	.word	0x20004dc8
 800604c:	20004dc4 	.word	0x20004dc4
 8006050:	20004e94 	.word	0x20004e94
 8006054:	20004eb8 	.word	0x20004eb8

08006058 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8006058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800605c:	e9dd 8409 	ldrd	r8, r4, [sp, #36]	; 0x24
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006060:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8006064:	6b26      	ldr	r6, [r4, #48]	; 0x30
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8006066:	9d08      	ldr	r5, [sp, #32]
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006068:	3a01      	subs	r2, #1
 800606a:	eb06 0682 	add.w	r6, r6, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800606e:	4607      	mov	r7, r0
 8006070:	4699      	mov	r9, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006072:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 8006076:	2900      	cmp	r1, #0
 8006078:	f000 8089 	beq.w	800618e <prvInitialiseNewTask.constprop.0+0x136>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800607c:	780b      	ldrb	r3, [r1, #0]
 800607e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8006082:	780b      	ldrb	r3, [r1, #0]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d04d      	beq.n	8006124 <prvInitialiseNewTask.constprop.0+0xcc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006088:	784b      	ldrb	r3, [r1, #1]
 800608a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
			if( pcName[ x ] == ( char ) 0x00 )
 800608e:	784b      	ldrb	r3, [r1, #1]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d047      	beq.n	8006124 <prvInitialiseNewTask.constprop.0+0xcc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006094:	788b      	ldrb	r3, [r1, #2]
 8006096:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
			if( pcName[ x ] == ( char ) 0x00 )
 800609a:	788b      	ldrb	r3, [r1, #2]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d041      	beq.n	8006124 <prvInitialiseNewTask.constprop.0+0xcc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80060a0:	78cb      	ldrb	r3, [r1, #3]
 80060a2:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
			if( pcName[ x ] == ( char ) 0x00 )
 80060a6:	78cb      	ldrb	r3, [r1, #3]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d03b      	beq.n	8006124 <prvInitialiseNewTask.constprop.0+0xcc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80060ac:	790b      	ldrb	r3, [r1, #4]
 80060ae:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
			if( pcName[ x ] == ( char ) 0x00 )
 80060b2:	790b      	ldrb	r3, [r1, #4]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d035      	beq.n	8006124 <prvInitialiseNewTask.constprop.0+0xcc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80060b8:	794b      	ldrb	r3, [r1, #5]
 80060ba:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
			if( pcName[ x ] == ( char ) 0x00 )
 80060be:	794b      	ldrb	r3, [r1, #5]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d02f      	beq.n	8006124 <prvInitialiseNewTask.constprop.0+0xcc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80060c4:	798b      	ldrb	r3, [r1, #6]
 80060c6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
			if( pcName[ x ] == ( char ) 0x00 )
 80060ca:	798b      	ldrb	r3, [r1, #6]
 80060cc:	b353      	cbz	r3, 8006124 <prvInitialiseNewTask.constprop.0+0xcc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80060ce:	79cb      	ldrb	r3, [r1, #7]
 80060d0:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
			if( pcName[ x ] == ( char ) 0x00 )
 80060d4:	79cb      	ldrb	r3, [r1, #7]
 80060d6:	b32b      	cbz	r3, 8006124 <prvInitialiseNewTask.constprop.0+0xcc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80060d8:	7a0b      	ldrb	r3, [r1, #8]
 80060da:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
			if( pcName[ x ] == ( char ) 0x00 )
 80060de:	7a0b      	ldrb	r3, [r1, #8]
 80060e0:	b303      	cbz	r3, 8006124 <prvInitialiseNewTask.constprop.0+0xcc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80060e2:	7a4b      	ldrb	r3, [r1, #9]
 80060e4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
			if( pcName[ x ] == ( char ) 0x00 )
 80060e8:	7a4b      	ldrb	r3, [r1, #9]
 80060ea:	b1db      	cbz	r3, 8006124 <prvInitialiseNewTask.constprop.0+0xcc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80060ec:	7a8b      	ldrb	r3, [r1, #10]
 80060ee:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
			if( pcName[ x ] == ( char ) 0x00 )
 80060f2:	7a8b      	ldrb	r3, [r1, #10]
 80060f4:	b1b3      	cbz	r3, 8006124 <prvInitialiseNewTask.constprop.0+0xcc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80060f6:	7acb      	ldrb	r3, [r1, #11]
 80060f8:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
			if( pcName[ x ] == ( char ) 0x00 )
 80060fc:	7acb      	ldrb	r3, [r1, #11]
 80060fe:	b18b      	cbz	r3, 8006124 <prvInitialiseNewTask.constprop.0+0xcc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006100:	7b0b      	ldrb	r3, [r1, #12]
 8006102:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
			if( pcName[ x ] == ( char ) 0x00 )
 8006106:	7b0b      	ldrb	r3, [r1, #12]
 8006108:	b163      	cbz	r3, 8006124 <prvInitialiseNewTask.constprop.0+0xcc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800610a:	7b4b      	ldrb	r3, [r1, #13]
 800610c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
			if( pcName[ x ] == ( char ) 0x00 )
 8006110:	7b4b      	ldrb	r3, [r1, #13]
 8006112:	b13b      	cbz	r3, 8006124 <prvInitialiseNewTask.constprop.0+0xcc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006114:	7b8b      	ldrb	r3, [r1, #14]
 8006116:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
			if( pcName[ x ] == ( char ) 0x00 )
 800611a:	7b8b      	ldrb	r3, [r1, #14]
 800611c:	b113      	cbz	r3, 8006124 <prvInitialiseNewTask.constprop.0+0xcc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800611e:	7bcb      	ldrb	r3, [r1, #15]
 8006120:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006124:	2300      	movs	r3, #0
 8006126:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800612a:	2d06      	cmp	r5, #6
 800612c:	bf28      	it	cs
 800612e:	2506      	movcs	r5, #6
		pxNewTCB->uxMutexesHeld = 0;
 8006130:	f04f 0a00 	mov.w	sl, #0
	pxNewTCB->uxPriority = uxPriority;
 8006134:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8006136:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006138:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 800613a:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800613e:	f7ff f8c5 	bl	80052cc <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006142:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006146:	f104 0018 	add.w	r0, r4, #24
 800614a:	f7ff f8bf 	bl	80052cc <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800614e:	f8c4 a0ac 	str.w	sl, [r4, #172]	; 0xac
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006152:	4651      	mov	r1, sl
 8006154:	2260      	movs	r2, #96	; 0x60
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006156:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006158:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800615a:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800615c:	f884 a0b0 	strb.w	sl, [r4, #176]	; 0xb0
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006160:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8006164:	f003 f87a 	bl	800925c <memset>
 8006168:	4b0a      	ldr	r3, [pc, #40]	; (8006194 <prvInitialiseNewTask.constprop.0+0x13c>)
 800616a:	6523      	str	r3, [r4, #80]	; 0x50
 800616c:	4b0a      	ldr	r3, [pc, #40]	; (8006198 <prvInitialiseNewTask.constprop.0+0x140>)
 800616e:	6563      	str	r3, [r4, #84]	; 0x54
 8006170:	4b0a      	ldr	r3, [pc, #40]	; (800619c <prvInitialiseNewTask.constprop.0+0x144>)
 8006172:	65a3      	str	r3, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006174:	464a      	mov	r2, r9
 8006176:	4639      	mov	r1, r7
 8006178:	4630      	mov	r0, r6
 800617a:	f7ff f925 	bl	80053c8 <pxPortInitialiseStack>
 800617e:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8006180:	f1b8 0f00 	cmp.w	r8, #0
 8006184:	d001      	beq.n	800618a <prvInitialiseNewTask.constprop.0+0x132>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006186:	f8c8 4000 	str.w	r4, [r8]
}
 800618a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800618e:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
 8006192:	e7ca      	b.n	800612a <prvInitialiseNewTask.constprop.0+0xd2>
 8006194:	080097c0 	.word	0x080097c0
 8006198:	080097e0 	.word	0x080097e0
 800619c:	080097a0 	.word	0x080097a0

080061a0 <prvIdleTask>:
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	4d23      	ldr	r5, [pc, #140]	; (8006230 <prvIdleTask+0x90>)
 80061a4:	4f23      	ldr	r7, [pc, #140]	; (8006234 <prvIdleTask+0x94>)
 80061a6:	4e24      	ldr	r6, [pc, #144]	; (8006238 <prvIdleTask+0x98>)
 80061a8:	f8df 8090 	ldr.w	r8, [pc, #144]	; 800623c <prvIdleTask+0x9c>
				taskYIELD();
 80061ac:	f04f 2ae0 	mov.w	sl, #3758153728	; 0xe000e000
 80061b0:	f04f 5980 	mov.w	r9, #268435456	; 0x10000000
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80061b4:	682b      	ldr	r3, [r5, #0]
 80061b6:	b35b      	cbz	r3, 8006210 <prvIdleTask+0x70>
			taskENTER_CRITICAL();
 80061b8:	f7ff f92c 	bl	8005414 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061c0:	1d20      	adds	r0, r4, #4
 80061c2:	f7ff f8af 	bl	8005324 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80061c6:	6833      	ldr	r3, [r6, #0]
 80061c8:	3b01      	subs	r3, #1
 80061ca:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 80061cc:	682b      	ldr	r3, [r5, #0]
 80061ce:	3b01      	subs	r3, #1
 80061d0:	602b      	str	r3, [r5, #0]
			taskEXIT_CRITICAL();
 80061d2:	f7ff f941 	bl	8005458 <vPortExitCritical>
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80061d6:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 80061da:	f003 f855 	bl	8009288 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80061de:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
 80061e2:	b163      	cbz	r3, 80061fe <prvIdleTask+0x5e>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d01e      	beq.n	8006226 <prvIdleTask+0x86>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80061e8:	2b02      	cmp	r3, #2
 80061ea:	d0e3      	beq.n	80061b4 <prvIdleTask+0x14>
 80061ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f0:	f383 8811 	msr	BASEPRI, r3
 80061f4:	f3bf 8f6f 	isb	sy
 80061f8:	f3bf 8f4f 	dsb	sy
 80061fc:	e7fe      	b.n	80061fc <prvIdleTask+0x5c>
				vPortFree( pxTCB->pxStack );
 80061fe:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8006200:	f7fe fff6 	bl	80051f0 <vPortFree>
				vPortFree( pxTCB );
 8006204:	4620      	mov	r0, r4
 8006206:	f7fe fff3 	bl	80051f0 <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800620a:	682b      	ldr	r3, [r5, #0]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d1d3      	bne.n	80061b8 <prvIdleTask+0x18>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006210:	f8d8 3000 	ldr.w	r3, [r8]
 8006214:	2b01      	cmp	r3, #1
 8006216:	d9cd      	bls.n	80061b4 <prvIdleTask+0x14>
				taskYIELD();
 8006218:	f8ca 9d04 	str.w	r9, [sl, #3332]	; 0xd04
 800621c:	f3bf 8f4f 	dsb	sy
 8006220:	f3bf 8f6f 	isb	sy
 8006224:	e7c6      	b.n	80061b4 <prvIdleTask+0x14>
				vPortFree( pxTCB );
 8006226:	4620      	mov	r0, r4
 8006228:	f7fe ffe2 	bl	80051f0 <vPortFree>
 800622c:	e7c2      	b.n	80061b4 <prvIdleTask+0x14>
 800622e:	bf00      	nop
 8006230:	20004e5c 	.word	0x20004e5c
 8006234:	20004ecc 	.word	0x20004ecc
 8006238:	20004e58 	.word	0x20004e58
 800623c:	20004dcc 	.word	0x20004dcc

08006240 <xTaskIncrementTick.part.0>:
BaseType_t xTaskIncrementTick( void )
 8006240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006244:	4b4a      	ldr	r3, [pc, #296]	; (8006370 <xTaskIncrementTick.part.0+0x130>)
 8006246:	681d      	ldr	r5, [r3, #0]
 8006248:	3501      	adds	r5, #1
BaseType_t xTaskIncrementTick( void )
 800624a:	b083      	sub	sp, #12
		xTickCount = xConstTickCount;
 800624c:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800624e:	2d00      	cmp	r5, #0
 8006250:	d045      	beq.n	80062de <xTaskIncrementTick.part.0+0x9e>
 8006252:	4b48      	ldr	r3, [pc, #288]	; (8006374 <xTaskIncrementTick.part.0+0x134>)
 8006254:	9301      	str	r3, [sp, #4]
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	429d      	cmp	r5, r3
 800625a:	d34d      	bcc.n	80062f8 <xTaskIncrementTick.part.0+0xb8>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800625c:	4e46      	ldr	r6, [pc, #280]	; (8006378 <xTaskIncrementTick.part.0+0x138>)
 800625e:	f8df 812c 	ldr.w	r8, [pc, #300]	; 800638c <xTaskIncrementTick.part.0+0x14c>
 8006262:	6833      	ldr	r3, [r6, #0]
 8006264:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8006390 <xTaskIncrementTick.part.0+0x150>
 8006268:	681c      	ldr	r4, [r3, #0]
 800626a:	2c00      	cmp	r4, #0
 800626c:	d07a      	beq.n	8006364 <xTaskIncrementTick.part.0+0x124>
					prvAddTaskToReadyList( pxTCB );
 800626e:	4f43      	ldr	r7, [pc, #268]	; (800637c <xTaskIncrementTick.part.0+0x13c>)
BaseType_t xSwitchRequired = pdFALSE;
 8006270:	2400      	movs	r4, #0
					prvAddTaskToReadyList( pxTCB );
 8006272:	f04f 0a01 	mov.w	sl, #1
 8006276:	e024      	b.n	80062c2 <xTaskIncrementTick.part.0+0x82>
 8006278:	9100      	str	r1, [sp, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800627a:	f7ff f853 	bl	8005324 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800627e:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 8006282:	9900      	ldr	r1, [sp, #0]
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006284:	f10b 0018 	add.w	r0, fp, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006288:	b112      	cbz	r2, 8006290 <xTaskIncrementTick.part.0+0x50>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800628a:	f7ff f84b 	bl	8005324 <uxListRemove>
 800628e:	9900      	ldr	r1, [sp, #0]
					prvAddTaskToReadyList( pxTCB );
 8006290:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	fa0a f200 	lsl.w	r2, sl, r0
 800629a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800629e:	431a      	orrs	r2, r3
 80062a0:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 80062a4:	603a      	str	r2, [r7, #0]
 80062a6:	f7ff f815 	bl	80052d4 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80062aa:	f8d9 2000 	ldr.w	r2, [r9]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80062ae:	6830      	ldr	r0, [r6, #0]
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80062b0:	f8db 102c 	ldr.w	r1, [fp, #44]	; 0x2c
 80062b4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80062b6:	6803      	ldr	r3, [r0, #0]
							xSwitchRequired = pdTRUE;
 80062b8:	4291      	cmp	r1, r2
 80062ba:	bf28      	it	cs
 80062bc:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d050      	beq.n	8006364 <xTaskIncrementTick.part.0+0x124>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062c2:	6833      	ldr	r3, [r6, #0]
 80062c4:	68db      	ldr	r3, [r3, #12]
 80062c6:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80062ca:	f8db 2004 	ldr.w	r2, [fp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062ce:	f10b 0104 	add.w	r1, fp, #4
					if( xConstTickCount < xItemValue )
 80062d2:	4295      	cmp	r5, r2
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062d4:	4608      	mov	r0, r1
					if( xConstTickCount < xItemValue )
 80062d6:	d2cf      	bcs.n	8006278 <xTaskIncrementTick.part.0+0x38>
						xNextTaskUnblockTime = xItemValue;
 80062d8:	9b01      	ldr	r3, [sp, #4]
 80062da:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80062dc:	e011      	b.n	8006302 <xTaskIncrementTick.part.0+0xc2>
			taskSWITCH_DELAYED_LISTS();
 80062de:	4b26      	ldr	r3, [pc, #152]	; (8006378 <xTaskIncrementTick.part.0+0x138>)
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	6812      	ldr	r2, [r2, #0]
 80062e4:	b30a      	cbz	r2, 800632a <xTaskIncrementTick.part.0+0xea>
 80062e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ea:	f383 8811 	msr	BASEPRI, r3
 80062ee:	f3bf 8f6f 	isb	sy
 80062f2:	f3bf 8f4f 	dsb	sy
 80062f6:	e7fe      	b.n	80062f6 <xTaskIncrementTick.part.0+0xb6>
 80062f8:	f8df 8090 	ldr.w	r8, [pc, #144]	; 800638c <xTaskIncrementTick.part.0+0x14c>
 80062fc:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8006390 <xTaskIncrementTick.part.0+0x150>
BaseType_t xSwitchRequired = pdFALSE;
 8006300:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006302:	f8d9 3000 	ldr.w	r3, [r9]
			if( xYieldPending != pdFALSE )
 8006306:	491e      	ldr	r1, [pc, #120]	; (8006380 <xTaskIncrementTick.part.0+0x140>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800630a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	f858 2003 	ldr.w	r2, [r8, r3]
			if( xYieldPending != pdFALSE )
 8006314:	680b      	ldr	r3, [r1, #0]
				xSwitchRequired = pdTRUE;
 8006316:	2a02      	cmp	r2, #2
 8006318:	bf28      	it	cs
 800631a:	2401      	movcs	r4, #1
				xSwitchRequired = pdTRUE;
 800631c:	2b00      	cmp	r3, #0
}
 800631e:	bf0c      	ite	eq
 8006320:	4620      	moveq	r0, r4
 8006322:	2001      	movne	r0, #1
 8006324:	b003      	add	sp, #12
 8006326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 800632a:	4a16      	ldr	r2, [pc, #88]	; (8006384 <xTaskIncrementTick.part.0+0x144>)
 800632c:	6818      	ldr	r0, [r3, #0]
 800632e:	6811      	ldr	r1, [r2, #0]
 8006330:	6019      	str	r1, [r3, #0]
 8006332:	4915      	ldr	r1, [pc, #84]	; (8006388 <xTaskIncrementTick.part.0+0x148>)
 8006334:	6010      	str	r0, [r2, #0]
 8006336:	680a      	ldr	r2, [r1, #0]
 8006338:	3201      	adds	r2, #1
 800633a:	600a      	str	r2, [r1, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	6812      	ldr	r2, [r2, #0]
 8006340:	b93a      	cbnz	r2, 8006352 <xTaskIncrementTick.part.0+0x112>
		xNextTaskUnblockTime = portMAX_DELAY;
 8006342:	4b0c      	ldr	r3, [pc, #48]	; (8006374 <xTaskIncrementTick.part.0+0x134>)
 8006344:	9301      	str	r3, [sp, #4]
 8006346:	461a      	mov	r2, r3
 8006348:	f04f 33ff 	mov.w	r3, #4294967295
 800634c:	6013      	str	r3, [r2, #0]
 800634e:	4613      	mov	r3, r2
 8006350:	e781      	b.n	8006256 <xTaskIncrementTick.part.0+0x16>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006352:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006354:	4a07      	ldr	r2, [pc, #28]	; (8006374 <xTaskIncrementTick.part.0+0x134>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006356:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006358:	9201      	str	r2, [sp, #4]
 800635a:	68db      	ldr	r3, [r3, #12]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	6013      	str	r3, [r2, #0]
 8006360:	4613      	mov	r3, r2
}
 8006362:	e778      	b.n	8006256 <xTaskIncrementTick.part.0+0x16>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006364:	9a01      	ldr	r2, [sp, #4]
 8006366:	f04f 33ff 	mov.w	r3, #4294967295
 800636a:	6013      	str	r3, [r2, #0]
					break;
 800636c:	e7c9      	b.n	8006302 <xTaskIncrementTick.part.0+0xc2>
 800636e:	bf00      	nop
 8006370:	20004ee0 	.word	0x20004ee0
 8006374:	20004e94 	.word	0x20004e94
 8006378:	20004dc4 	.word	0x20004dc4
 800637c:	20004e68 	.word	0x20004e68
 8006380:	20004ee4 	.word	0x20004ee4
 8006384:	20004dc8 	.word	0x20004dc8
 8006388:	20004e98 	.word	0x20004e98
 800638c:	20004dcc 	.word	0x20004dcc
 8006390:	20004dc0 	.word	0x20004dc0

08006394 <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 8006394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		--uxSchedulerSuspended;
 8006398:	4c45      	ldr	r4, [pc, #276]	; (80064b0 <xTaskResumeAll.part.0+0x11c>)
BaseType_t xTaskResumeAll( void )
 800639a:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 800639c:	f7ff f83a 	bl	8005414 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80063a0:	6823      	ldr	r3, [r4, #0]
 80063a2:	3b01      	subs	r3, #1
 80063a4:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063a6:	6823      	ldr	r3, [r4, #0]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d167      	bne.n	800647c <xTaskResumeAll.part.0+0xe8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80063ac:	4b41      	ldr	r3, [pc, #260]	; (80064b4 <xTaskResumeAll.part.0+0x120>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d063      	beq.n	800647c <xTaskResumeAll.part.0+0xe8>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80063b4:	f8df b118 	ldr.w	fp, [pc, #280]	; 80064d0 <xTaskResumeAll.part.0+0x13c>
 80063b8:	f8db 3000 	ldr.w	r3, [fp]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d073      	beq.n	80064a8 <xTaskResumeAll.part.0+0x114>
 80063c0:	4b3d      	ldr	r3, [pc, #244]	; (80064b8 <xTaskResumeAll.part.0+0x124>)
 80063c2:	4d3e      	ldr	r5, [pc, #248]	; (80064bc <xTaskResumeAll.part.0+0x128>)
 80063c4:	f8df 810c 	ldr.w	r8, [pc, #268]	; 80064d4 <xTaskResumeAll.part.0+0x140>
 80063c8:	4f3d      	ldr	r7, [pc, #244]	; (80064c0 <xTaskResumeAll.part.0+0x12c>)
 80063ca:	9301      	str	r3, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 80063cc:	2601      	movs	r6, #1
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063ce:	f8db 300c 	ldr.w	r3, [fp, #12]
 80063d2:	f8d3 a00c 	ldr.w	sl, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063d6:	f10a 0904 	add.w	r9, sl, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80063da:	f10a 0018 	add.w	r0, sl, #24
 80063de:	f7fe ffa1 	bl	8005324 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063e2:	4648      	mov	r0, r9
 80063e4:	f7fe ff9e 	bl	8005324 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80063e8:	f8da 002c 	ldr.w	r0, [sl, #44]	; 0x2c
 80063ec:	682a      	ldr	r2, [r5, #0]
 80063ee:	fa06 f300 	lsl.w	r3, r6, r0
 80063f2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80063f6:	4313      	orrs	r3, r2
 80063f8:	4649      	mov	r1, r9
 80063fa:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 80063fe:	602b      	str	r3, [r5, #0]
 8006400:	f7fe ff68 	bl	80052d4 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	f8da 202c 	ldr.w	r2, [sl, #44]	; 0x2c
 800640a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800640c:	429a      	cmp	r2, r3
 800640e:	d33d      	bcc.n	800648c <xTaskResumeAll.part.0+0xf8>
						xYieldPending = pdTRUE;
 8006410:	9b01      	ldr	r3, [sp, #4]
 8006412:	601e      	str	r6, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006414:	f8db 3000 	ldr.w	r3, [fp]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d1d8      	bne.n	80063ce <xTaskResumeAll.part.0+0x3a>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800641c:	4b29      	ldr	r3, [pc, #164]	; (80064c4 <xTaskResumeAll.part.0+0x130>)
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	6812      	ldr	r2, [r2, #0]
 8006422:	2a00      	cmp	r2, #0
 8006424:	d03b      	beq.n	800649e <xTaskResumeAll.part.0+0x10a>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006426:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006428:	4b27      	ldr	r3, [pc, #156]	; (80064c8 <xTaskResumeAll.part.0+0x134>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800642a:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800642c:	68d2      	ldr	r2, [r2, #12]
 800642e:	6852      	ldr	r2, [r2, #4]
 8006430:	601a      	str	r2, [r3, #0]
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006432:	4e26      	ldr	r6, [pc, #152]	; (80064cc <xTaskResumeAll.part.0+0x138>)
 8006434:	6835      	ldr	r5, [r6, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8006436:	b195      	cbz	r5, 800645e <xTaskResumeAll.part.0+0xca>
								xYieldPending = pdTRUE;
 8006438:	2701      	movs	r7, #1
 800643a:	e006      	b.n	800644a <xTaskResumeAll.part.0+0xb6>
 800643c:	f7ff ff00 	bl	8006240 <xTaskIncrementTick.part.0>
							if( xTaskIncrementTick() != pdFALSE )
 8006440:	b108      	cbz	r0, 8006446 <xTaskResumeAll.part.0+0xb2>
								xYieldPending = pdTRUE;
 8006442:	9b01      	ldr	r3, [sp, #4]
 8006444:	601f      	str	r7, [r3, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006446:	3d01      	subs	r5, #1
 8006448:	d008      	beq.n	800645c <xTaskResumeAll.part.0+0xc8>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800644a:	6823      	ldr	r3, [r4, #0]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d0f5      	beq.n	800643c <xTaskResumeAll.part.0+0xa8>
		++xPendedTicks;
 8006450:	6833      	ldr	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006452:	3d01      	subs	r5, #1
		++xPendedTicks;
 8006454:	f103 0301 	add.w	r3, r3, #1
 8006458:	6033      	str	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800645a:	d1f6      	bne.n	800644a <xTaskResumeAll.part.0+0xb6>
						xPendedTicks = 0;
 800645c:	6035      	str	r5, [r6, #0]
				if( xYieldPending != pdFALSE )
 800645e:	9b01      	ldr	r3, [sp, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	b15b      	cbz	r3, 800647c <xTaskResumeAll.part.0+0xe8>
					taskYIELD_IF_USING_PREEMPTION();
 8006464:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006468:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800646c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006470:	f3bf 8f4f 	dsb	sy
 8006474:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8006478:	2001      	movs	r0, #1
 800647a:	e000      	b.n	800647e <xTaskResumeAll.part.0+0xea>
BaseType_t xAlreadyYielded = pdFALSE;
 800647c:	2000      	movs	r0, #0
 800647e:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 8006480:	f7fe ffea 	bl	8005458 <vPortExitCritical>
}
 8006484:	9801      	ldr	r0, [sp, #4]
 8006486:	b003      	add	sp, #12
 8006488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800648c:	f8db 3000 	ldr.w	r3, [fp]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d19c      	bne.n	80063ce <xTaskResumeAll.part.0+0x3a>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006494:	4b0b      	ldr	r3, [pc, #44]	; (80064c4 <xTaskResumeAll.part.0+0x130>)
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	6812      	ldr	r2, [r2, #0]
 800649a:	2a00      	cmp	r2, #0
 800649c:	d1c3      	bne.n	8006426 <xTaskResumeAll.part.0+0x92>
		xNextTaskUnblockTime = portMAX_DELAY;
 800649e:	4b0a      	ldr	r3, [pc, #40]	; (80064c8 <xTaskResumeAll.part.0+0x134>)
 80064a0:	f04f 32ff 	mov.w	r2, #4294967295
 80064a4:	601a      	str	r2, [r3, #0]
 80064a6:	e7c4      	b.n	8006432 <xTaskResumeAll.part.0+0x9e>
 80064a8:	4b03      	ldr	r3, [pc, #12]	; (80064b8 <xTaskResumeAll.part.0+0x124>)
 80064aa:	9301      	str	r3, [sp, #4]
 80064ac:	e7c1      	b.n	8006432 <xTaskResumeAll.part.0+0x9e>
 80064ae:	bf00      	nop
 80064b0:	20004e60 	.word	0x20004e60
 80064b4:	20004e58 	.word	0x20004e58
 80064b8:	20004ee4 	.word	0x20004ee4
 80064bc:	20004e68 	.word	0x20004e68
 80064c0:	20004dc0 	.word	0x20004dc0
 80064c4:	20004dc4 	.word	0x20004dc4
 80064c8:	20004e94 	.word	0x20004e94
 80064cc:	20004e9c 	.word	0x20004e9c
 80064d0:	20004ea0 	.word	0x20004ea0
 80064d4:	20004dcc 	.word	0x20004dcc

080064d8 <xTaskCreateStatic>:
	{
 80064d8:	b530      	push	{r4, r5, lr}
 80064da:	b087      	sub	sp, #28
 80064dc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 80064de:	b1c4      	cbz	r4, 8006512 <xTaskCreateStatic+0x3a>
		configASSERT( pxTaskBuffer != NULL );
 80064e0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80064e2:	b16d      	cbz	r5, 8006500 <xTaskCreateStatic+0x28>
			volatile size_t xSize = sizeof( StaticTask_t );
 80064e4:	25b4      	movs	r5, #180	; 0xb4
 80064e6:	9505      	str	r5, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80064e8:	9d05      	ldr	r5, [sp, #20]
 80064ea:	2db4      	cmp	r5, #180	; 0xb4
 80064ec:	d01a      	beq.n	8006524 <xTaskCreateStatic+0x4c>
 80064ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f2:	f383 8811 	msr	BASEPRI, r3
 80064f6:	f3bf 8f6f 	isb	sy
 80064fa:	f3bf 8f4f 	dsb	sy
 80064fe:	e7fe      	b.n	80064fe <xTaskCreateStatic+0x26>
 8006500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006504:	f383 8811 	msr	BASEPRI, r3
 8006508:	f3bf 8f6f 	isb	sy
 800650c:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8006510:	e7fe      	b.n	8006510 <xTaskCreateStatic+0x38>
 8006512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006516:	f383 8811 	msr	BASEPRI, r3
 800651a:	f3bf 8f6f 	isb	sy
 800651e:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8006522:	e7fe      	b.n	8006522 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006524:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006526:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006528:	2402      	movs	r4, #2
 800652a:	f885 40b1 	strb.w	r4, [r5, #177]	; 0xb1
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800652e:	ac04      	add	r4, sp, #16
 8006530:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8006534:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006536:	9400      	str	r4, [sp, #0]
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006538:	9c05      	ldr	r4, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800653a:	f7ff fd8d 	bl	8006058 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800653e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006540:	f7ff fcbc 	bl	8005ebc <prvAddNewTaskToReadyList>
	}
 8006544:	9804      	ldr	r0, [sp, #16]
 8006546:	b007      	add	sp, #28
 8006548:	bd30      	pop	{r4, r5, pc}
 800654a:	bf00      	nop

0800654c <xTaskCreate>:
	{
 800654c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006550:	4607      	mov	r7, r0
 8006552:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006554:	0090      	lsls	r0, r2, #2
	{
 8006556:	4615      	mov	r5, r2
 8006558:	4688      	mov	r8, r1
 800655a:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800655c:	f7fe fd90 	bl	8005080 <pvPortMalloc>
			if( pxStack != NULL )
 8006560:	b1d8      	cbz	r0, 800659a <xTaskCreate+0x4e>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006562:	4604      	mov	r4, r0
 8006564:	20b4      	movs	r0, #180	; 0xb4
 8006566:	f7fe fd8b 	bl	8005080 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800656a:	4606      	mov	r6, r0
 800656c:	b1d0      	cbz	r0, 80065a4 <xTaskCreate+0x58>
					pxNewTCB->pxStack = pxStack;
 800656e:	6304      	str	r4, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006570:	2400      	movs	r4, #0
 8006572:	f886 40b1 	strb.w	r4, [r6, #177]	; 0xb1
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006576:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8006578:	9401      	str	r4, [sp, #4]
 800657a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800657c:	9602      	str	r6, [sp, #8]
 800657e:	464b      	mov	r3, r9
 8006580:	462a      	mov	r2, r5
 8006582:	4641      	mov	r1, r8
 8006584:	4638      	mov	r0, r7
 8006586:	9400      	str	r4, [sp, #0]
 8006588:	f7ff fd66 	bl	8006058 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800658c:	4630      	mov	r0, r6
 800658e:	f7ff fc95 	bl	8005ebc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006592:	2001      	movs	r0, #1
	}
 8006594:	b005      	add	sp, #20
 8006596:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800659a:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800659e:	b005      	add	sp, #20
 80065a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 80065a4:	4620      	mov	r0, r4
 80065a6:	f7fe fe23 	bl	80051f0 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80065aa:	f04f 30ff 	mov.w	r0, #4294967295
 80065ae:	e7f1      	b.n	8006594 <xTaskCreate+0x48>

080065b0 <vTaskDelay>:
	{
 80065b0:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80065b2:	b950      	cbnz	r0, 80065ca <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 80065b4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80065b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065bc:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80065c0:	f3bf 8f4f 	dsb	sy
 80065c4:	f3bf 8f6f 	isb	sy
	}
 80065c8:	bd10      	pop	{r4, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 80065ca:	4c10      	ldr	r4, [pc, #64]	; (800660c <vTaskDelay+0x5c>)
 80065cc:	6821      	ldr	r1, [r4, #0]
 80065ce:	b141      	cbz	r1, 80065e2 <vTaskDelay+0x32>
 80065d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d4:	f383 8811 	msr	BASEPRI, r3
 80065d8:	f3bf 8f6f 	isb	sy
 80065dc:	f3bf 8f4f 	dsb	sy
 80065e0:	e7fe      	b.n	80065e0 <vTaskDelay+0x30>
	++uxSchedulerSuspended;
 80065e2:	6823      	ldr	r3, [r4, #0]
 80065e4:	3301      	adds	r3, #1
 80065e6:	6023      	str	r3, [r4, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80065e8:	f7ff fcf0 	bl	8005fcc <prvAddCurrentTaskToDelayedList>
	configASSERT( uxSchedulerSuspended );
 80065ec:	6823      	ldr	r3, [r4, #0]
 80065ee:	b943      	cbnz	r3, 8006602 <vTaskDelay+0x52>
 80065f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f4:	f383 8811 	msr	BASEPRI, r3
 80065f8:	f3bf 8f6f 	isb	sy
 80065fc:	f3bf 8f4f 	dsb	sy
 8006600:	e7fe      	b.n	8006600 <vTaskDelay+0x50>
 8006602:	f7ff fec7 	bl	8006394 <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
 8006606:	2800      	cmp	r0, #0
 8006608:	d0d4      	beq.n	80065b4 <vTaskDelay+0x4>
	}
 800660a:	bd10      	pop	{r4, pc}
 800660c:	20004e60 	.word	0x20004e60

08006610 <vTaskStartScheduler>:
{
 8006610:	b570      	push	{r4, r5, r6, lr}
 8006612:	b084      	sub	sp, #16
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006614:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006616:	aa02      	add	r2, sp, #8
 8006618:	a901      	add	r1, sp, #4
 800661a:	4668      	mov	r0, sp
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800661c:	e9cd 4400 	strd	r4, r4, [sp]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006620:	f7f9 ff8a 	bl	8000538 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006624:	9b01      	ldr	r3, [sp, #4]
		configASSERT( puxStackBuffer != NULL );
 8006626:	b1cb      	cbz	r3, 800665c <vTaskStartScheduler+0x4c>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006628:	9d00      	ldr	r5, [sp, #0]
		configASSERT( pxTaskBuffer != NULL );
 800662a:	b175      	cbz	r5, 800664a <vTaskStartScheduler+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 800662c:	22b4      	movs	r2, #180	; 0xb4
 800662e:	9203      	str	r2, [sp, #12]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006630:	9903      	ldr	r1, [sp, #12]
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006632:	9a02      	ldr	r2, [sp, #8]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006634:	29b4      	cmp	r1, #180	; 0xb4
 8006636:	d01a      	beq.n	800666e <vTaskStartScheduler+0x5e>
 8006638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800663c:	f383 8811 	msr	BASEPRI, r3
 8006640:	f3bf 8f6f 	isb	sy
 8006644:	f3bf 8f4f 	dsb	sy
 8006648:	e7fe      	b.n	8006648 <vTaskStartScheduler+0x38>
 800664a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800664e:	f383 8811 	msr	BASEPRI, r3
 8006652:	f3bf 8f6f 	isb	sy
 8006656:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 800665a:	e7fe      	b.n	800665a <vTaskStartScheduler+0x4a>
 800665c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006660:	f383 8811 	msr	BASEPRI, r3
 8006664:	f3bf 8f6f 	isb	sy
 8006668:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 800666c:	e7fe      	b.n	800666c <vTaskStartScheduler+0x5c>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800666e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8006672:	3a01      	subs	r2, #1
 8006674:	eb03 0282 	add.w	r2, r3, r2, lsl #2
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006678:	2102      	movs	r1, #2
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800667a:	632b      	str	r3, [r5, #48]	; 0x30
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800667c:	4b2e      	ldr	r3, [pc, #184]	; (8006738 <vTaskStartScheduler+0x128>)
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800667e:	f885 10b1 	strb.w	r1, [r5, #177]	; 0xb1
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006682:	1d28      	adds	r0, r5, #4
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006684:	636b      	str	r3, [r5, #52]	; 0x34
		pxNewTCB->uxMutexesHeld = 0;
 8006686:	e9c5 4411 	strd	r4, r4, [r5, #68]	; 0x44
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800668a:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800668e:	f885 4043 	strb.w	r4, [r5, #67]	; 0x43
	pxNewTCB->uxPriority = uxPriority;
 8006692:	62ec      	str	r4, [r5, #44]	; 0x2c
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006694:	f022 0607 	bic.w	r6, r2, #7
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006698:	9b03      	ldr	r3, [sp, #12]
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800669a:	f7fe fe17 	bl	80052cc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800669e:	f105 0018 	add.w	r0, r5, #24
 80066a2:	f7fe fe13 	bl	80052cc <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066a6:	2307      	movs	r3, #7
		pxNewTCB->ulNotifiedValue = 0;
 80066a8:	f8c5 40ac 	str.w	r4, [r5, #172]	; 0xac
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80066ac:	2260      	movs	r2, #96	; 0x60
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066ae:	61ab      	str	r3, [r5, #24]
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80066b0:	4621      	mov	r1, r4
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80066b2:	612d      	str	r5, [r5, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80066b4:	626d      	str	r5, [r5, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80066b6:	f885 40b0 	strb.w	r4, [r5, #176]	; 0xb0
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80066ba:	f105 004c 	add.w	r0, r5, #76	; 0x4c
 80066be:	f002 fdcd 	bl	800925c <memset>
 80066c2:	4a1e      	ldr	r2, [pc, #120]	; (800673c <vTaskStartScheduler+0x12c>)
 80066c4:	4b1e      	ldr	r3, [pc, #120]	; (8006740 <vTaskStartScheduler+0x130>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80066c6:	491f      	ldr	r1, [pc, #124]	; (8006744 <vTaskStartScheduler+0x134>)
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80066c8:	e9c5 2314 	strd	r2, r3, [r5, #80]	; 0x50
 80066cc:	4b1e      	ldr	r3, [pc, #120]	; (8006748 <vTaskStartScheduler+0x138>)
 80066ce:	65ab      	str	r3, [r5, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80066d0:	4622      	mov	r2, r4
 80066d2:	4630      	mov	r0, r6
 80066d4:	f7fe fe78 	bl	80053c8 <pxPortInitialiseStack>
 80066d8:	6028      	str	r0, [r5, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
 80066da:	4628      	mov	r0, r5
 80066dc:	f7ff fbee 	bl	8005ebc <prvAddNewTaskToReadyList>
			xReturn = xTimerCreateTimerTask();
 80066e0:	f000 fc72 	bl	8006fc8 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 80066e4:	2801      	cmp	r0, #1
 80066e6:	d00c      	beq.n	8006702 <vTaskStartScheduler+0xf2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80066e8:	3001      	adds	r0, #1
 80066ea:	d001      	beq.n	80066f0 <vTaskStartScheduler+0xe0>
}
 80066ec:	b004      	add	sp, #16
 80066ee:	bd70      	pop	{r4, r5, r6, pc}
 80066f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f4:	f383 8811 	msr	BASEPRI, r3
 80066f8:	f3bf 8f6f 	isb	sy
 80066fc:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006700:	e7fe      	b.n	8006700 <vTaskStartScheduler+0xf0>
 8006702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006706:	f383 8811 	msr	BASEPRI, r3
 800670a:	f3bf 8f6f 	isb	sy
 800670e:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006712:	4b0e      	ldr	r3, [pc, #56]	; (800674c <vTaskStartScheduler+0x13c>)
 8006714:	4a0e      	ldr	r2, [pc, #56]	; (8006750 <vTaskStartScheduler+0x140>)
 8006716:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8006718:	490e      	ldr	r1, [pc, #56]	; (8006754 <vTaskStartScheduler+0x144>)
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800671a:	334c      	adds	r3, #76	; 0x4c
 800671c:	6013      	str	r3, [r2, #0]
		xSchedulerRunning = pdTRUE;
 800671e:	4a0e      	ldr	r2, [pc, #56]	; (8006758 <vTaskStartScheduler+0x148>)
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006720:	4b0e      	ldr	r3, [pc, #56]	; (800675c <vTaskStartScheduler+0x14c>)
		xNextTaskUnblockTime = portMAX_DELAY;
 8006722:	f04f 35ff 	mov.w	r5, #4294967295
 8006726:	600d      	str	r5, [r1, #0]
		xSchedulerRunning = pdTRUE;
 8006728:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800672a:	601c      	str	r4, [r3, #0]
}
 800672c:	b004      	add	sp, #16
 800672e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		if( xPortStartScheduler() != pdFALSE )
 8006732:	f7fe beed 	b.w	8005510 <xPortStartScheduler>
 8006736:	bf00      	nop
 8006738:	454c4449 	.word	0x454c4449
 800673c:	080097c0 	.word	0x080097c0
 8006740:	080097e0 	.word	0x080097e0
 8006744:	080061a1 	.word	0x080061a1
 8006748:	080097a0 	.word	0x080097a0
 800674c:	20004dc0 	.word	0x20004dc0
 8006750:	200005a8 	.word	0x200005a8
 8006754:	20004e94 	.word	0x20004e94
 8006758:	20004eb4 	.word	0x20004eb4
 800675c:	20004ee0 	.word	0x20004ee0

08006760 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8006760:	4a02      	ldr	r2, [pc, #8]	; (800676c <vTaskSuspendAll+0xc>)
 8006762:	6813      	ldr	r3, [r2, #0]
 8006764:	3301      	adds	r3, #1
 8006766:	6013      	str	r3, [r2, #0]
}
 8006768:	4770      	bx	lr
 800676a:	bf00      	nop
 800676c:	20004e60 	.word	0x20004e60

08006770 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 8006770:	4b06      	ldr	r3, [pc, #24]	; (800678c <xTaskResumeAll+0x1c>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	b943      	cbnz	r3, 8006788 <xTaskResumeAll+0x18>
 8006776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800677a:	f383 8811 	msr	BASEPRI, r3
 800677e:	f3bf 8f6f 	isb	sy
 8006782:	f3bf 8f4f 	dsb	sy
 8006786:	e7fe      	b.n	8006786 <xTaskResumeAll+0x16>
 8006788:	f7ff be04 	b.w	8006394 <xTaskResumeAll.part.0>
 800678c:	20004e60 	.word	0x20004e60

08006790 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8006790:	4b01      	ldr	r3, [pc, #4]	; (8006798 <xTaskGetTickCount+0x8>)
 8006792:	6818      	ldr	r0, [r3, #0]
}
 8006794:	4770      	bx	lr
 8006796:	bf00      	nop
 8006798:	20004ee0 	.word	0x20004ee0

0800679c <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800679c:	4b05      	ldr	r3, [pc, #20]	; (80067b4 <xTaskIncrementTick+0x18>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	b90b      	cbnz	r3, 80067a6 <xTaskIncrementTick+0xa>
 80067a2:	f7ff bd4d 	b.w	8006240 <xTaskIncrementTick.part.0>
		++xPendedTicks;
 80067a6:	4a04      	ldr	r2, [pc, #16]	; (80067b8 <xTaskIncrementTick+0x1c>)
 80067a8:	6813      	ldr	r3, [r2, #0]
 80067aa:	3301      	adds	r3, #1
}
 80067ac:	2000      	movs	r0, #0
		++xPendedTicks;
 80067ae:	6013      	str	r3, [r2, #0]
}
 80067b0:	4770      	bx	lr
 80067b2:	bf00      	nop
 80067b4:	20004e60 	.word	0x20004e60
 80067b8:	20004e9c 	.word	0x20004e9c

080067bc <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80067bc:	4b18      	ldr	r3, [pc, #96]	; (8006820 <vTaskSwitchContext+0x64>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	b11b      	cbz	r3, 80067ca <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 80067c2:	4b18      	ldr	r3, [pc, #96]	; (8006824 <vTaskSwitchContext+0x68>)
 80067c4:	2201      	movs	r2, #1
 80067c6:	601a      	str	r2, [r3, #0]
 80067c8:	4770      	bx	lr
		xYieldPending = pdFALSE;
 80067ca:	4916      	ldr	r1, [pc, #88]	; (8006824 <vTaskSwitchContext+0x68>)
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067cc:	4a16      	ldr	r2, [pc, #88]	; (8006828 <vTaskSwitchContext+0x6c>)
		xYieldPending = pdFALSE;
 80067ce:	600b      	str	r3, [r1, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067d0:	6813      	ldr	r3, [r2, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80067d2:	fab3 f383 	clz	r3, r3
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	f1c3 031f 	rsb	r3, r3, #31
 80067dc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80067e0:	4a12      	ldr	r2, [pc, #72]	; (800682c <vTaskSwitchContext+0x70>)
 80067e2:	0099      	lsls	r1, r3, #2
 80067e4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80067e8:	5850      	ldr	r0, [r2, r1]
 80067ea:	b940      	cbnz	r0, 80067fe <vTaskSwitchContext+0x42>
	__asm volatile
 80067ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f0:	f383 8811 	msr	BASEPRI, r3
 80067f4:	f3bf 8f6f 	isb	sy
 80067f8:	f3bf 8f4f 	dsb	sy
 80067fc:	e7fe      	b.n	80067fc <vTaskSwitchContext+0x40>
 80067fe:	6858      	ldr	r0, [r3, #4]
 8006800:	3108      	adds	r1, #8
 8006802:	6840      	ldr	r0, [r0, #4]
 8006804:	6058      	str	r0, [r3, #4]
 8006806:	440a      	add	r2, r1
 8006808:	4290      	cmp	r0, r2
 800680a:	bf04      	itt	eq
 800680c:	6840      	ldreq	r0, [r0, #4]
 800680e:	6058      	streq	r0, [r3, #4]
 8006810:	4b07      	ldr	r3, [pc, #28]	; (8006830 <vTaskSwitchContext+0x74>)
 8006812:	68c2      	ldr	r2, [r0, #12]
 8006814:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a06      	ldr	r2, [pc, #24]	; (8006834 <vTaskSwitchContext+0x78>)
 800681a:	334c      	adds	r3, #76	; 0x4c
 800681c:	6013      	str	r3, [r2, #0]
}
 800681e:	4770      	bx	lr
 8006820:	20004e60 	.word	0x20004e60
 8006824:	20004ee4 	.word	0x20004ee4
 8006828:	20004e68 	.word	0x20004e68
 800682c:	20004dcc 	.word	0x20004dcc
 8006830:	20004dc0 	.word	0x20004dc0
 8006834:	200005a8 	.word	0x200005a8

08006838 <vTaskSuspend>:
	{
 8006838:	b570      	push	{r4, r5, r6, lr}
 800683a:	4604      	mov	r4, r0
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800683c:	4e37      	ldr	r6, [pc, #220]	; (800691c <vTaskSuspend+0xe4>)
		taskENTER_CRITICAL();
 800683e:	f7fe fde9 	bl	8005414 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8006842:	2c00      	cmp	r4, #0
 8006844:	d04b      	beq.n	80068de <vTaskSuspend+0xa6>
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006846:	1d25      	adds	r5, r4, #4
 8006848:	4628      	mov	r0, r5
 800684a:	f7fe fd6b 	bl	8005324 <uxListRemove>
 800684e:	b930      	cbnz	r0, 800685e <vTaskSuspend+0x26>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006850:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006852:	4933      	ldr	r1, [pc, #204]	; (8006920 <vTaskSuspend+0xe8>)
 8006854:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8006858:	009b      	lsls	r3, r3, #2
 800685a:	58cb      	ldr	r3, [r1, r3]
 800685c:	b343      	cbz	r3, 80068b0 <vTaskSuspend+0x78>
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800685e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006860:	b11b      	cbz	r3, 800686a <vTaskSuspend+0x32>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006862:	f104 0018 	add.w	r0, r4, #24
 8006866:	f7fe fd5d 	bl	8005324 <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800686a:	4629      	mov	r1, r5
 800686c:	482d      	ldr	r0, [pc, #180]	; (8006924 <vTaskSuspend+0xec>)
		if( xSchedulerRunning != pdFALSE )
 800686e:	4d2e      	ldr	r5, [pc, #184]	; (8006928 <vTaskSuspend+0xf0>)
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8006870:	f7fe fd30 	bl	80052d4 <vListInsertEnd>
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8006874:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
 8006878:	2b01      	cmp	r3, #1
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800687a:	bf04      	itt	eq
 800687c:	2300      	moveq	r3, #0
 800687e:	f884 30b0 	strbeq.w	r3, [r4, #176]	; 0xb0
		taskEXIT_CRITICAL();
 8006882:	f7fe fde9 	bl	8005458 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 8006886:	682b      	ldr	r3, [r5, #0]
 8006888:	b9d3      	cbnz	r3, 80068c0 <vTaskSuspend+0x88>
		if( pxTCB == pxCurrentTCB )
 800688a:	6833      	ldr	r3, [r6, #0]
 800688c:	42a3      	cmp	r3, r4
 800688e:	d000      	beq.n	8006892 <vTaskSuspend+0x5a>
	}
 8006890:	bd70      	pop	{r4, r5, r6, pc}
			if( xSchedulerRunning != pdFALSE )
 8006892:	682b      	ldr	r3, [r5, #0]
 8006894:	b353      	cbz	r3, 80068ec <vTaskSuspend+0xb4>
				configASSERT( uxSchedulerSuspended == 0 );
 8006896:	4b25      	ldr	r3, [pc, #148]	; (800692c <vTaskSuspend+0xf4>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d02e      	beq.n	80068fc <vTaskSuspend+0xc4>
 800689e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a2:	f383 8811 	msr	BASEPRI, r3
 80068a6:	f3bf 8f6f 	isb	sy
 80068aa:	f3bf 8f4f 	dsb	sy
 80068ae:	e7fe      	b.n	80068ae <vTaskSuspend+0x76>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80068b0:	491f      	ldr	r1, [pc, #124]	; (8006930 <vTaskSuspend+0xf8>)
 80068b2:	2301      	movs	r3, #1
 80068b4:	4093      	lsls	r3, r2
 80068b6:	680a      	ldr	r2, [r1, #0]
 80068b8:	ea22 0203 	bic.w	r2, r2, r3
 80068bc:	600a      	str	r2, [r1, #0]
 80068be:	e7ce      	b.n	800685e <vTaskSuspend+0x26>
			taskENTER_CRITICAL();
 80068c0:	f7fe fda8 	bl	8005414 <vPortEnterCritical>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80068c4:	4b1b      	ldr	r3, [pc, #108]	; (8006934 <vTaskSuspend+0xfc>)
 80068c6:	681a      	ldr	r2, [r3, #0]
 80068c8:	6812      	ldr	r2, [r2, #0]
 80068ca:	b152      	cbz	r2, 80068e2 <vTaskSuspend+0xaa>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068cc:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80068ce:	4b1a      	ldr	r3, [pc, #104]	; (8006938 <vTaskSuspend+0x100>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068d0:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80068d2:	68d2      	ldr	r2, [r2, #12]
 80068d4:	6852      	ldr	r2, [r2, #4]
 80068d6:	601a      	str	r2, [r3, #0]
			taskEXIT_CRITICAL();
 80068d8:	f7fe fdbe 	bl	8005458 <vPortExitCritical>
 80068dc:	e7d5      	b.n	800688a <vTaskSuspend+0x52>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80068de:	6834      	ldr	r4, [r6, #0]
 80068e0:	e7b1      	b.n	8006846 <vTaskSuspend+0xe>
		xNextTaskUnblockTime = portMAX_DELAY;
 80068e2:	4b15      	ldr	r3, [pc, #84]	; (8006938 <vTaskSuspend+0x100>)
 80068e4:	f04f 32ff 	mov.w	r2, #4294967295
 80068e8:	601a      	str	r2, [r3, #0]
 80068ea:	e7f5      	b.n	80068d8 <vTaskSuspend+0xa0>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80068ec:	490d      	ldr	r1, [pc, #52]	; (8006924 <vTaskSuspend+0xec>)
 80068ee:	4a13      	ldr	r2, [pc, #76]	; (800693c <vTaskSuspend+0x104>)
 80068f0:	6809      	ldr	r1, [r1, #0]
 80068f2:	6812      	ldr	r2, [r2, #0]
 80068f4:	4291      	cmp	r1, r2
 80068f6:	d10c      	bne.n	8006912 <vTaskSuspend+0xda>
					pxCurrentTCB = NULL;
 80068f8:	6033      	str	r3, [r6, #0]
	}
 80068fa:	bd70      	pop	{r4, r5, r6, pc}
				portYIELD_WITHIN_API();
 80068fc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006900:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006904:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006908:	f3bf 8f4f 	dsb	sy
 800690c:	f3bf 8f6f 	isb	sy
	}
 8006910:	bd70      	pop	{r4, r5, r6, pc}
 8006912:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					vTaskSwitchContext();
 8006916:	f7ff bf51 	b.w	80067bc <vTaskSwitchContext>
 800691a:	bf00      	nop
 800691c:	20004dc0 	.word	0x20004dc0
 8006920:	20004dcc 	.word	0x20004dcc
 8006924:	20004eb8 	.word	0x20004eb8
 8006928:	20004eb4 	.word	0x20004eb4
 800692c:	20004e60 	.word	0x20004e60
 8006930:	20004e68 	.word	0x20004e68
 8006934:	20004dc4 	.word	0x20004dc4
 8006938:	20004e94 	.word	0x20004e94
 800693c:	20004e58 	.word	0x20004e58

08006940 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8006940:	b320      	cbz	r0, 800698c <vTaskPlaceOnEventList+0x4c>
{
 8006942:	b570      	push	{r4, r5, r6, lr}
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006944:	4d1f      	ldr	r5, [pc, #124]	; (80069c4 <vTaskPlaceOnEventList+0x84>)
 8006946:	460c      	mov	r4, r1
 8006948:	6829      	ldr	r1, [r5, #0]
 800694a:	3118      	adds	r1, #24
 800694c:	f7fe fcd2 	bl	80052f4 <vListInsert>
const TickType_t xConstTickCount = xTickCount;
 8006950:	4b1d      	ldr	r3, [pc, #116]	; (80069c8 <vTaskPlaceOnEventList+0x88>)
 8006952:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006954:	6828      	ldr	r0, [r5, #0]
 8006956:	3004      	adds	r0, #4
 8006958:	f7fe fce4 	bl	8005324 <uxListRemove>
 800695c:	b940      	cbnz	r0, 8006970 <vTaskPlaceOnEventList+0x30>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800695e:	682b      	ldr	r3, [r5, #0]
 8006960:	491a      	ldr	r1, [pc, #104]	; (80069cc <vTaskPlaceOnEventList+0x8c>)
 8006962:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006964:	680b      	ldr	r3, [r1, #0]
 8006966:	2201      	movs	r2, #1
 8006968:	4082      	lsls	r2, r0
 800696a:	ea23 0302 	bic.w	r3, r3, r2
 800696e:	600b      	str	r3, [r1, #0]
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006970:	1c63      	adds	r3, r4, #1
 8006972:	d014      	beq.n	800699e <vTaskPlaceOnEventList+0x5e>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006974:	682b      	ldr	r3, [r5, #0]
 8006976:	19a4      	adds	r4, r4, r6
 8006978:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800697a:	d317      	bcc.n	80069ac <vTaskPlaceOnEventList+0x6c>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800697c:	4b14      	ldr	r3, [pc, #80]	; (80069d0 <vTaskPlaceOnEventList+0x90>)
 800697e:	6818      	ldr	r0, [r3, #0]
 8006980:	6829      	ldr	r1, [r5, #0]
}
 8006982:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006986:	3104      	adds	r1, #4
 8006988:	f7fe bcb4 	b.w	80052f4 <vListInsert>
 800698c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006990:	f383 8811 	msr	BASEPRI, r3
 8006994:	f3bf 8f6f 	isb	sy
 8006998:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 800699c:	e7fe      	b.n	800699c <vTaskPlaceOnEventList+0x5c>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800699e:	6829      	ldr	r1, [r5, #0]
 80069a0:	480c      	ldr	r0, [pc, #48]	; (80069d4 <vTaskPlaceOnEventList+0x94>)
}
 80069a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80069a6:	3104      	adds	r1, #4
 80069a8:	f7fe bc94 	b.w	80052d4 <vListInsertEnd>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80069ac:	4b0a      	ldr	r3, [pc, #40]	; (80069d8 <vTaskPlaceOnEventList+0x98>)
 80069ae:	6818      	ldr	r0, [r3, #0]
 80069b0:	6829      	ldr	r1, [r5, #0]
 80069b2:	3104      	adds	r1, #4
 80069b4:	f7fe fc9e 	bl	80052f4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80069b8:	4b08      	ldr	r3, [pc, #32]	; (80069dc <vTaskPlaceOnEventList+0x9c>)
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 80069be:	bf38      	it	cc
 80069c0:	601c      	strcc	r4, [r3, #0]
}
 80069c2:	bd70      	pop	{r4, r5, r6, pc}
 80069c4:	20004dc0 	.word	0x20004dc0
 80069c8:	20004ee0 	.word	0x20004ee0
 80069cc:	20004e68 	.word	0x20004e68
 80069d0:	20004dc8 	.word	0x20004dc8
 80069d4:	20004eb8 	.word	0x20004eb8
 80069d8:	20004dc4 	.word	0x20004dc4
 80069dc:	20004e94 	.word	0x20004e94

080069e0 <vTaskPlaceOnEventListRestricted>:
	{
 80069e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( pxEventList );
 80069e2:	2800      	cmp	r0, #0
 80069e4:	d044      	beq.n	8006a70 <vTaskPlaceOnEventListRestricted+0x90>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80069e6:	4d27      	ldr	r5, [pc, #156]	; (8006a84 <vTaskPlaceOnEventListRestricted+0xa4>)
 80069e8:	460c      	mov	r4, r1
 80069ea:	6829      	ldr	r1, [r5, #0]
 80069ec:	3118      	adds	r1, #24
 80069ee:	4616      	mov	r6, r2
 80069f0:	f7fe fc70 	bl	80052d4 <vListInsertEnd>
const TickType_t xConstTickCount = xTickCount;
 80069f4:	4b24      	ldr	r3, [pc, #144]	; (8006a88 <vTaskPlaceOnEventListRestricted+0xa8>)
 80069f6:	681f      	ldr	r7, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80069f8:	6828      	ldr	r0, [r5, #0]
 80069fa:	3004      	adds	r0, #4
		if( xWaitIndefinitely != pdFALSE )
 80069fc:	b14e      	cbz	r6, 8006a12 <vTaskPlaceOnEventListRestricted+0x32>
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80069fe:	f7fe fc91 	bl	8005324 <uxListRemove>
 8006a02:	b1a8      	cbz	r0, 8006a30 <vTaskPlaceOnEventListRestricted+0x50>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a04:	6829      	ldr	r1, [r5, #0]
 8006a06:	4821      	ldr	r0, [pc, #132]	; (8006a8c <vTaskPlaceOnEventListRestricted+0xac>)
	}
 8006a08:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a0c:	3104      	adds	r1, #4
 8006a0e:	f7fe bc61 	b.w	80052d4 <vListInsertEnd>
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a12:	f7fe fc87 	bl	8005324 <uxListRemove>
 8006a16:	b168      	cbz	r0, 8006a34 <vTaskPlaceOnEventListRestricted+0x54>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006a18:	682b      	ldr	r3, [r5, #0]
 8006a1a:	193c      	adds	r4, r7, r4
 8006a1c:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006a1e:	d31b      	bcc.n	8006a58 <vTaskPlaceOnEventListRestricted+0x78>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a20:	4b1b      	ldr	r3, [pc, #108]	; (8006a90 <vTaskPlaceOnEventListRestricted+0xb0>)
 8006a22:	6818      	ldr	r0, [r3, #0]
 8006a24:	6829      	ldr	r1, [r5, #0]
	}
 8006a26:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a2a:	3104      	adds	r1, #4
 8006a2c:	f7fe bc62 	b.w	80052f4 <vListInsert>
			xTicksToWait = portMAX_DELAY;
 8006a30:	f04f 34ff 	mov.w	r4, #4294967295
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006a34:	682b      	ldr	r3, [r5, #0]
 8006a36:	4917      	ldr	r1, [pc, #92]	; (8006a94 <vTaskPlaceOnEventListRestricted+0xb4>)
 8006a38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	fa03 f202 	lsl.w	r2, r3, r2
 8006a40:	680b      	ldr	r3, [r1, #0]
 8006a42:	ea23 0302 	bic.w	r3, r3, r2
 8006a46:	600b      	str	r3, [r1, #0]
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006a48:	1c63      	adds	r3, r4, #1
 8006a4a:	d1e5      	bne.n	8006a18 <vTaskPlaceOnEventListRestricted+0x38>
 8006a4c:	2e00      	cmp	r6, #0
 8006a4e:	d1d9      	bne.n	8006a04 <vTaskPlaceOnEventListRestricted+0x24>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006a50:	682b      	ldr	r3, [r5, #0]
 8006a52:	193c      	adds	r4, r7, r4
 8006a54:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006a56:	d2e3      	bcs.n	8006a20 <vTaskPlaceOnEventListRestricted+0x40>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a58:	4b0f      	ldr	r3, [pc, #60]	; (8006a98 <vTaskPlaceOnEventListRestricted+0xb8>)
 8006a5a:	6818      	ldr	r0, [r3, #0]
 8006a5c:	6829      	ldr	r1, [r5, #0]
 8006a5e:	3104      	adds	r1, #4
 8006a60:	f7fe fc48 	bl	80052f4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006a64:	4b0d      	ldr	r3, [pc, #52]	; (8006a9c <vTaskPlaceOnEventListRestricted+0xbc>)
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	4294      	cmp	r4, r2
 8006a6a:	d200      	bcs.n	8006a6e <vTaskPlaceOnEventListRestricted+0x8e>
					xNextTaskUnblockTime = xTimeToWake;
 8006a6c:	601c      	str	r4, [r3, #0]
	}
 8006a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a74:	f383 8811 	msr	BASEPRI, r3
 8006a78:	f3bf 8f6f 	isb	sy
 8006a7c:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 8006a80:	e7fe      	b.n	8006a80 <vTaskPlaceOnEventListRestricted+0xa0>
 8006a82:	bf00      	nop
 8006a84:	20004dc0 	.word	0x20004dc0
 8006a88:	20004ee0 	.word	0x20004ee0
 8006a8c:	20004eb8 	.word	0x20004eb8
 8006a90:	20004dc8 	.word	0x20004dc8
 8006a94:	20004e68 	.word	0x20004e68
 8006a98:	20004dc4 	.word	0x20004dc4
 8006a9c:	20004e94 	.word	0x20004e94

08006aa0 <xTaskRemoveFromEventList>:
{
 8006aa0:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006aa2:	68c3      	ldr	r3, [r0, #12]
 8006aa4:	68dc      	ldr	r4, [r3, #12]
{
 8006aa6:	b082      	sub	sp, #8
	configASSERT( pxUnblockedTCB );
 8006aa8:	2c00      	cmp	r4, #0
 8006aaa:	d02c      	beq.n	8006b06 <xTaskRemoveFromEventList+0x66>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006aac:	f104 0518 	add.w	r5, r4, #24
 8006ab0:	4628      	mov	r0, r5
 8006ab2:	f7fe fc37 	bl	8005324 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ab6:	4b18      	ldr	r3, [pc, #96]	; (8006b18 <xTaskRemoveFromEventList+0x78>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	b17b      	cbz	r3, 8006adc <xTaskRemoveFromEventList+0x3c>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006abc:	4817      	ldr	r0, [pc, #92]	; (8006b1c <xTaskRemoveFromEventList+0x7c>)
 8006abe:	4629      	mov	r1, r5
 8006ac0:	f7fe fc08 	bl	80052d4 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006ac4:	4b16      	ldr	r3, [pc, #88]	; (8006b20 <xTaskRemoveFromEventList+0x80>)
 8006ac6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006acc:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8006ace:	bf85      	ittet	hi
 8006ad0:	4b14      	ldrhi	r3, [pc, #80]	; (8006b24 <xTaskRemoveFromEventList+0x84>)
 8006ad2:	2001      	movhi	r0, #1
		xReturn = pdFALSE;
 8006ad4:	2000      	movls	r0, #0
		xYieldPending = pdTRUE;
 8006ad6:	6018      	strhi	r0, [r3, #0]
}
 8006ad8:	b002      	add	sp, #8
 8006ada:	bd70      	pop	{r4, r5, r6, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006adc:	1d21      	adds	r1, r4, #4
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006ade:	4d12      	ldr	r5, [pc, #72]	; (8006b28 <xTaskRemoveFromEventList+0x88>)
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006ae0:	9101      	str	r1, [sp, #4]
 8006ae2:	4608      	mov	r0, r1
 8006ae4:	f7fe fc1e 	bl	8005324 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006ae8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006aea:	682e      	ldr	r6, [r5, #0]
 8006aec:	480f      	ldr	r0, [pc, #60]	; (8006b2c <xTaskRemoveFromEventList+0x8c>)
 8006aee:	9901      	ldr	r1, [sp, #4]
 8006af0:	2201      	movs	r2, #1
 8006af2:	409a      	lsls	r2, r3
 8006af4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006af8:	4332      	orrs	r2, r6
 8006afa:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8006afe:	602a      	str	r2, [r5, #0]
 8006b00:	f7fe fbe8 	bl	80052d4 <vListInsertEnd>
 8006b04:	e7de      	b.n	8006ac4 <xTaskRemoveFromEventList+0x24>
 8006b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b0a:	f383 8811 	msr	BASEPRI, r3
 8006b0e:	f3bf 8f6f 	isb	sy
 8006b12:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8006b16:	e7fe      	b.n	8006b16 <xTaskRemoveFromEventList+0x76>
 8006b18:	20004e60 	.word	0x20004e60
 8006b1c:	20004ea0 	.word	0x20004ea0
 8006b20:	20004dc0 	.word	0x20004dc0
 8006b24:	20004ee4 	.word	0x20004ee4
 8006b28:	20004e68 	.word	0x20004e68
 8006b2c:	20004dcc 	.word	0x20004dcc

08006b30 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006b30:	4a03      	ldr	r2, [pc, #12]	; (8006b40 <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006b32:	4b04      	ldr	r3, [pc, #16]	; (8006b44 <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006b34:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	e9c0 2300 	strd	r2, r3, [r0]
}
 8006b3c:	4770      	bx	lr
 8006b3e:	bf00      	nop
 8006b40:	20004e98 	.word	0x20004e98
 8006b44:	20004ee0 	.word	0x20004ee0

08006b48 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
 8006b48:	b328      	cbz	r0, 8006b96 <xTaskCheckForTimeOut+0x4e>
{
 8006b4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b4c:	460d      	mov	r5, r1
 8006b4e:	b083      	sub	sp, #12
	configASSERT( pxTicksToWait );
 8006b50:	b1c1      	cbz	r1, 8006b84 <xTaskCheckForTimeOut+0x3c>
 8006b52:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8006b54:	f7fe fc5e 	bl	8005414 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
 8006b58:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 8006b5a:	4a1d      	ldr	r2, [pc, #116]	; (8006bd0 <xTaskCheckForTimeOut+0x88>)
			if( *pxTicksToWait == portMAX_DELAY )
 8006b5c:	1c58      	adds	r0, r3, #1
		const TickType_t xConstTickCount = xTickCount;
 8006b5e:	6811      	ldr	r1, [r2, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8006b60:	d030      	beq.n	8006bc4 <xTaskCheckForTimeOut+0x7c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006b62:	f8df c070 	ldr.w	ip, [pc, #112]	; 8006bd4 <xTaskCheckForTimeOut+0x8c>
 8006b66:	e9d4 6000 	ldrd	r6, r0, [r4]
 8006b6a:	f8dc 7000 	ldr.w	r7, [ip]
 8006b6e:	42be      	cmp	r6, r7
 8006b70:	d01a      	beq.n	8006ba8 <xTaskCheckForTimeOut+0x60>
 8006b72:	4288      	cmp	r0, r1
 8006b74:	d818      	bhi.n	8006ba8 <xTaskCheckForTimeOut+0x60>
			xReturn = pdTRUE;
 8006b76:	2001      	movs	r0, #1
 8006b78:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 8006b7a:	f7fe fc6d 	bl	8005458 <vPortExitCritical>
}
 8006b7e:	9801      	ldr	r0, [sp, #4]
 8006b80:	b003      	add	sp, #12
 8006b82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b88:	f383 8811 	msr	BASEPRI, r3
 8006b8c:	f3bf 8f6f 	isb	sy
 8006b90:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 8006b94:	e7fe      	b.n	8006b94 <xTaskCheckForTimeOut+0x4c>
 8006b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b9a:	f383 8811 	msr	BASEPRI, r3
 8006b9e:	f3bf 8f6f 	isb	sy
 8006ba2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 8006ba6:	e7fe      	b.n	8006ba6 <xTaskCheckForTimeOut+0x5e>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006ba8:	eba1 0e00 	sub.w	lr, r1, r0
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006bac:	4573      	cmp	r3, lr
 8006bae:	d90b      	bls.n	8006bc8 <xTaskCheckForTimeOut+0x80>
			*pxTicksToWait -= xElapsedTime;
 8006bb0:	1a5b      	subs	r3, r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006bb2:	f8dc 1000 	ldr.w	r1, [ip]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006bb6:	6812      	ldr	r2, [r2, #0]
			*pxTicksToWait -= xElapsedTime;
 8006bb8:	4403      	add	r3, r0
 8006bba:	602b      	str	r3, [r5, #0]
			xReturn = pdFALSE;
 8006bbc:	2000      	movs	r0, #0
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006bbe:	e9c4 1200 	strd	r1, r2, [r4]
			xReturn = pdFALSE;
 8006bc2:	e7d9      	b.n	8006b78 <xTaskCheckForTimeOut+0x30>
				xReturn = pdFALSE;
 8006bc4:	2000      	movs	r0, #0
 8006bc6:	e7d7      	b.n	8006b78 <xTaskCheckForTimeOut+0x30>
			*pxTicksToWait = 0;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
 8006bcc:	2001      	movs	r0, #1
 8006bce:	e7d3      	b.n	8006b78 <xTaskCheckForTimeOut+0x30>
 8006bd0:	20004ee0 	.word	0x20004ee0
 8006bd4:	20004e98 	.word	0x20004e98

08006bd8 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8006bd8:	4b01      	ldr	r3, [pc, #4]	; (8006be0 <vTaskMissedYield+0x8>)
 8006bda:	2201      	movs	r2, #1
 8006bdc:	601a      	str	r2, [r3, #0]
}
 8006bde:	4770      	bx	lr
 8006be0:	20004ee4 	.word	0x20004ee4

08006be4 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8006be4:	4b05      	ldr	r3, [pc, #20]	; (8006bfc <xTaskGetSchedulerState+0x18>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	b133      	cbz	r3, 8006bf8 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006bea:	4b05      	ldr	r3, [pc, #20]	; (8006c00 <xTaskGetSchedulerState+0x1c>)
 8006bec:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	bf0c      	ite	eq
 8006bf2:	2002      	moveq	r0, #2
 8006bf4:	2000      	movne	r0, #0
 8006bf6:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006bf8:	2001      	movs	r0, #1
	}
 8006bfa:	4770      	bx	lr
 8006bfc:	20004eb4 	.word	0x20004eb4
 8006c00:	20004e60 	.word	0x20004e60

08006c04 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8006c04:	b320      	cbz	r0, 8006c50 <xTaskPriorityDisinherit+0x4c>
	{
 8006c06:	b5f0      	push	{r4, r5, r6, r7, lr}
			configASSERT( pxTCB == pxCurrentTCB );
 8006c08:	4b29      	ldr	r3, [pc, #164]	; (8006cb0 <xTaskPriorityDisinherit+0xac>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4283      	cmp	r3, r0
	{
 8006c0e:	b083      	sub	sp, #12
 8006c10:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8006c12:	d008      	beq.n	8006c26 <xTaskPriorityDisinherit+0x22>
 8006c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c18:	f383 8811 	msr	BASEPRI, r3
 8006c1c:	f3bf 8f6f 	isb	sy
 8006c20:	f3bf 8f4f 	dsb	sy
 8006c24:	e7fe      	b.n	8006c24 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8006c26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c28:	b14b      	cbz	r3, 8006c3e <xTaskPriorityDisinherit+0x3a>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006c2a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8006c2c:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 8006c2e:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006c30:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8006c32:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006c34:	d000      	beq.n	8006c38 <xTaskPriorityDisinherit+0x34>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006c36:	b16b      	cbz	r3, 8006c54 <xTaskPriorityDisinherit+0x50>
	BaseType_t xReturn = pdFALSE;
 8006c38:	2000      	movs	r0, #0
	}
 8006c3a:	b003      	add	sp, #12
 8006c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c42:	f383 8811 	msr	BASEPRI, r3
 8006c46:	f3bf 8f6f 	isb	sy
 8006c4a:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
 8006c4e:	e7fe      	b.n	8006c4e <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 8006c50:	2000      	movs	r0, #0
	}
 8006c52:	4770      	bx	lr
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c54:	1d01      	adds	r1, r0, #4
 8006c56:	4608      	mov	r0, r1
 8006c58:	9101      	str	r1, [sp, #4]
 8006c5a:	f7fe fb63 	bl	8005324 <uxListRemove>
 8006c5e:	9901      	ldr	r1, [sp, #4]
 8006c60:	b1a0      	cbz	r0, 8006c8c <xTaskPriorityDisinherit+0x88>
 8006c62:	4814      	ldr	r0, [pc, #80]	; (8006cb4 <xTaskPriorityDisinherit+0xb0>)
 8006c64:	4a14      	ldr	r2, [pc, #80]	; (8006cb8 <xTaskPriorityDisinherit+0xb4>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006c66:	6c63      	ldr	r3, [r4, #68]	; 0x44
					prvAddTaskToReadyList( pxTCB );
 8006c68:	6816      	ldr	r6, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006c6a:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8006c6c:	2501      	movs	r5, #1
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c6e:	f1c3 0707 	rsb	r7, r3, #7
 8006c72:	61a7      	str	r7, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8006c74:	fa05 f403 	lsl.w	r4, r5, r3
 8006c78:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006c7c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8006c80:	4334      	orrs	r4, r6
 8006c82:	6014      	str	r4, [r2, #0]
 8006c84:	f7fe fb26 	bl	80052d4 <vListInsertEnd>
					xReturn = pdTRUE;
 8006c88:	4628      	mov	r0, r5
		return xReturn;
 8006c8a:	e7d6      	b.n	8006c3a <xTaskPriorityDisinherit+0x36>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006c8c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8006c8e:	4809      	ldr	r0, [pc, #36]	; (8006cb4 <xTaskPriorityDisinherit+0xb0>)
 8006c90:	4a09      	ldr	r2, [pc, #36]	; (8006cb8 <xTaskPriorityDisinherit+0xb4>)
 8006c92:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8006c96:	009b      	lsls	r3, r3, #2
 8006c98:	58c3      	ldr	r3, [r0, r3]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d1e3      	bne.n	8006c66 <xTaskPriorityDisinherit+0x62>
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	fa03 f505 	lsl.w	r5, r3, r5
 8006ca4:	6813      	ldr	r3, [r2, #0]
 8006ca6:	ea23 0305 	bic.w	r3, r3, r5
 8006caa:	6013      	str	r3, [r2, #0]
 8006cac:	e7db      	b.n	8006c66 <xTaskPriorityDisinherit+0x62>
 8006cae:	bf00      	nop
 8006cb0:	20004dc0 	.word	0x20004dc0
 8006cb4:	20004dcc 	.word	0x20004dcc
 8006cb8:	20004e68 	.word	0x20004e68

08006cbc <prvSwitchTimerLists>:
	}
}
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006cbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006cc0:	4e22      	ldr	r6, [pc, #136]	; (8006d4c <prvSwitchTimerLists+0x90>)
	if( xTimerQueue != NULL )
 8006cc2:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8006d54 <prvSwitchTimerLists+0x98>
{
 8006cc6:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 8006cc8:	f04f 0800 	mov.w	r8, #0

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006ccc:	e00d      	b.n	8006cea <prvSwitchTimerLists+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006cce:	68db      	ldr	r3, [r3, #12]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cd0:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006cd2:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006cd4:	1d25      	adds	r5, r4, #4
 8006cd6:	4628      	mov	r0, r5
 8006cd8:	f7fe fb24 	bl	8005324 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006cdc:	6a23      	ldr	r3, [r4, #32]
 8006cde:	4620      	mov	r0, r4
 8006ce0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006ce2:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8006ce6:	075b      	lsls	r3, r3, #29
 8006ce8:	d40a      	bmi.n	8006d00 <prvSwitchTimerLists+0x44>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006cea:	6833      	ldr	r3, [r6, #0]
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	2a00      	cmp	r2, #0
 8006cf0:	d1ed      	bne.n	8006cce <prvSwitchTimerLists+0x12>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
 8006cf2:	4a17      	ldr	r2, [pc, #92]	; (8006d50 <prvSwitchTimerLists+0x94>)
 8006cf4:	6811      	ldr	r1, [r2, #0]
 8006cf6:	6031      	str	r1, [r6, #0]
	pxOverflowTimerList = pxTemp;
 8006cf8:	6013      	str	r3, [r2, #0]
}
 8006cfa:	b005      	add	sp, #20
 8006cfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006d00:	69a3      	ldr	r3, [r4, #24]
 8006d02:	443b      	add	r3, r7
			if( xReloadTime > xNextExpireTime )
 8006d04:	429f      	cmp	r7, r3
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006d06:	4629      	mov	r1, r5
			if( xReloadTime > xNextExpireTime )
 8006d08:	d205      	bcs.n	8006d16 <prvSwitchTimerLists+0x5a>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006d0a:	6830      	ldr	r0, [r6, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006d0c:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006d0e:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006d10:	f7fe faf0 	bl	80052f4 <vListInsert>
 8006d14:	e7e9      	b.n	8006cea <prvSwitchTimerLists+0x2e>
	if( xTimerQueue != NULL )
 8006d16:	f8d9 3000 	ldr.w	r3, [r9]
 8006d1a:	b16b      	cbz	r3, 8006d38 <prvSwitchTimerLists+0x7c>
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006d1c:	e9cd 8701 	strd	r8, r7, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006d20:	9403      	str	r4, [sp, #12]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006d22:	f7ff ff5f 	bl	8006be4 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006d26:	2300      	movs	r3, #0
 8006d28:	f8d9 0000 	ldr.w	r0, [r9]
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	a901      	add	r1, sp, #4
 8006d30:	f7fe fd38 	bl	80057a4 <xQueueGenericSend>
				configASSERT( xResult );
 8006d34:	2800      	cmp	r0, #0
 8006d36:	d1d8      	bne.n	8006cea <prvSwitchTimerLists+0x2e>
 8006d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d3c:	f383 8811 	msr	BASEPRI, r3
 8006d40:	f3bf 8f6f 	isb	sy
 8006d44:	f3bf 8f4f 	dsb	sy
 8006d48:	e7fe      	b.n	8006d48 <prvSwitchTimerLists+0x8c>
 8006d4a:	bf00      	nop
 8006d4c:	20004ee8 	.word	0x20004ee8
 8006d50:	20004eec 	.word	0x20004eec
 8006d54:	20004fdc 	.word	0x20004fdc

08006d58 <prvTimerTask>:
{
 8006d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d5c:	4e96      	ldr	r6, [pc, #600]	; (8006fb8 <prvTimerTask+0x260>)
 8006d5e:	4d97      	ldr	r5, [pc, #604]	; (8006fbc <prvTimerTask+0x264>)
 8006d60:	4c97      	ldr	r4, [pc, #604]	; (8006fc0 <prvTimerTask+0x268>)
 8006d62:	b089      	sub	sp, #36	; 0x24
					portYIELD_WITHIN_API();
 8006d64:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
 8006d68:	f04f 5880 	mov.w	r8, #268435456	; 0x10000000
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006d6c:	6833      	ldr	r3, [r6, #0]
 8006d6e:	681f      	ldr	r7, [r3, #0]
 8006d70:	2f00      	cmp	r7, #0
 8006d72:	f000 809f 	beq.w	8006eb4 <prvTimerTask+0x15c>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006d76:	68db      	ldr	r3, [r3, #12]
 8006d78:	681f      	ldr	r7, [r3, #0]
	vTaskSuspendAll();
 8006d7a:	f7ff fcf1 	bl	8006760 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8006d7e:	f7ff fd07 	bl	8006790 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8006d82:	682a      	ldr	r2, [r5, #0]
 8006d84:	4282      	cmp	r2, r0
	xTimeNow = xTaskGetTickCount();
 8006d86:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 8006d88:	f200 80a5 	bhi.w	8006ed6 <prvTimerTask+0x17e>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006d8c:	4287      	cmp	r7, r0
	xLastTime = xTimeNow;
 8006d8e:	6028      	str	r0, [r5, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006d90:	f240 80ab 	bls.w	8006eea <prvTimerTask+0x192>
 8006d94:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006d96:	6820      	ldr	r0, [r4, #0]
 8006d98:	eba7 010a 	sub.w	r1, r7, sl
 8006d9c:	f7ff f82a 	bl	8005df4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006da0:	f7ff fce6 	bl	8006770 <xTaskResumeAll>
 8006da4:	b928      	cbnz	r0, 8006db2 <prvTimerTask+0x5a>
					portYIELD_WITHIN_API();
 8006da6:	f8c9 8d04 	str.w	r8, [r9, #3332]	; 0xd04
 8006daa:	f3bf 8f4f 	dsb	sy
 8006dae:	f3bf 8f6f 	isb	sy
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006db2:	6820      	ldr	r0, [r4, #0]
 8006db4:	2200      	movs	r2, #0
 8006db6:	a902      	add	r1, sp, #8
 8006db8:	f7fe fe72 	bl	8005aa0 <xQueueReceive>
 8006dbc:	2800      	cmp	r0, #0
 8006dbe:	d0d5      	beq.n	8006d6c <prvTimerTask+0x14>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006dc0:	9b02      	ldr	r3, [sp, #8]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	dbf5      	blt.n	8006db2 <prvTimerTask+0x5a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006dc6:	9f04      	ldr	r7, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	b113      	cbz	r3, 8006dd2 <prvTimerTask+0x7a>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006dcc:	1d38      	adds	r0, r7, #4
 8006dce:	f7fe faa9 	bl	8005324 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 8006dd2:	f7ff fcdd 	bl	8006790 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8006dd6:	682b      	ldr	r3, [r5, #0]
 8006dd8:	4298      	cmp	r0, r3
	xTimeNow = xTaskGetTickCount();
 8006dda:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 8006ddc:	f0c0 8082 	bcc.w	8006ee4 <prvTimerTask+0x18c>
			switch( xMessage.xMessageID )
 8006de0:	9b02      	ldr	r3, [sp, #8]
	xLastTime = xTimeNow;
 8006de2:	f8c5 a000 	str.w	sl, [r5]
			switch( xMessage.xMessageID )
 8006de6:	2b09      	cmp	r3, #9
 8006de8:	d8e3      	bhi.n	8006db2 <prvTimerTask+0x5a>
 8006dea:	e8df f003 	tbb	[pc, r3]
 8006dee:	0505      	.short	0x0505
 8006df0:	5a3d5305 	.word	0x5a3d5305
 8006df4:	3d530505 	.word	0x3d530505
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006df8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006dfc:	69ba      	ldr	r2, [r7, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006dfe:	613f      	str	r7, [r7, #16]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006e00:	f043 0301 	orr.w	r3, r3, #1
 8006e04:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006e08:	9b03      	ldr	r3, [sp, #12]
 8006e0a:	1899      	adds	r1, r3, r2
 8006e0c:	bf2c      	ite	cs
 8006e0e:	2001      	movcs	r0, #1
 8006e10:	2000      	movcc	r0, #0
	if( xNextExpiryTime <= xTimeNow )
 8006e12:	4551      	cmp	r1, sl
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006e14:	6079      	str	r1, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
 8006e16:	f200 8083 	bhi.w	8006f20 <prvTimerTask+0x1c8>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e1a:	ebaa 0303 	sub.w	r3, sl, r3
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	d832      	bhi.n	8006e88 <prvTimerTask+0x130>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e22:	6a3b      	ldr	r3, [r7, #32]
 8006e24:	4638      	mov	r0, r7
 8006e26:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006e28:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006e2c:	075b      	lsls	r3, r3, #29
 8006e2e:	d5c0      	bpl.n	8006db2 <prvTimerTask+0x5a>
	if( xTimerQueue != NULL )
 8006e30:	6823      	ldr	r3, [r4, #0]
 8006e32:	b183      	cbz	r3, 8006e56 <prvTimerTask+0xfe>
		xMessage.xMessageID = xCommandID;
 8006e34:	2200      	movs	r2, #0
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006e36:	69bb      	ldr	r3, [r7, #24]
		xMessage.xMessageID = xCommandID;
 8006e38:	9205      	str	r2, [sp, #20]
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006e3a:	9a03      	ldr	r2, [sp, #12]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006e3c:	9707      	str	r7, [sp, #28]
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006e3e:	4413      	add	r3, r2
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006e40:	9306      	str	r3, [sp, #24]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006e42:	f7ff fecf 	bl	8006be4 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006e46:	2300      	movs	r3, #0
 8006e48:	6820      	ldr	r0, [r4, #0]
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	a905      	add	r1, sp, #20
 8006e4e:	f7fe fca9 	bl	80057a4 <xQueueGenericSend>
							configASSERT( xResult );
 8006e52:	2800      	cmp	r0, #0
 8006e54:	d1ad      	bne.n	8006db2 <prvTimerTask+0x5a>
 8006e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e5a:	f383 8811 	msr	BASEPRI, r3
 8006e5e:	f3bf 8f6f 	isb	sy
 8006e62:	f3bf 8f4f 	dsb	sy
 8006e66:	e7fe      	b.n	8006e66 <prvTimerTask+0x10e>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006e68:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006e6c:	f043 0301 	orr.w	r3, r3, #1
 8006e70:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006e74:	9b03      	ldr	r3, [sp, #12]
 8006e76:	61bb      	str	r3, [r7, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	f000 8094 	beq.w	8006fa6 <prvTimerTask+0x24e>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006e7e:	4453      	add	r3, sl
	if( xNextExpiryTime <= xTimeNow )
 8006e80:	4553      	cmp	r3, sl
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006e82:	607b      	str	r3, [r7, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006e84:	613f      	str	r7, [r7, #16]
	if( xNextExpiryTime <= xTimeNow )
 8006e86:	d855      	bhi.n	8006f34 <prvTimerTask+0x1dc>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006e88:	4b4e      	ldr	r3, [pc, #312]	; (8006fc4 <prvTimerTask+0x26c>)
 8006e8a:	1d39      	adds	r1, r7, #4
 8006e8c:	6818      	ldr	r0, [r3, #0]
 8006e8e:	f7fe fa31 	bl	80052f4 <vListInsert>
	return xProcessTimerNow;
 8006e92:	e78e      	b.n	8006db2 <prvTimerTask+0x5a>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006e94:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006e98:	f023 0301 	bic.w	r3, r3, #1
 8006e9c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
					break;
 8006ea0:	e787      	b.n	8006db2 <prvTimerTask+0x5a>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006ea2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006ea6:	079a      	lsls	r2, r3, #30
 8006ea8:	d549      	bpl.n	8006f3e <prvTimerTask+0x1e6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006eaa:	f023 0301 	bic.w	r3, r3, #1
 8006eae:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8006eb2:	e77e      	b.n	8006db2 <prvTimerTask+0x5a>
	vTaskSuspendAll();
 8006eb4:	f7ff fc54 	bl	8006760 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8006eb8:	f7ff fc6a 	bl	8006790 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8006ebc:	682a      	ldr	r2, [r5, #0]
 8006ebe:	4282      	cmp	r2, r0
	xTimeNow = xTaskGetTickCount();
 8006ec0:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 8006ec2:	d808      	bhi.n	8006ed6 <prvTimerTask+0x17e>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006ec4:	4b3f      	ldr	r3, [pc, #252]	; (8006fc4 <prvTimerTask+0x26c>)
	xLastTime = xTimeNow;
 8006ec6:	f8c5 a000 	str.w	sl, [r5]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006eca:	681a      	ldr	r2, [r3, #0]
 8006ecc:	6812      	ldr	r2, [r2, #0]
 8006ece:	fab2 f282 	clz	r2, r2
 8006ed2:	0952      	lsrs	r2, r2, #5
 8006ed4:	e75f      	b.n	8006d96 <prvTimerTask+0x3e>
		prvSwitchTimerLists();
 8006ed6:	f7ff fef1 	bl	8006cbc <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 8006eda:	f8c5 a000 	str.w	sl, [r5]
			( void ) xTaskResumeAll();
 8006ede:	f7ff fc47 	bl	8006770 <xTaskResumeAll>
 8006ee2:	e766      	b.n	8006db2 <prvTimerTask+0x5a>
		prvSwitchTimerLists();
 8006ee4:	f7ff feea 	bl	8006cbc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006ee8:	e77a      	b.n	8006de0 <prvTimerTask+0x88>
				( void ) xTaskResumeAll();
 8006eea:	f7ff fc41 	bl	8006770 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006eee:	6832      	ldr	r2, [r6, #0]
 8006ef0:	68d2      	ldr	r2, [r2, #12]
 8006ef2:	f8d2 b00c 	ldr.w	fp, [r2, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006ef6:	f10b 0104 	add.w	r1, fp, #4
 8006efa:	4608      	mov	r0, r1
 8006efc:	9101      	str	r1, [sp, #4]
 8006efe:	f7fe fa11 	bl	8005324 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006f02:	f89b 0024 	ldrb.w	r0, [fp, #36]	; 0x24
 8006f06:	9901      	ldr	r1, [sp, #4]
 8006f08:	f010 0f04 	tst.w	r0, #4
 8006f0c:	d11b      	bne.n	8006f46 <prvTimerTask+0x1ee>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006f0e:	f020 0001 	bic.w	r0, r0, #1
 8006f12:	f88b 0024 	strb.w	r0, [fp, #36]	; 0x24
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006f16:	f8db 3020 	ldr.w	r3, [fp, #32]
 8006f1a:	4658      	mov	r0, fp
 8006f1c:	4798      	blx	r3
}
 8006f1e:	e748      	b.n	8006db2 <prvTimerTask+0x5a>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006f20:	4553      	cmp	r3, sl
 8006f22:	d902      	bls.n	8006f2a <prvTimerTask+0x1d2>
 8006f24:	2800      	cmp	r0, #0
 8006f26:	f43f af7c 	beq.w	8006e22 <prvTimerTask+0xca>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006f2a:	6830      	ldr	r0, [r6, #0]
 8006f2c:	1d39      	adds	r1, r7, #4
 8006f2e:	f7fe f9e1 	bl	80052f4 <vListInsert>
	return xProcessTimerNow;
 8006f32:	e73e      	b.n	8006db2 <prvTimerTask+0x5a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006f34:	6830      	ldr	r0, [r6, #0]
 8006f36:	1d39      	adds	r1, r7, #4
 8006f38:	f7fe f9dc 	bl	80052f4 <vListInsert>
 8006f3c:	e739      	b.n	8006db2 <prvTimerTask+0x5a>
							vPortFree( pxTimer );
 8006f3e:	4638      	mov	r0, r7
 8006f40:	f7fe f956 	bl	80051f0 <vPortFree>
 8006f44:	e735      	b.n	8006db2 <prvTimerTask+0x5a>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006f46:	f8db 2018 	ldr.w	r2, [fp, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006f4a:	f8cb b010 	str.w	fp, [fp, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006f4e:	18b8      	adds	r0, r7, r2
	if( xNextExpiryTime <= xTimeNow )
 8006f50:	4550      	cmp	r0, sl
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006f52:	f8cb 0004 	str.w	r0, [fp, #4]
	if( xNextExpiryTime <= xTimeNow )
 8006f56:	d903      	bls.n	8006f60 <prvTimerTask+0x208>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006f58:	6830      	ldr	r0, [r6, #0]
 8006f5a:	f7fe f9cb 	bl	80052f4 <vListInsert>
	return xProcessTimerNow;
 8006f5e:	e7da      	b.n	8006f16 <prvTimerTask+0x1be>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f60:	ebaa 0307 	sub.w	r3, sl, r7
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d819      	bhi.n	8006f9c <prvTimerTask+0x244>
	if( xTimerQueue != NULL )
 8006f68:	6823      	ldr	r3, [r4, #0]
 8006f6a:	b173      	cbz	r3, 8006f8a <prvTimerTask+0x232>
		xMessage.xMessageID = xCommandID;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	9305      	str	r3, [sp, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006f70:	9706      	str	r7, [sp, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006f72:	f8cd b01c 	str.w	fp, [sp, #28]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006f76:	f7ff fe35 	bl	8006be4 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	6820      	ldr	r0, [r4, #0]
 8006f7e:	461a      	mov	r2, r3
 8006f80:	a905      	add	r1, sp, #20
 8006f82:	f7fe fc0f 	bl	80057a4 <xQueueGenericSend>
			configASSERT( xResult );
 8006f86:	2800      	cmp	r0, #0
 8006f88:	d1c5      	bne.n	8006f16 <prvTimerTask+0x1be>
 8006f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f8e:	f383 8811 	msr	BASEPRI, r3
 8006f92:	f3bf 8f6f 	isb	sy
 8006f96:	f3bf 8f4f 	dsb	sy
 8006f9a:	e7fe      	b.n	8006f9a <prvTimerTask+0x242>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006f9c:	4b09      	ldr	r3, [pc, #36]	; (8006fc4 <prvTimerTask+0x26c>)
 8006f9e:	6818      	ldr	r0, [r3, #0]
 8006fa0:	f7fe f9a8 	bl	80052f4 <vListInsert>
	return xProcessTimerNow;
 8006fa4:	e7b7      	b.n	8006f16 <prvTimerTask+0x1be>
 8006fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006faa:	f383 8811 	msr	BASEPRI, r3
 8006fae:	f3bf 8f6f 	isb	sy
 8006fb2:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006fb6:	e7fe      	b.n	8006fb6 <prvTimerTask+0x25e>
 8006fb8:	20004ee8 	.word	0x20004ee8
 8006fbc:	20004f90 	.word	0x20004f90
 8006fc0:	20004fdc 	.word	0x20004fdc
 8006fc4:	20004eec 	.word	0x20004eec

08006fc8 <xTimerCreateTimerTask>:
{
 8006fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8006fca:	4c23      	ldr	r4, [pc, #140]	; (8007058 <xTimerCreateTimerTask+0x90>)
{
 8006fcc:	b089      	sub	sp, #36	; 0x24
	taskENTER_CRITICAL();
 8006fce:	f7fe fa21 	bl	8005414 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8006fd2:	6825      	ldr	r5, [r4, #0]
 8006fd4:	b335      	cbz	r5, 8007024 <xTimerCreateTimerTask+0x5c>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006fd6:	f7fe fa3f 	bl	8005458 <vPortExitCritical>
	if( xTimerQueue != NULL )
 8006fda:	6823      	ldr	r3, [r4, #0]
 8006fdc:	b1cb      	cbz	r3, 8007012 <xTimerCreateTimerTask+0x4a>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006fde:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006fe0:	aa07      	add	r2, sp, #28
 8006fe2:	a906      	add	r1, sp, #24
 8006fe4:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006fe6:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006fea:	f7f9 fab3 	bl	8000554 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006fee:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 8006ff2:	2302      	movs	r3, #2
 8006ff4:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8006ff8:	9300      	str	r3, [sp, #0]
 8006ffa:	9a07      	ldr	r2, [sp, #28]
 8006ffc:	4917      	ldr	r1, [pc, #92]	; (800705c <xTimerCreateTimerTask+0x94>)
 8006ffe:	4818      	ldr	r0, [pc, #96]	; (8007060 <xTimerCreateTimerTask+0x98>)
 8007000:	4623      	mov	r3, r4
 8007002:	f7ff fa69 	bl	80064d8 <xTaskCreateStatic>
 8007006:	4b17      	ldr	r3, [pc, #92]	; (8007064 <xTimerCreateTimerTask+0x9c>)
 8007008:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800700a:	b110      	cbz	r0, 8007012 <xTimerCreateTimerTask+0x4a>
}
 800700c:	2001      	movs	r0, #1
 800700e:	b009      	add	sp, #36	; 0x24
 8007010:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007016:	f383 8811 	msr	BASEPRI, r3
 800701a:	f3bf 8f6f 	isb	sy
 800701e:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8007022:	e7fe      	b.n	8007022 <xTimerCreateTimerTask+0x5a>
			vListInitialise( &xActiveTimerList1 );
 8007024:	4f10      	ldr	r7, [pc, #64]	; (8007068 <xTimerCreateTimerTask+0xa0>)
			vListInitialise( &xActiveTimerList2 );
 8007026:	4e11      	ldr	r6, [pc, #68]	; (800706c <xTimerCreateTimerTask+0xa4>)
			vListInitialise( &xActiveTimerList1 );
 8007028:	4638      	mov	r0, r7
 800702a:	f7fe f943 	bl	80052b4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800702e:	4630      	mov	r0, r6
 8007030:	f7fe f940 	bl	80052b4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007034:	4a0e      	ldr	r2, [pc, #56]	; (8007070 <xTimerCreateTimerTask+0xa8>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007036:	9500      	str	r5, [sp, #0]
			pxCurrentTimerList = &xActiveTimerList1;
 8007038:	6017      	str	r7, [r2, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800703a:	4a0e      	ldr	r2, [pc, #56]	; (8007074 <xTimerCreateTimerTask+0xac>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800703c:	4b0e      	ldr	r3, [pc, #56]	; (8007078 <xTimerCreateTimerTask+0xb0>)
			pxOverflowTimerList = &xActiveTimerList2;
 800703e:	6016      	str	r6, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007040:	210c      	movs	r1, #12
 8007042:	4a0e      	ldr	r2, [pc, #56]	; (800707c <xTimerCreateTimerTask+0xb4>)
 8007044:	200a      	movs	r0, #10
 8007046:	f7fe fb3f 	bl	80056c8 <xQueueGenericCreateStatic>
 800704a:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 800704c:	2800      	cmp	r0, #0
 800704e:	d0c2      	beq.n	8006fd6 <xTimerCreateTimerTask+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007050:	490b      	ldr	r1, [pc, #44]	; (8007080 <xTimerCreateTimerTask+0xb8>)
 8007052:	f7fe fea7 	bl	8005da4 <vQueueAddToRegistry>
 8007056:	e7be      	b.n	8006fd6 <xTimerCreateTimerTask+0xe>
 8007058:	20004fdc 	.word	0x20004fdc
 800705c:	0800977c 	.word	0x0800977c
 8007060:	08006d59 	.word	0x08006d59
 8007064:	20004fe0 	.word	0x20004fe0
 8007068:	20004f68 	.word	0x20004f68
 800706c:	20004f7c 	.word	0x20004f7c
 8007070:	20004ee8 	.word	0x20004ee8
 8007074:	20004eec 	.word	0x20004eec
 8007078:	20004f94 	.word	0x20004f94
 800707c:	20004ef0 	.word	0x20004ef0
 8007080:	08009774 	.word	0x08009774

08007084 <VBS_GetAvBusVoltage_V>:
  */
__weak uint16_t VBS_GetAvBusVoltage_V( BusVoltageSensor_Handle_t * pHandle )
{
  uint32_t temp;

  temp = ( uint32_t )( pHandle->AvBusVoltage_d );
 8007084:	88c3      	ldrh	r3, [r0, #6]
  temp *= pHandle->ConversionFactor;
 8007086:	8840      	ldrh	r0, [r0, #2]
 8007088:	fb03 f000 	mul.w	r0, r3, r0
  temp /= 65536u;

  return ( ( uint16_t )temp );
}
 800708c:	0c00      	lsrs	r0, r0, #16
 800708e:	4770      	bx	lr

08007090 <Circle_Limitation>:
  * @param  pHandle pointer on the related component instance
  * @param  Vqd Voltage in qd reference frame
  * @retval qd_t Limited Vqd vector
  */
__weak qd_t Circle_Limitation( CircleLimitation_Handle_t * pHandle, qd_t Vqd )
{
 8007090:	140b      	asrs	r3, r1, #16
            ( int32_t )( Vqd.d ) * Vqd.d;

  uw_temp = ( uint32_t ) sw_temp;

  /* uw_temp min value 0, max value 32767*32767 */
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8007092:	8802      	ldrh	r2, [r0, #0]
 8007094:	b209      	sxth	r1, r1
            ( int32_t )( Vqd.d ) * Vqd.d;
 8007096:	fb03 fc03 	mul.w	ip, r3, r3
  sw_temp = ( int32_t )( Vqd.q ) * Vqd.q +
 800709a:	fb01 cc01 	mla	ip, r1, r1, ip
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 800709e:	fb02 f202 	mul.w	r2, r2, r2
 80070a2:	4562      	cmp	r2, ip
{
 80070a4:	b084      	sub	sp, #16
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 80070a6:	d21a      	bcs.n	80070de <Circle_Limitation+0x4e>
  {

    uw_temp /= ( uint32_t )( 16777216 );

    /* wtemp min value pHandle->Start_index, max value 127 */
    uw_temp -= pHandle->Start_index;
 80070a8:	f890 20b2 	ldrb.w	r2, [r0, #178]	; 0xb2
 80070ac:	ebc2 6c1c 	rsb	ip, r2, ip, lsr #24

    /* uw_temp min value 0, max value 127 - pHandle->Start_index */
    table_element = pHandle->Circle_limit_table[( uint8_t )uw_temp];
 80070b0:	fa5f fc8c 	uxtb.w	ip, ip
 80070b4:	eb00 004c 	add.w	r0, r0, ip, lsl #1

    sw_temp = Vqd.q * ( int32_t )table_element;
 80070b8:	8882      	ldrh	r2, [r0, #4]
 80070ba:	fb02 f101 	mul.w	r1, r2, r1
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 80070be:	2900      	cmp	r1, #0

    sw_temp = Vqd.d * ( int32_t )( table_element );
 80070c0:	fb02 f303 	mul.w	r3, r2, r3
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 80070c4:	bfbc      	itt	lt
 80070c6:	f501 41ff 	addlt.w	r1, r1, #32640	; 0x7f80
 80070ca:	317f      	addlt	r1, #127	; 0x7f
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	bfbc      	itt	lt
 80070d0:	f503 43ff 	addlt.w	r3, r3, #32640	; 0x7f80
 80070d4:	337f      	addlt	r3, #127	; 0x7f
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 80070d6:	f341 31cf 	sbfx	r1, r1, #15, #16
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 80070da:	f343 33cf 	sbfx	r3, r3, #15, #16
  }

  return ( local_vqd );
 80070de:	b289      	uxth	r1, r1
 80070e0:	2000      	movs	r0, #0
 80070e2:	f361 000f 	bfi	r0, r1, #0, #16
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	f363 401f 	bfi	r0, r3, #16, #16
}
 80070ec:	b004      	add	sp, #16
 80070ee:	4770      	bx	lr

080070f0 <FCP_Init>:
 * @{
 */

__weak void FCP_Init( FCP_Handle_t * pHandle )
{
  pHandle->RxTimeoutCountdown = 0;
 80070f0:	2300      	movs	r3, #0
 80070f2:	8243      	strh	r3, [r0, #18]

  pHandle->TxFrame.Code = 0x0;
 80070f4:	8283      	strh	r3, [r0, #20]
  pHandle->TxFrame.Size = 0;
  pHandle->TxFrame.FrameCRC = 0;
 80070f6:	f8c0 3096 	str.w	r3, [r0, #150]	; 0x96
  pHandle->TxFrameState = FCP_TRANSFER_IDLE;
  pHandle->TxFrameLevel = 0;

  pHandle->RxFrame.Code = 0x0;
  pHandle->RxFrame.Size = 0;
 80070fa:	f880 309a 	strb.w	r3, [r0, #154]	; 0x9a
  pHandle->RxFrame.FrameCRC = 0;
 80070fe:	f8a0 311b 	strh.w	r3, [r0, #283]	; 0x11b
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
  pHandle->RxFrameLevel = 0;
 8007102:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
}
 8007106:	4770      	bx	lr

08007108 <FCP_SetClient>:
                    struct MCP_Handle_s * pClient,
                    FCP_SentFrameCallback_t pSentFrameCb,
                    FCP_ReceivedFrameCallback_t pReceviedFrameCb,
                    FCP_RxTimeoutCallback_t pRxTimeoutCb )
{
  if ( MC_NULL != pHandle )
 8007108:	b120      	cbz	r0, 8007114 <FCP_SetClient+0xc>
  {
    pHandle->ClientEntity = pClient;
    pHandle->ClientFrameSentCallback = pSentFrameCb;
 800710a:	e9c0 1200 	strd	r1, r2, [r0]
    pHandle->ClientFrameReceivedCallback = pReceviedFrameCb;
 800710e:	6083      	str	r3, [r0, #8]
    pHandle->ClientRxTimeoutCallback = pRxTimeoutCb;
 8007110:	9b00      	ldr	r3, [sp, #0]
 8007112:	60c3      	str	r3, [r0, #12]
  }
}
 8007114:	4770      	bx	lr
 8007116:	bf00      	nop

08007118 <FCP_CalcCRC>:
{
  uint8_t nCRC = 0;
  uint16_t nSum = 0;
  uint8_t idx;

  if( MC_NULL != pFrame )
 8007118:	b190      	cbz	r0, 8007140 <FCP_CalcCRC+0x28>
  {
    nSum += pFrame->Code;
    nSum += pFrame->Size;
 800711a:	7841      	ldrb	r1, [r0, #1]
    nSum += pFrame->Code;
 800711c:	7802      	ldrb	r2, [r0, #0]
    nSum += pFrame->Size;
 800711e:	1853      	adds	r3, r2, r1

    for ( idx = 0; idx < pFrame->Size; idx++ )
 8007120:	b151      	cbz	r1, 8007138 <FCP_CalcCRC+0x20>
 8007122:	1c82      	adds	r2, r0, #2
 8007124:	3901      	subs	r1, #1
 8007126:	3001      	adds	r0, #1
 8007128:	fa52 f181 	uxtab	r1, r2, r1
    {
      nSum += pFrame->Buffer[idx];
 800712c:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8007130:	4413      	add	r3, r2
    for ( idx = 0; idx < pFrame->Size; idx++ )
 8007132:	4281      	cmp	r1, r0
      nSum += pFrame->Buffer[idx];
 8007134:	b29b      	uxth	r3, r3
    for ( idx = 0; idx < pFrame->Size; idx++ )
 8007136:	d1f9      	bne.n	800712c <FCP_CalcCRC+0x14>
    }

    nCRC = (uint8_t)(nSum & 0xFF) ; // Low Byte of nSum
    nCRC += (uint8_t) (nSum >> 8) ; // High Byte of nSum
 8007138:	eb03 2013 	add.w	r0, r3, r3, lsr #8
 800713c:	f000 00ff 	and.w	r0, r0, #255	; 0xff
  }

  return nCRC ;
}
 8007140:	4770      	bx	lr
 8007142:	bf00      	nop

08007144 <HALL_Init>:
            sensors.
  * @param  pHandle: handler of the current instance of the hall_speed_pos_fdbk component
  * @retval none
  */
__weak void HALL_Init( HALL_Handle_t * pHandle )
{
 8007144:	b530      	push	{r4, r5, lr}
  TIM_TypeDef * TIMx = pHandle->TIMx;

  uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit *
 8007146:	f8b0 c016 	ldrh.w	ip, [r0, #22]
                                     pHandle->_Super.bElToMecRatio;
 800714a:	7843      	ldrb	r3, [r0, #1]
  reliable speed */
  hMinReliableElSpeedUnit /= 4u;

  /* Adjustment factor: maximum measurable speed is x time greater than the
  maximum reliable speed */
  hMaxReliableElSpeedUnit *= 2u;
 800714c:	f8b0 e014 	ldrh.w	lr, [r0, #20]

  pHandle->OvfFreq = ( uint16_t )( pHandle->TIMClockFreq / 65536u );
 8007150:	6a82      	ldr	r2, [r0, #40]	; 0x28
  uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit *
 8007152:	fb1c fc03 	smulbb	ip, ip, r3
  hMaxReliableElSpeedUnit *= 2u;
 8007156:	fb1e fe03 	smulbb	lr, lr, r3
  uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit *
 800715a:	fa1f fc8c 	uxth.w	ip, ip
  hMaxReliableElSpeedUnit *= 2u;
 800715e:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
  pHandle->OvfFreq = ( uint16_t )( pHandle->TIMClockFreq / 65536u );
 8007162:	0c11      	lsrs	r1, r2, #16

  /* SW Init */
  if ( hMinReliableElSpeedUnit == 0u )
 8007164:	f1bc 0f03 	cmp.w	ip, #3
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8007168:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  pHandle->OvfFreq = ( uint16_t )( pHandle->TIMClockFreq / 65536u );
 800716a:	f8a0 10c2 	strh.w	r1, [r0, #194]	; 0xc2
  hMaxReliableElSpeedUnit *= 2u;
 800716e:	fa1f fe8e 	uxth.w	lr, lr
  if ( hMinReliableElSpeedUnit == 0u )
 8007172:	d96d      	bls.n	8007250 <HALL_Init+0x10c>
  else
  {
    /* Set accordingly the min reliable speed */
    /* 1000 comes from mS 
    * 6 comes from the fact that sensors are toggling each 60 deg = 360/6 deg */
    pHandle->HallTimeout = 1000*SPEED_UNIT / ( 6u * hMinReliableElSpeedUnit );
 8007174:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
 8007178:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 800717c:	f242 7410 	movw	r4, #10000	; 0x2710
 8007180:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8007184:	fbb4 fcfc 	udiv	ip, r4, ip
 8007188:	fa1f f48c 	uxth.w	r4, ip
 800718c:	f8a0 40c0 	strh.w	r4, [r0, #192]	; 0xc0
  }

  /* Compute the prescaler to the closet value of the TimeOut (in mS )*/
  pHandle->HALLMaxRatio = ( pHandle->HallTimeout * pHandle->OvfFreq ) / 1000 ;
 8007190:	4c31      	ldr	r4, [pc, #196]	; (8007258 <HALL_Init+0x114>)
  pHandle->MaxPeriod = ( pHandle->HALLMaxRatio ) * 65536uL;

  pHandle->SatSpeed = hMaxReliableElSpeedUnit;

  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
                              / ( pHandle->_Super.hMeasurementFrequency ) ) * ( pHandle->_Super.DPPConvFactor);
 8007192:	69c5      	ldr	r5, [r0, #28]
  pHandle->SatSpeed = hMaxReliableElSpeedUnit;
 8007194:	f8a0 e0b0 	strh.w	lr, [r0, #176]	; 0xb0
  pHandle->HALLMaxRatio = ( pHandle->HallTimeout * pHandle->OvfFreq ) / 1000 ;
 8007198:	fb0c f101 	mul.w	r1, ip, r1
 800719c:	fba4 4101 	umull	r4, r1, r4, r1
  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 80071a0:	4c2e      	ldr	r4, [pc, #184]	; (800725c <HALL_Init+0x118>)
                              / ( pHandle->_Super.hMeasurementFrequency ) ) * ( pHandle->_Super.DPPConvFactor);
 80071a2:	f8b0 c01a 	ldrh.w	ip, [r0, #26]
  pHandle->HALLMaxRatio = ( pHandle->HallTimeout * pHandle->OvfFreq ) / 1000 ;
 80071a6:	0989      	lsrs	r1, r1, #6
  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 80071a8:	fba4 4202 	umull	r4, r2, r4, r2
 80071ac:	0892      	lsrs	r2, r2, #2
  pHandle->MaxPeriod = ( pHandle->HALLMaxRatio ) * 65536uL;
 80071ae:	040c      	lsls	r4, r1, #16
 80071b0:	f8c0 40b8 	str.w	r4, [r0, #184]	; 0xb8

  pHandle->MinPeriod = ( ( SPEED_UNIT * ( pHandle->TIMClockFreq /6uL) ) 
 80071b4:	eb02 0482 	add.w	r4, r2, r2, lsl #2
                              / ( pHandle->_Super.hMeasurementFrequency ) ) * ( pHandle->_Super.DPPConvFactor);
 80071b8:	fbb2 f2fc 	udiv	r2, r2, ip
 80071bc:	fb05 f202 	mul.w	r2, r5, r2
  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 80071c0:	f8c0 20b4 	str.w	r2, [r0, #180]	; 0xb4
                       / hMaxReliableElSpeedUnit);

  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 80071c4:	f890 20c6 	ldrb.w	r2, [r0, #198]	; 0xc6
  pHandle->HALLMaxRatio = ( pHandle->HallTimeout * pHandle->OvfFreq ) / 1000 ;
 80071c8:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
  pHandle->MinPeriod = ( ( SPEED_UNIT * ( pHandle->TIMClockFreq /6uL) ) 
 80071cc:	0064      	lsls	r4, r4, #1
                       / hMaxReliableElSpeedUnit);
 80071ce:	fbb4 f4fe 	udiv	r4, r4, lr
  pHandle->MinPeriod = ( ( SPEED_UNIT * ( pHandle->TIMClockFreq /6uL) ) 
 80071d2:	f8c0 40bc 	str.w	r4, [r0, #188]	; 0xbc
  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 80071d6:	fb0c f202 	mul.w	r2, ip, r2
                                   pHandle->SpeedSamplingFreqHz ) - 1u;
 80071da:	8c84      	ldrh	r4, [r0, #36]	; 0x24
  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 80071dc:	fbb2 f2f4 	udiv	r2, r2, r4
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 80071e0:	699c      	ldr	r4, [r3, #24]
                                   pHandle->SpeedSamplingFreqHz ) - 1u;
 80071e2:	3a01      	subs	r2, #1
  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 80071e4:	f8a0 20c4 	strh.w	r2, [r0, #196]	; 0xc4

  /* Reset speed reliability */
  pHandle->SensorIsReliable = true;

  /* Set IC filter for Channel 1 (ICF1) */
  LL_TIM_IC_SetFilter(TIMx, LL_TIM_CHANNEL_CH1, ( uint32_t )(pHandle->ICx_Filter) << 20);
 80071e8:	f890 2048 	ldrb.w	r2, [r0, #72]	; 0x48
 80071ec:	f024 0cf0 	bic.w	ip, r4, #240	; 0xf0
  pHandle->MaxPeriod = ( pHandle->HALLMaxRatio ) * 65536uL;
 80071f0:	b289      	uxth	r1, r1
  pHandle->SensorIsReliable = true;
 80071f2:	2401      	movs	r4, #1
 80071f4:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4
 80071f8:	f880 4049 	strb.w	r4, [r0, #73]	; 0x49
 80071fc:	619a      	str	r2, [r3, #24]
  WRITE_REG(TIMx->PSC, Prescaler);
 80071fe:	6299      	str	r1, [r3, #40]	; 0x28
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8007200:	695a      	ldr	r2, [r3, #20]
  LL_TIM_SetPrescaler ( TIMx, pHandle->HALLMaxRatio );
  LL_TIM_GenerateEvent_UPDATE ( TIMx );


  /* Clear the TIMx's pending flags */
  WRITE_REG (TIMx->SR, 0);
 8007202:	2100      	movs	r1, #0
 8007204:	4322      	orrs	r2, r4
 8007206:	615a      	str	r2, [r3, #20]
 8007208:	6119      	str	r1, [r3, #16]
  MODIFY_REG(TIMx->CR1, TIM_CR1_URS, UpdateSource);
 800720a:	681a      	ldr	r2, [r3, #0]
 800720c:	f042 0204 	orr.w	r2, r2, #4
 8007210:	601a      	str	r2, [r3, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8007212:	68da      	ldr	r2, [r3, #12]
 8007214:	f042 0202 	orr.w	r2, r2, #2
 8007218:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800721a:	68da      	ldr	r2, [r3, #12]
 800721c:	4322      	orrs	r2, r4
 800721e:	60da      	str	r2, [r3, #12]
  WRITE_REG(TIMx->CNT, Counter);
 8007220:	6259      	str	r1, [r3, #36]	; 0x24
  SET_BIT(TIMx->CCER, Channels);
 8007222:	6a1a      	ldr	r2, [r3, #32]
 8007224:	4322      	orrs	r2, r4
 8007226:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8007228:	681a      	ldr	r2, [r3, #0]
 800722a:	4322      	orrs	r2, r4
 800722c:	601a      	str	r2, [r3, #0]
  LL_TIM_CC_EnableChannel  ( TIMx, LL_TIM_CHANNEL_CH1 );
  LL_TIM_EnableCounter ( TIMx );


  /* Erase speed buffer */
  bSpeedBufferSize = pHandle->SpeedBufferSize;
 800722e:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26

  for ( bIndex = 0u; bIndex < bSpeedBufferSize; bIndex++ )
 8007232:	b163      	cbz	r3, 800724e <HALL_Init+0x10a>
 8007234:	3b01      	subs	r3, #1
 8007236:	b2d9      	uxtb	r1, r3
 8007238:	f100 0350 	add.w	r3, r0, #80	; 0x50
  {
    pHandle->SensorPeriod[bIndex]  = pHandle->MaxPeriod;
 800723c:	f8d0 20b8 	ldr.w	r2, [r0, #184]	; 0xb8
 8007240:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8007244:	304c      	adds	r0, #76	; 0x4c
 8007246:	f840 2f04 	str.w	r2, [r0, #4]!
  for ( bIndex = 0u; bIndex < bSpeedBufferSize; bIndex++ )
 800724a:	4298      	cmp	r0, r3
 800724c:	d1fb      	bne.n	8007246 <HALL_Init+0x102>
  }
}
 800724e:	bd30      	pop	{r4, r5, pc}
 8007250:	f04f 0c96 	mov.w	ip, #150	; 0x96
    pHandle->HallTimeout = 150u;
 8007254:	4664      	mov	r4, ip
 8007256:	e799      	b.n	800718c <HALL_Init+0x48>
 8007258:	10624dd3 	.word	0x10624dd3
 800725c:	aaaaaaab 	.word	0xaaaaaaab

08007260 <HALL_Clear>:
* @param  pHandle: handler of the current instance of the hall_speed_pos_fdbk component*
* @retval none
*/
__weak void HALL_Clear( HALL_Handle_t * pHandle )
{
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8007260:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  CLEAR_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8007262:	68d1      	ldr	r1, [r2, #12]
 8007264:	f021 0102 	bic.w	r1, r1, #2

  /* Mask interrupts to insure a clean intialization */
  LL_TIM_DisableIT_CC1 ( TIMx );

  pHandle->RatioDec = false;
 8007268:	2300      	movs	r3, #0
{
 800726a:	b430      	push	{r4, r5}

  /* Clear speed error counter */
  pHandle->_Super.bSpeedErrorNumber = 0;
  
  /* Re-initialize partly the timer */
  LL_TIM_SetPrescaler ( TIMx, pHandle->HALLMaxRatio );
 800726c:	f8b0 40ae 	ldrh.w	r4, [r0, #174]	; 0xae
 8007270:	60d1      	str	r1, [r2, #12]
  pHandle->SensorIsReliable = true;
 8007272:	2101      	movs	r1, #1
  pHandle->RatioDec = false;
 8007274:	f880 304a 	strb.w	r3, [r0, #74]	; 0x4a
  pHandle->Direction = POSITIVE;
 8007278:	f880 10a2 	strb.w	r1, [r0, #162]	; 0xa2
  pHandle->RatioInc = false;
 800727c:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
  pHandle->SpeedFIFOIdx = 0u;
 8007280:	f880 3098 	strb.w	r3, [r0, #152]	; 0x98
  pHandle->FirstCapt = 0u;
 8007284:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
  pHandle->_Super.bSpeedErrorNumber = 0;
 8007288:	7003      	strb	r3, [r0, #0]
  pHandle->BufferFilled = 0u;
 800728a:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
  pHandle->_Super.hMecAccelUnitP = 0;
 800728e:	8243      	strh	r3, [r0, #18]
  pHandle->OVFCounter = 0u;
 8007290:	f880 304e 	strb.w	r3, [r0, #78]	; 0x4e
  pHandle->CompSpeed = 0;
 8007294:	f8a0 30ac 	strh.w	r3, [r0, #172]	; 0xac
  pHandle->SensorIsReliable = true;
 8007298:	f880 1049 	strb.w	r1, [r0, #73]	; 0x49
  WRITE_REG(TIMx->PSC, Prescaler);
 800729c:	6294      	str	r4, [r2, #40]	; 0x28
  WRITE_REG(TIMx->CNT, Counter);
 800729e:	6253      	str	r3, [r2, #36]	; 0x24
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80072a0:	6813      	ldr	r3, [r2, #0]
 80072a2:	430b      	orrs	r3, r1
 80072a4:	6013      	str	r3, [r2, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 80072a6:	68d3      	ldr	r3, [r2, #12]
 80072a8:	f043 0302 	orr.w	r3, r3, #2
 80072ac:	60d3      	str	r3, [r2, #12]
* @retval none
*/
static void HALL_Init_Electrical_Angle( HALL_Handle_t * pHandle )
{

  if ( pHandle->SensorPlacement == DEGREES_120 )
 80072ae:	f890 3020 	ldrb.w	r3, [r0, #32]
 80072b2:	bb0b      	cbnz	r3, 80072f8 <HALL_Clear+0x98>
  {
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 80072b4:	6c02      	ldr	r2, [r0, #64]	; 0x40
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 80072b6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80072b8:	6911      	ldr	r1, [r2, #16]
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 80072ba:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80072bc:	691d      	ldr	r5, [r3, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 80072be:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80072c0:	438a      	bics	r2, r1
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 80072c2:	e9d0 120c 	ldrd	r1, r2, [r0, #48]	; 0x30
 80072c6:	bf0c      	ite	eq
 80072c8:	2401      	moveq	r4, #1
 80072ca:	2400      	movne	r4, #0
 80072cc:	43ab      	bics	r3, r5
 80072ce:	bf0c      	ite	eq
 80072d0:	2301      	moveq	r3, #1
 80072d2:	2300      	movne	r3, #0
 80072d4:	6909      	ldr	r1, [r1, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 80072d6:	005b      	lsls	r3, r3, #1
 80072d8:	ea43 0384 	orr.w	r3, r3, r4, lsl #2
 80072dc:	438a      	bics	r2, r1
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 80072de:	bf08      	it	eq
 80072e0:	f043 0301 	orreq.w	r3, r3, #1
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
                          | LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
  }

  switch ( pHandle->HallState )
 80072e4:	1e5a      	subs	r2, r3, #1
 80072e6:	f880 30a6 	strb.w	r3, [r0, #166]	; 0xa6
 80072ea:	2a05      	cmp	r2, #5
 80072ec:	d85c      	bhi.n	80073a8 <HALL_Clear+0x148>
 80072ee:	e8df f002 	tbb	[pc, r2]
 80072f2:	3329      	.short	0x3329
 80072f4:	1f51473d 	.word	0x1f51473d
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 80072f8:	6b82      	ldr	r2, [r0, #56]	; 0x38
                          | LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1
 80072fa:	6c01      	ldr	r1, [r0, #64]	; 0x40
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 80072fc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80072fe:	6914      	ldr	r4, [r2, #16]
 8007300:	6909      	ldr	r1, [r1, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1
 8007302:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007304:	691d      	ldr	r5, [r3, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8007306:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007308:	438a      	bics	r2, r1
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 800730a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800730c:	bf0c      	ite	eq
 800730e:	2101      	moveq	r1, #1
 8007310:	2100      	movne	r1, #0
 8007312:	43ab      	bics	r3, r5
 8007314:	bf0c      	ite	eq
 8007316:	2301      	moveq	r3, #1
 8007318:	2300      	movne	r3, #0
 800731a:	43a2      	bics	r2, r4
 800731c:	bf0c      	ite	eq
 800731e:	2201      	moveq	r2, #1
 8007320:	2200      	movne	r2, #0
 8007322:	0092      	lsls	r2, r2, #2
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8007324:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 8007328:	f082 0204 	eor.w	r2, r2, #4
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 800732c:	4313      	orrs	r3, r2
 800732e:	e7d9      	b.n	80072e4 <HALL_Clear+0x84>
    case STATE_2:
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT -
                                              S16_60_PHASE_SHIFT / 2 );
      break;
    case STATE_6:
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT -
 8007330:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8007332:	f5a3 537f 	sub.w	r3, r3, #16320	; 0x3fc0
 8007336:	3b3f      	subs	r3, #63	; 0x3f
 8007338:	b21b      	sxth	r3, r3
 800733a:	8083      	strh	r3, [r0, #4]
}
 800733c:	bc30      	pop	{r4, r5}
      pHandle->SensorIsReliable = false;
      break;
  }

  /* Initialize the measured angle */
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 800733e:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 8007342:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT +
 8007344:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8007346:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 800734a:	333f      	adds	r3, #63	; 0x3f
 800734c:	b21b      	sxth	r3, r3
}
 800734e:	bc30      	pop	{r4, r5}
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT +
 8007350:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8007352:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 8007356:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT -
 8007358:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 800735a:	f5a3 43d5 	sub.w	r3, r3, #27264	; 0x6a80
 800735e:	3b2a      	subs	r3, #42	; 0x2a
 8007360:	b21b      	sxth	r3, r3
}
 8007362:	bc30      	pop	{r4, r5}
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT -
 8007364:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8007366:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 800736a:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 800736c:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 800736e:	f503 43d5 	add.w	r3, r3, #27264	; 0x6a80
 8007372:	332a      	adds	r3, #42	; 0x2a
 8007374:	b21b      	sxth	r3, r3
}
 8007376:	bc30      	pop	{r4, r5}
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 8007378:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 800737a:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 800737e:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT / 2 );
 8007380:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8007382:	f5a3 53aa 	sub.w	r3, r3, #5440	; 0x1540
 8007386:	3b15      	subs	r3, #21
 8007388:	b21b      	sxth	r3, r3
}
 800738a:	bc30      	pop	{r4, r5}
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT / 2 );
 800738c:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 800738e:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 8007392:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT / 2 );
 8007394:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8007396:	f503 53aa 	add.w	r3, r3, #5440	; 0x1540
 800739a:	3315      	adds	r3, #21
 800739c:	b21b      	sxth	r3, r3
}
 800739e:	bc30      	pop	{r4, r5}
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT / 2 );
 80073a0:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 80073a2:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 80073a6:	4770      	bx	lr
      pHandle->SensorIsReliable = false;
 80073a8:	2200      	movs	r2, #0
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 80073aa:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
      pHandle->SensorIsReliable = false;
 80073ae:	f880 2049 	strb.w	r2, [r0, #73]	; 0x49
      break;
 80073b2:	e7c3      	b.n	800733c <HALL_Clear+0xdc>

080073b4 <HALL_CalcElAngle>:
  if ( pHandle->_Super.hElSpeedDpp != HALL_MAX_PSEUDO_SPEED )
 80073b4:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
 80073b8:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80073bc:	429a      	cmp	r2, r3
    pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 80073be:	8883      	ldrh	r3, [r0, #4]
  if ( pHandle->_Super.hElSpeedDpp != HALL_MAX_PSEUDO_SPEED )
 80073c0:	d00f      	beq.n	80073e2 <HALL_CalcElAngle+0x2e>
    pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 80073c2:	f8b0 c0aa 	ldrh.w	ip, [r0, #170]	; 0xaa
    pHandle->PrevRotorFreq = pHandle->_Super.hElSpeedDpp;
 80073c6:	f8a0 20a0 	strh.w	r2, [r0, #160]	; 0xa0
    pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 80073ca:	b291      	uxth	r1, r2
    pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 80073cc:	440b      	add	r3, r1
    pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 80073ce:	4461      	add	r1, ip
    pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 80073d0:	f8b0 c0ac 	ldrh.w	ip, [r0, #172]	; 0xac
    pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 80073d4:	f8a0 10aa 	strh.w	r1, [r0, #170]	; 0xaa
    pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 80073d8:	4463      	add	r3, ip
 80073da:	b21b      	sxth	r3, r3
    pHandle->PrevRotorFreq = pHandle->_Super.hElSpeedDpp;
 80073dc:	8083      	strh	r3, [r0, #4]
}
 80073de:	4618      	mov	r0, r3
 80073e0:	4770      	bx	lr
    pHandle->_Super.hElAngle += pHandle->PrevRotorFreq;
 80073e2:	f8b0 20a0 	ldrh.w	r2, [r0, #160]	; 0xa0
 80073e6:	4413      	add	r3, r2
 80073e8:	b21b      	sxth	r3, r3
 80073ea:	8083      	strh	r3, [r0, #4]
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	4770      	bx	lr

080073f0 <HALL_CalcAvrgMecSpeedUnit>:
{
 80073f0:	b538      	push	{r3, r4, r5, lr}
 80073f2:	4604      	mov	r4, r0
  if ( pHandle->SensorIsReliable )
 80073f4:	f890 0049 	ldrb.w	r0, [r0, #73]	; 0x49
{
 80073f8:	460d      	mov	r5, r1
  if ( pHandle->SensorIsReliable )
 80073fa:	b180      	cbz	r0, 800741e <HALL_CalcAvrgMecSpeedUnit+0x2e>
  TIM_TypeDef * TIMx = pHandle->TIMx;
 80073fc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if ( LL_TIM_GetPrescaler ( TIMx ) >= pHandle->HALLMaxRatio )
 80073fe:	f8b4 20ae 	ldrh.w	r2, [r4, #174]	; 0xae
  return (uint32_t)(READ_REG(TIMx->PSC));
 8007402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007404:	429a      	cmp	r2, r3
 8007406:	d811      	bhi.n	800742c <HALL_CalcAvrgMecSpeedUnit+0x3c>
      pHandle->_Super.hElSpeedDpp = 0;
 8007408:	2300      	movs	r3, #0
 800740a:	81e3      	strh	r3, [r4, #14]
      *hMecSpeedUnit = 0;
 800740c:	800b      	strh	r3, [r1, #0]
    bReliability = SPD_IsMecSpeedReliable( &pHandle->_Super, hMecSpeedUnit );
 800740e:	4629      	mov	r1, r5
 8007410:	4620      	mov	r0, r4
 8007412:	f001 fb0b 	bl	8008a2c <SPD_IsMecSpeedReliable>
  pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8007416:	f9b5 3000 	ldrsh.w	r3, [r5]
 800741a:	81a3      	strh	r3, [r4, #12]
}
 800741c:	bd38      	pop	{r3, r4, r5, pc}
    pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 800741e:	78e3      	ldrb	r3, [r4, #3]
 8007420:	7023      	strb	r3, [r4, #0]
    *hMecSpeedUnit = 0;
 8007422:	4603      	mov	r3, r0
    pHandle->_Super.hElSpeedDpp = 0;
 8007424:	81e0      	strh	r0, [r4, #14]
    *hMecSpeedUnit = 0;
 8007426:	8008      	strh	r0, [r1, #0]
  pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8007428:	81a3      	strh	r3, [r4, #12]
}
 800742a:	bd38      	pop	{r3, r4, r5, pc}
      pHandle->_Super.hElSpeedDpp =  pHandle->AvrElSpeedDpp;
 800742c:	f9b4 30a4 	ldrsh.w	r3, [r4, #164]	; 0xa4
 8007430:	81e3      	strh	r3, [r4, #14]
      if (  pHandle->AvrElSpeedDpp == 0 )
 8007432:	b31b      	cbz	r3, 800747c <HALL_CalcAvrgMecSpeedUnit+0x8c>
        if (  pHandle->AvrElSpeedDpp != HALL_MAX_PSEUDO_SPEED )
 8007434:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007438:	4293      	cmp	r3, r2
 800743a:	d01d      	beq.n	8007478 <HALL_CalcAvrgMecSpeedUnit+0x88>
          if (pHandle->HallMtpa == true)
 800743c:	f894 20c7 	ldrb.w	r2, [r4, #199]	; 0xc7
 8007440:	b9f2      	cbnz	r2, 8007480 <HALL_CalcAvrgMecSpeedUnit+0x90>
            pHandle->DeltaAngle = pHandle->MeasuredElAngle - pHandle->_Super.hElAngle;
 8007442:	88a2      	ldrh	r2, [r4, #4]
 8007444:	f8b4 10aa 	ldrh.w	r1, [r4, #170]	; 0xaa
 8007448:	1a89      	subs	r1, r1, r2
 800744a:	b209      	sxth	r1, r1
              ( int32_t )( pHandle->PWMNbrPSamplingFreq ) );
 800744c:	f8b4 20c4 	ldrh.w	r2, [r4, #196]	; 0xc4
            pHandle->DeltaAngle = pHandle->MeasuredElAngle - pHandle->_Super.hElAngle;
 8007450:	f8a4 10a8 	strh.w	r1, [r4, #168]	; 0xa8
            pHandle->CompSpeed = ( int16_t )
 8007454:	fb91 f1f2 	sdiv	r1, r1, r2
                                        ( int32_t )pHandle->_Super.hMeasurementFrequency * (int32_t) SPEED_UNIT ) /
 8007458:	8b62      	ldrh	r2, [r4, #26]
 800745a:	f8a4 10ac 	strh.w	r1, [r4, #172]	; 0xac
          *hMecSpeedUnit = ( int16_t )( (  pHandle->AvrElSpeedDpp * 
 800745e:	fb02 f303 	mul.w	r3, r2, r3
                                        (( int32_t ) pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 8007462:	69e1      	ldr	r1, [r4, #28]
 8007464:	7862      	ldrb	r2, [r4, #1]
                                        ( int32_t )pHandle->_Super.hMeasurementFrequency * (int32_t) SPEED_UNIT ) /
 8007466:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800746a:	005b      	lsls	r3, r3, #1
                                        (( int32_t ) pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 800746c:	fb01 f202 	mul.w	r2, r1, r2
                                        ( int32_t )pHandle->_Super.hMeasurementFrequency * (int32_t) SPEED_UNIT ) /
 8007470:	fb93 f3f2 	sdiv	r3, r3, r2
          *hMecSpeedUnit = ( int16_t )( (  pHandle->AvrElSpeedDpp * 
 8007474:	802b      	strh	r3, [r5, #0]
 8007476:	e7ca      	b.n	800740e <HALL_CalcAvrgMecSpeedUnit+0x1e>
          *hMecSpeedUnit = ( int16_t )pHandle->SatSpeed;
 8007478:	f8b4 30b0 	ldrh.w	r3, [r4, #176]	; 0xb0
 800747c:	802b      	strh	r3, [r5, #0]
 800747e:	e7c6      	b.n	800740e <HALL_CalcAvrgMecSpeedUnit+0x1e>
            pHandle->CompSpeed = 0;
 8007480:	2100      	movs	r1, #0
 8007482:	e7e9      	b.n	8007458 <HALL_CalcAvrgMecSpeedUnit+0x68>

08007484 <HALL_TIMx_CC_IRQHandler>:
  if ( pHandle->SensorIsReliable )
 8007484:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
 8007488:	2b00      	cmp	r3, #0
 800748a:	d047      	beq.n	800751c <HALL_TIMx_CC_IRQHandler+0x98>
{
 800748c:	b570      	push	{r4, r5, r6, lr}
    if ( pHandle->SensorPlacement == DEGREES_120 )
 800748e:	f890 3020 	ldrb.w	r3, [r0, #32]
    bPrevHallState = pHandle->HallState;
 8007492:	f890 c0a6 	ldrb.w	ip, [r0, #166]	; 0xa6
    PrevDirection = pHandle->Direction;
 8007496:	f990 10a2 	ldrsb.w	r1, [r0, #162]	; 0xa2
    if ( pHandle->SensorPlacement == DEGREES_120 )
 800749a:	b333      	cbz	r3, 80074ea <HALL_TIMx_CC_IRQHandler+0x66>
      pHandle->HallState  = (uint8_t) ((( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2)
 800749c:	e9d0 340e 	ldrd	r3, r4, [r0, #56]	; 0x38
 80074a0:	691d      	ldr	r5, [r3, #16]
                            | (LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1)
 80074a2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80074a4:	691a      	ldr	r2, [r3, #16]
                            | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin ) );
 80074a6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80074a8:	691e      	ldr	r6, [r3, #16]
                            | (LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1)
 80074aa:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80074ac:	4393      	bics	r3, r2
                            | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin ) );
 80074ae:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80074b0:	bf0c      	ite	eq
 80074b2:	2201      	moveq	r2, #1
 80074b4:	2200      	movne	r2, #0
 80074b6:	43b3      	bics	r3, r6
 80074b8:	bf0c      	ite	eq
 80074ba:	2301      	moveq	r3, #1
 80074bc:	2300      	movne	r3, #0
 80074be:	43ac      	bics	r4, r5
      pHandle->HallState  = (uint8_t) ((( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2)
 80074c0:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 80074c4:	bf0c      	ite	eq
 80074c6:	2201      	moveq	r2, #1
 80074c8:	2200      	movne	r2, #0
 80074ca:	0092      	lsls	r2, r2, #2
 80074cc:	f082 0204 	eor.w	r2, r2, #4
 80074d0:	4313      	orrs	r3, r2
 80074d2:	f880 30a6 	strb.w	r3, [r0, #166]	; 0xa6
    switch ( pHandle->HallState )
 80074d6:	3b01      	subs	r3, #1
  TIM_TypeDef * TIMx = pHandle->TIMx;
 80074d8:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    switch ( pHandle->HallState )
 80074da:	2b05      	cmp	r3, #5
 80074dc:	f200 8174 	bhi.w	80077c8 <HALL_TIMx_CC_IRQHandler+0x344>
 80074e0:	e8df f003 	tbb	[pc, r3]
 80074e4:	4d5c6e80 	.word	0x4d5c6e80
 80074e8:	1e3b      	.short	0x1e3b
      pHandle->HallState  =(uint8_t) ((LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2)
 80074ea:	e9d0 2310 	ldrd	r2, r3, [r0, #64]	; 0x40
 80074ee:	6912      	ldr	r2, [r2, #16]
 80074f0:	4393      	bics	r3, r2
                            | (LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1)
 80074f2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80074f4:	691c      	ldr	r4, [r3, #16]
 80074f6:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80074f8:	bf0c      	ite	eq
 80074fa:	2201      	moveq	r2, #1
 80074fc:	2200      	movne	r2, #0
 80074fe:	43a3      	bics	r3, r4
 8007500:	bf0c      	ite	eq
 8007502:	2301      	moveq	r3, #1
 8007504:	2300      	movne	r3, #0
 8007506:	005b      	lsls	r3, r3, #1
 8007508:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
                            | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin ) );
 800750c:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800750e:	6914      	ldr	r4, [r2, #16]
 8007510:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8007512:	43a2      	bics	r2, r4
      pHandle->HallState  =(uint8_t) ((LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2)
 8007514:	bf08      	it	eq
 8007516:	f043 0301 	orreq.w	r3, r3, #1
 800751a:	e7da      	b.n	80074d2 <HALL_TIMx_CC_IRQHandler+0x4e>
}
 800751c:	2000      	movs	r0, #0
 800751e:	4770      	bx	lr
        if ( bPrevHallState == STATE_2 )
 8007520:	f1bc 0f02 	cmp.w	ip, #2
 8007524:	f000 808b 	beq.w	800763e <HALL_TIMx_CC_IRQHandler+0x1ba>
        else if ( bPrevHallState == STATE_4 )
 8007528:	f1bc 0f04 	cmp.w	ip, #4
 800752c:	f000 80ac 	beq.w	8007688 <HALL_TIMx_CC_IRQHandler+0x204>
    PrevDirection = pHandle->Direction;
 8007530:	460b      	mov	r3, r1
    if (pHandle->HallMtpa == true)
 8007532:	f890 20c7 	ldrb.w	r2, [r0, #199]	; 0xc7
 8007536:	b112      	cbz	r2, 800753e <HALL_TIMx_CC_IRQHandler+0xba>
      pHandle->_Super.hElAngle = pHandle->MeasuredElAngle;
 8007538:	f8b0 20aa 	ldrh.w	r2, [r0, #170]	; 0xaa
 800753c:	8082      	strh	r2, [r0, #4]
    if ( pHandle->FirstCapt == 0u )
 800753e:	f890 204c 	ldrb.w	r2, [r0, #76]	; 0x4c
 8007542:	2a00      	cmp	r2, #0
 8007544:	f040 80ac 	bne.w	80076a0 <HALL_TIMx_CC_IRQHandler+0x21c>
      pHandle->FirstCapt++;
 8007548:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 800754c:	3301      	adds	r3, #1
 800754e:	b2db      	uxtb	r3, r3
 8007550:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
  return (uint32_t)(READ_REG(TIMx->CCR1));
 8007554:	6b63      	ldr	r3, [r4, #52]	; 0x34
}
 8007556:	2000      	movs	r0, #0
 8007558:	bd70      	pop	{r4, r5, r6, pc}
        if ( bPrevHallState == STATE_4 )
 800755a:	f1bc 0f04 	cmp.w	ip, #4
 800755e:	d078      	beq.n	8007652 <HALL_TIMx_CC_IRQHandler+0x1ce>
        else if ( bPrevHallState == STATE_1 )
 8007560:	f1bc 0f01 	cmp.w	ip, #1
 8007564:	d1e4      	bne.n	8007530 <HALL_TIMx_CC_IRQHandler+0xac>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT );
 8007566:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8007568:	f503 532a 	add.w	r3, r3, #10880	; 0x2a80
 800756c:	332a      	adds	r3, #42	; 0x2a
          pHandle->Direction = NEGATIVE;
 800756e:	22ff      	movs	r2, #255	; 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT );
 8007570:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 8007574:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT );
 8007578:	f04f 33ff 	mov.w	r3, #4294967295
 800757c:	e04d      	b.n	800761a <HALL_TIMx_CC_IRQHandler+0x196>
        if ( bPrevHallState == STATE_6 )
 800757e:	f1bc 0f06 	cmp.w	ip, #6
 8007582:	d077      	beq.n	8007674 <HALL_TIMx_CC_IRQHandler+0x1f0>
        else if ( bPrevHallState == STATE_5 )
 8007584:	f1bc 0f05 	cmp.w	ip, #5
 8007588:	d1d2      	bne.n	8007530 <HALL_TIMx_CC_IRQHandler+0xac>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift );
 800758a:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 800758c:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 8007590:	22ff      	movs	r2, #255	; 0xff
 8007592:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift );
 8007596:	f04f 33ff 	mov.w	r3, #4294967295
 800759a:	e03e      	b.n	800761a <HALL_TIMx_CC_IRQHandler+0x196>
        if ( bPrevHallState == STATE_1 )
 800759c:	f1bc 0f01 	cmp.w	ip, #1
 80075a0:	d05e      	beq.n	8007660 <HALL_TIMx_CC_IRQHandler+0x1dc>
        else if ( bPrevHallState == STATE_2 )
 80075a2:	f1bc 0f02 	cmp.w	ip, #2
 80075a6:	d1c3      	bne.n	8007530 <HALL_TIMx_CC_IRQHandler+0xac>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 80075a8:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80075aa:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80075ae:	337f      	adds	r3, #127	; 0x7f
          pHandle->Direction = NEGATIVE;
 80075b0:	22ff      	movs	r2, #255	; 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 80075b2:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 80075b6:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 80075ba:	f04f 33ff 	mov.w	r3, #4294967295
 80075be:	e02c      	b.n	800761a <HALL_TIMx_CC_IRQHandler+0x196>
        if ( bPrevHallState == STATE_3 )
 80075c0:	f1bc 0f03 	cmp.w	ip, #3
 80075c4:	d031      	beq.n	800762a <HALL_TIMx_CC_IRQHandler+0x1a6>
        else if ( bPrevHallState == STATE_6 )
 80075c6:	f1bc 0f06 	cmp.w	ip, #6
 80075ca:	d1b1      	bne.n	8007530 <HALL_TIMx_CC_IRQHandler+0xac>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 80075cc:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80075ce:	f5a3 43aa 	sub.w	r3, r3, #21760	; 0x5500
 80075d2:	3b55      	subs	r3, #85	; 0x55
          pHandle->Direction = NEGATIVE;
 80075d4:	22ff      	movs	r2, #255	; 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 80075d6:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 80075da:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 80075de:	f04f 33ff 	mov.w	r3, #4294967295
 80075e2:	e01a      	b.n	800761a <HALL_TIMx_CC_IRQHandler+0x196>
        if ( bPrevHallState == STATE_5 )
 80075e4:	f1bc 0f05 	cmp.w	ip, #5
 80075e8:	d00e      	beq.n	8007608 <HALL_TIMx_CC_IRQHandler+0x184>
        else if ( bPrevHallState == STATE_3 )
 80075ea:	f1bc 0f03 	cmp.w	ip, #3
 80075ee:	d19f      	bne.n	8007530 <HALL_TIMx_CC_IRQHandler+0xac>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 80075f0:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80075f2:	f503 43aa 	add.w	r3, r3, #21760	; 0x5500
 80075f6:	3355      	adds	r3, #85	; 0x55
          pHandle->Direction = NEGATIVE;
 80075f8:	22ff      	movs	r2, #255	; 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 80075fa:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 80075fe:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 8007602:	f04f 33ff 	mov.w	r3, #4294967295
 8007606:	e008      	b.n	800761a <HALL_TIMx_CC_IRQHandler+0x196>
          pHandle->MeasuredElAngle = pHandle->PhaseShift + S16_60_PHASE_SHIFT;
 8007608:	8c42      	ldrh	r2, [r0, #34]	; 0x22
 800760a:	f502 522a 	add.w	r2, r2, #10880	; 0x2a80
          pHandle->Direction = POSITIVE;
 800760e:	2301      	movs	r3, #1
          pHandle->MeasuredElAngle = pHandle->PhaseShift + S16_60_PHASE_SHIFT;
 8007610:	322a      	adds	r2, #42	; 0x2a
          pHandle->Direction = POSITIVE;
 8007612:	f880 30a2 	strb.w	r3, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = pHandle->PhaseShift + S16_60_PHASE_SHIFT;
 8007616:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
    if (pHandle->Direction != PrevDirection)
 800761a:	4299      	cmp	r1, r3
 800761c:	d089      	beq.n	8007532 <HALL_TIMx_CC_IRQHandler+0xae>
      pHandle->BufferFilled = 0 ;
 800761e:	2200      	movs	r2, #0
 8007620:	f880 204d 	strb.w	r2, [r0, #77]	; 0x4d
      pHandle->SpeedFIFOIdx = 0;
 8007624:	f880 2098 	strb.w	r2, [r0, #152]	; 0x98
 8007628:	e783      	b.n	8007532 <HALL_TIMx_CC_IRQHandler+0xae>
                                                  + S16_60_PHASE_SHIFT );
 800762a:	8c42      	ldrh	r2, [r0, #34]	; 0x22
 800762c:	f502 42ff 	add.w	r2, r2, #32640	; 0x7f80
          pHandle->Direction = POSITIVE;
 8007630:	2301      	movs	r3, #1
                                                  + S16_60_PHASE_SHIFT );
 8007632:	327f      	adds	r2, #127	; 0x7f
          pHandle->Direction = POSITIVE;
 8007634:	f880 30a2 	strb.w	r3, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT
 8007638:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 800763c:	e7ed      	b.n	800761a <HALL_TIMx_CC_IRQHandler+0x196>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 800763e:	8c42      	ldrh	r2, [r0, #34]	; 0x22
 8007640:	f5a2 42aa 	sub.w	r2, r2, #21760	; 0x5500
          pHandle->Direction = POSITIVE;
 8007644:	2301      	movs	r3, #1
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 8007646:	3a55      	subs	r2, #85	; 0x55
          pHandle->Direction = POSITIVE;
 8007648:	f880 30a2 	strb.w	r3, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 800764c:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 8007650:	e7e3      	b.n	800761a <HALL_TIMx_CC_IRQHandler+0x196>
          pHandle->MeasuredElAngle = pHandle->PhaseShift;
 8007652:	8c42      	ldrh	r2, [r0, #34]	; 0x22
 8007654:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
          pHandle->Direction = POSITIVE;
 8007658:	2301      	movs	r3, #1
 800765a:	f880 30a2 	strb.w	r3, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = pHandle->PhaseShift;
 800765e:	e7dc      	b.n	800761a <HALL_TIMx_CC_IRQHandler+0x196>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 8007660:	8c43      	ldrh	r3, [r0, #34]	; 0x22
          pHandle->Direction = POSITIVE;
 8007662:	f880 c0a2 	strb.w	ip, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 8007666:	f503 43aa 	add.w	r3, r3, #21760	; 0x5500
 800766a:	3355      	adds	r3, #85	; 0x55
 800766c:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
 8007670:	4663      	mov	r3, ip
 8007672:	e7d2      	b.n	800761a <HALL_TIMx_CC_IRQHandler+0x196>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 8007674:	8c42      	ldrh	r2, [r0, #34]	; 0x22
 8007676:	f5a2 522a 	sub.w	r2, r2, #10880	; 0x2a80
          pHandle->Direction = POSITIVE;
 800767a:	2301      	movs	r3, #1
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 800767c:	3a2a      	subs	r2, #42	; 0x2a
          pHandle->Direction = POSITIVE;
 800767e:	f880 30a2 	strb.w	r3, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 8007682:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 8007686:	e7c8      	b.n	800761a <HALL_TIMx_CC_IRQHandler+0x196>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 8007688:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 800768a:	f5a3 532a 	sub.w	r3, r3, #10880	; 0x2a80
 800768e:	3b2a      	subs	r3, #42	; 0x2a
          pHandle->Direction = NEGATIVE;
 8007690:	22ff      	movs	r2, #255	; 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 8007692:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 8007696:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 800769a:	f04f 33ff 	mov.w	r3, #4294967295
 800769e:	e7bc      	b.n	800761a <HALL_TIMx_CC_IRQHandler+0x196>
      if ( pHandle->BufferFilled < pHandle->SpeedBufferSize )
 80076a0:	f890 204d 	ldrb.w	r2, [r0, #77]	; 0x4d
 80076a4:	f890 c026 	ldrb.w	ip, [r0, #38]	; 0x26
 80076a8:	4562      	cmp	r2, ip
 80076aa:	d205      	bcs.n	80076b8 <HALL_TIMx_CC_IRQHandler+0x234>
        pHandle->BufferFilled++;
 80076ac:	f890 204d 	ldrb.w	r2, [r0, #77]	; 0x4d
 80076b0:	3201      	adds	r2, #1
 80076b2:	b2d2      	uxtb	r2, r2
 80076b4:	f880 204d 	strb.w	r2, [r0, #77]	; 0x4d
 80076b8:	6b66      	ldr	r6, [r4, #52]	; 0x34
  return (uint32_t)(READ_REG(TIMx->PSC));
 80076ba:	6aa1      	ldr	r1, [r4, #40]	; 0x28
      wCaptBuf += ( uint32_t )pHandle->OVFCounter * 0x10000uL;
 80076bc:	f890 204e 	ldrb.w	r2, [r0, #78]	; 0x4e
      if ( pHandle->OVFCounter != 0u )
 80076c0:	f890 504e 	ldrb.w	r5, [r0, #78]	; 0x4e
      wCaptBuf += ( uint32_t )pHandle->OVFCounter * 0x10000uL;
 80076c4:	0412      	lsls	r2, r2, #16
      hPrscBuf =  LL_TIM_GetPrescaler ( TIMx );
 80076c6:	b289      	uxth	r1, r1
      wCaptBuf += ( uint32_t )pHandle->OVFCounter * 0x10000uL;
 80076c8:	fa12 f286 	uxtah	r2, r2, r6
      if ( pHandle->OVFCounter != 0u )
 80076cc:	f005 0eff 	and.w	lr, r5, #255	; 0xff
 80076d0:	2d00      	cmp	r5, #0
 80076d2:	d043      	beq.n	800775c <HALL_TIMx_CC_IRQHandler+0x2d8>
        hAux = hPrscBuf + 1u;
 80076d4:	3101      	adds	r1, #1
        wCaptBuf *= hAux;
 80076d6:	b289      	uxth	r1, r1
 80076d8:	fb01 f202 	mul.w	r2, r1, r2
        if ( pHandle->RatioInc )
 80076dc:	f890 104b 	ldrb.w	r1, [r0, #75]	; 0x4b
 80076e0:	2900      	cmp	r1, #0
 80076e2:	d045      	beq.n	8007770 <HALL_TIMx_CC_IRQHandler+0x2ec>
          pHandle->RatioInc = false;  /* Previous capture caused overflow */
 80076e4:	2100      	movs	r1, #0
 80076e6:	f880 104b 	strb.w	r1, [r0, #75]	; 0x4b
        if ( wCaptBuf < pHandle->MinPeriod )
 80076ea:	f8d0 10bc 	ldr.w	r1, [r0, #188]	; 0xbc
 80076ee:	4291      	cmp	r1, r2
 80076f0:	d82f      	bhi.n	8007752 <HALL_TIMx_CC_IRQHandler+0x2ce>
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 80076f2:	f890 1098 	ldrb.w	r1, [r0, #152]	; 0x98
          if ( wCaptBuf >= pHandle->MaxPeriod )
 80076f6:	f8d0 50b8 	ldr.w	r5, [r0, #184]	; 0xb8
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 80076fa:	f8d0 409c 	ldr.w	r4, [r0, #156]	; 0x9c
 80076fe:	eb00 0e81 	add.w	lr, r0, r1, lsl #2
          if ( wCaptBuf >= pHandle->MaxPeriod )
 8007702:	4295      	cmp	r5, r2
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 8007704:	f8de 6050 	ldr.w	r6, [lr, #80]	; 0x50
            pHandle->SensorPeriod[pHandle->SpeedFIFOIdx] *= pHandle->Direction;
 8007708:	bf88      	it	hi
 800770a:	fb03 f502 	mulhi.w	r5, r3, r2
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 800770e:	eba4 0406 	sub.w	r4, r4, r6
          pHandle->SpeedFIFOIdx++;
 8007712:	f101 0101 	add.w	r1, r1, #1
 8007716:	b2c9      	uxtb	r1, r1
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 8007718:	f8c0 409c 	str.w	r4, [r0, #156]	; 0x9c
            pHandle->ElPeriodSum += pHandle->SensorPeriod[pHandle->SpeedFIFOIdx];
 800771c:	bf8a      	itet	hi
 800771e:	1964      	addhi	r4, r4, r5
            pHandle->SensorPeriod[pHandle->SpeedFIFOIdx] = pHandle->MaxPeriod*pHandle->Direction; 
 8007720:	435d      	mulls	r5, r3
            pHandle->ElPeriodSum += pHandle->SensorPeriod[pHandle->SpeedFIFOIdx];
 8007722:	f8c0 409c 	strhi.w	r4, [r0, #156]	; 0x9c
          if ( pHandle->SpeedFIFOIdx == pHandle->SpeedBufferSize )
 8007726:	458c      	cmp	ip, r1
 8007728:	f8ce 5050 	str.w	r5, [lr, #80]	; 0x50
            pHandle->SpeedFIFOIdx = 0u;
 800772c:	bf08      	it	eq
 800772e:	2100      	moveq	r1, #0
 8007730:	f880 1098 	strb.w	r1, [r0, #152]	; 0x98
          if ( pHandle->SensorIsReliable) 
 8007734:	f890 1049 	ldrb.w	r1, [r0, #73]	; 0x49
 8007738:	b331      	cbz	r1, 8007788 <HALL_TIMx_CC_IRQHandler+0x304>
            if ( pHandle->BufferFilled < pHandle->SpeedBufferSize )
 800773a:	f890 104d 	ldrb.w	r1, [r0, #77]	; 0x4d
 800773e:	458c      	cmp	ip, r1
 8007740:	d937      	bls.n	80077b2 <HALL_TIMx_CC_IRQHandler+0x32e>
              pHandle->AvrElSpeedDpp = ( int16_t ) (( pHandle->PseudoFreqConv / wCaptBuf )*pHandle->Direction);
 8007742:	f8d0 10b4 	ldr.w	r1, [r0, #180]	; 0xb4
 8007746:	fbb1 f2f2 	udiv	r2, r1, r2
 800774a:	fb12 f303 	smulbb	r3, r2, r3
 800774e:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
      pHandle->OVFCounter = 0u;
 8007752:	2300      	movs	r3, #0
 8007754:	f880 304e 	strb.w	r3, [r0, #78]	; 0x4e
}
 8007758:	2000      	movs	r0, #0
 800775a:	bd70      	pop	{r4, r5, r6, pc}
        if ( pHandle->RatioDec ) /* and don't decrease it again */
 800775c:	f890 504a 	ldrb.w	r5, [r0, #74]	; 0x4a
 8007760:	b1ad      	cbz	r5, 800778e <HALL_TIMx_CC_IRQHandler+0x30a>
          hAux = hPrscBuf + 2u;
 8007762:	3102      	adds	r1, #2
          wCaptBuf *= hAux;
 8007764:	b289      	uxth	r1, r1
          pHandle->RatioDec = false;
 8007766:	f880 e04a 	strb.w	lr, [r0, #74]	; 0x4a
          wCaptBuf *= hAux;
 800776a:	fb01 f202 	mul.w	r2, r1, r2
          pHandle->RatioDec = false;
 800776e:	e7bc      	b.n	80076ea <HALL_TIMx_CC_IRQHandler+0x266>
 8007770:	6aa1      	ldr	r1, [r4, #40]	; 0x28
          if ( LL_TIM_GetPrescaler ( TIMx ) < pHandle->HALLMaxRatio ) /* Avoid OVF w/ very low freq */
 8007772:	f8b0 50ae 	ldrh.w	r5, [r0, #174]	; 0xae
 8007776:	428d      	cmp	r5, r1
 8007778:	d9b7      	bls.n	80076ea <HALL_TIMx_CC_IRQHandler+0x266>
 800777a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
            LL_TIM_SetPrescaler ( TIMx, LL_TIM_GetPrescaler ( TIMx ) + 1 ); /* To avoid OVF during speed decrease */
 800777c:	3101      	adds	r1, #1
  WRITE_REG(TIMx->PSC, Prescaler);
 800777e:	62a1      	str	r1, [r4, #40]	; 0x28
            pHandle->RatioInc = true;   /* new prsc value updated at next capture only */
 8007780:	2101      	movs	r1, #1
 8007782:	f880 104b 	strb.w	r1, [r0, #75]	; 0x4b
 8007786:	e7b0      	b.n	80076ea <HALL_TIMx_CC_IRQHandler+0x266>
            pHandle->AvrElSpeedDpp = 0;
 8007788:	f8a0 10a4 	strh.w	r1, [r0, #164]	; 0xa4
 800778c:	e7e1      	b.n	8007752 <HALL_TIMx_CC_IRQHandler+0x2ce>
          uint16_t hAux = hPrscBuf + 1u;
 800778e:	3101      	adds	r1, #1
          if ( hHighSpeedCapture < LOW_RES_THRESHOLD ) /* If capture range correct */
 8007790:	b2b6      	uxth	r6, r6
          wCaptBuf *= hAux;
 8007792:	b289      	uxth	r1, r1
          if ( hHighSpeedCapture < LOW_RES_THRESHOLD ) /* If capture range correct */
 8007794:	f5b6 4faa 	cmp.w	r6, #21760	; 0x5500
          wCaptBuf *= hAux;
 8007798:	fb01 f202 	mul.w	r2, r1, r2
          if ( hHighSpeedCapture < LOW_RES_THRESHOLD ) /* If capture range correct */
 800779c:	d2a5      	bcs.n	80076ea <HALL_TIMx_CC_IRQHandler+0x266>
  return (uint32_t)(READ_REG(TIMx->PSC));
 800779e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
            if ( LL_TIM_GetPrescaler ( TIMx ) > 0u ) /* or prescaler cannot be further reduced */
 80077a0:	2900      	cmp	r1, #0
 80077a2:	d0a2      	beq.n	80076ea <HALL_TIMx_CC_IRQHandler+0x266>
 80077a4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
              LL_TIM_SetPrescaler ( TIMx, LL_TIM_GetPrescaler ( TIMx ) - 1 ); /* Increase accuracy by decreasing prsc */
 80077a6:	3901      	subs	r1, #1
  WRITE_REG(TIMx->PSC, Prescaler);
 80077a8:	62a1      	str	r1, [r4, #40]	; 0x28
              pHandle->RatioDec = true;
 80077aa:	2101      	movs	r1, #1
 80077ac:	f880 104a 	strb.w	r1, [r0, #74]	; 0x4a
 80077b0:	e79b      	b.n	80076ea <HALL_TIMx_CC_IRQHandler+0x266>
              pHandle->AvrElSpeedDpp = ( int16_t )((int32_t) pHandle->PseudoFreqConv / ( pHandle->ElPeriodSum / pHandle->SpeedBufferSize )); /* Average value */
 80077b2:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
 80077b6:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
 80077ba:	fb92 fcfc 	sdiv	ip, r2, ip
 80077be:	fb93 f3fc 	sdiv	r3, r3, ip
 80077c2:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
 80077c6:	e7c4      	b.n	8007752 <HALL_TIMx_CC_IRQHandler+0x2ce>
        pHandle->SensorIsReliable = false;
 80077c8:	2300      	movs	r3, #0
 80077ca:	f880 3049 	strb.w	r3, [r0, #73]	; 0x49
        break;
 80077ce:	e6af      	b.n	8007530 <HALL_TIMx_CC_IRQHandler+0xac>

080077d0 <HALL_TIMx_UP_IRQHandler>:
  if ( pHandle->SensorIsReliable )
 80077d0:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
 80077d4:	b1e3      	cbz	r3, 8007810 <HALL_TIMx_UP_IRQHandler+0x40>
{
 80077d6:	b430      	push	{r4, r5}
    pHandle->OVFCounter++;
 80077d8:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
  TIM_TypeDef * TIMx = pHandle->TIMx;
 80077dc:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    pHandle->OVFCounter++;
 80077de:	3301      	adds	r3, #1
 80077e0:	b2db      	uxtb	r3, r3
 80077e2:	f880 304e 	strb.w	r3, [r0, #78]	; 0x4e
  return (uint32_t)(READ_REG(TIMx->PSC));
 80077e6:	6a94      	ldr	r4, [r2, #40]	; 0x28
    hMaxTimerOverflow = ( uint16_t )( ( ( uint32_t )pHandle->HallTimeout * pHandle->OvfFreq )
 80077e8:	f8b0 30c0 	ldrh.w	r3, [r0, #192]	; 0xc0
 80077ec:	f8b0 20c2 	ldrh.w	r2, [r0, #194]	; 0xc2
    if ( pHandle->OVFCounter >= hMaxTimerOverflow )
 80077f0:	f890 104e 	ldrb.w	r1, [r0, #78]	; 0x4e
    hMaxTimerOverflow = ( uint16_t )( ( ( uint32_t )pHandle->HallTimeout * pHandle->OvfFreq )
 80077f4:	fb02 f303 	mul.w	r3, r2, r3
                                      / ( ( LL_TIM_GetPrescaler ( TIMx ) + 1 ) * 1000u ) );
 80077f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80077fc:	fb04 2202 	mla	r2, r4, r2, r2
 8007800:	fbb3 f3f2 	udiv	r3, r3, r2
    if ( pHandle->OVFCounter >= hMaxTimerOverflow )
 8007804:	b29b      	uxth	r3, r3
 8007806:	4299      	cmp	r1, r3
 8007808:	d204      	bcs.n	8007814 <HALL_TIMx_UP_IRQHandler+0x44>
}
 800780a:	2000      	movs	r0, #0
 800780c:	bc30      	pop	{r4, r5}
 800780e:	4770      	bx	lr
 8007810:	2000      	movs	r0, #0
 8007812:	4770      	bx	lr
  if ( pHandle->SensorPlacement == DEGREES_120 )
 8007814:	f890 3020 	ldrb.w	r3, [r0, #32]
      pHandle->_Super.hElSpeedDpp = 0;
 8007818:	2200      	movs	r2, #0
 800781a:	81c2      	strh	r2, [r0, #14]
  if ( pHandle->SensorPlacement == DEGREES_120 )
 800781c:	bb0b      	cbnz	r3, 8007862 <HALL_TIMx_UP_IRQHandler+0x92>
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 800781e:	6c02      	ldr	r2, [r0, #64]	; 0x40
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 8007820:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007822:	6911      	ldr	r1, [r2, #16]
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 8007824:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007826:	691d      	ldr	r5, [r3, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 8007828:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800782a:	438a      	bics	r2, r1
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 800782c:	e9d0 120c 	ldrd	r1, r2, [r0, #48]	; 0x30
 8007830:	bf0c      	ite	eq
 8007832:	2401      	moveq	r4, #1
 8007834:	2400      	movne	r4, #0
 8007836:	43ab      	bics	r3, r5
 8007838:	bf0c      	ite	eq
 800783a:	2301      	moveq	r3, #1
 800783c:	2300      	movne	r3, #0
 800783e:	6909      	ldr	r1, [r1, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 8007840:	005b      	lsls	r3, r3, #1
 8007842:	ea43 0384 	orr.w	r3, r3, r4, lsl #2
 8007846:	438a      	bics	r2, r1
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8007848:	bf08      	it	eq
 800784a:	f043 0301 	orreq.w	r3, r3, #1
  switch ( pHandle->HallState )
 800784e:	1e5a      	subs	r2, r3, #1
 8007850:	f880 30a6 	strb.w	r3, [r0, #166]	; 0xa6
 8007854:	2a05      	cmp	r2, #5
 8007856:	d86f      	bhi.n	8007938 <HALL_TIMx_UP_IRQHandler+0x168>
 8007858:	e8df f002 	tbb	[pc, r2]
 800785c:	52596067 	.word	0x52596067
 8007860:	1f4b      	.short	0x1f4b
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 8007862:	6b82      	ldr	r2, [r0, #56]	; 0x38
                          | LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1
 8007864:	6c01      	ldr	r1, [r0, #64]	; 0x40
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8007866:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8007868:	6914      	ldr	r4, [r2, #16]
 800786a:	6909      	ldr	r1, [r1, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1
 800786c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800786e:	691d      	ldr	r5, [r3, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8007870:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007872:	438a      	bics	r2, r1
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 8007874:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007876:	bf0c      	ite	eq
 8007878:	2101      	moveq	r1, #1
 800787a:	2100      	movne	r1, #0
 800787c:	43ab      	bics	r3, r5
 800787e:	bf0c      	ite	eq
 8007880:	2301      	moveq	r3, #1
 8007882:	2300      	movne	r3, #0
 8007884:	43a2      	bics	r2, r4
 8007886:	bf0c      	ite	eq
 8007888:	2201      	moveq	r2, #1
 800788a:	2200      	movne	r2, #0
 800788c:	0092      	lsls	r2, r2, #2
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 800788e:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 8007892:	f082 0204 	eor.w	r2, r2, #4
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8007896:	4313      	orrs	r3, r2
 8007898:	e7d9      	b.n	800784e <HALL_TIMx_UP_IRQHandler+0x7e>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT -
 800789a:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 800789c:	f5a3 537f 	sub.w	r3, r3, #16320	; 0x3fc0
 80078a0:	3b3f      	subs	r3, #63	; 0x3f
 80078a2:	b21b      	sxth	r3, r3
 80078a4:	8083      	strh	r3, [r0, #4]
      for ( bIndex = 0u; bIndex < pHandle->SpeedBufferSize; bIndex++ )
 80078a6:	f890 4026 	ldrb.w	r4, [r0, #38]	; 0x26
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 80078aa:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
      pHandle->OVFCounter = 0u;
 80078ae:	2200      	movs	r2, #0
 80078b0:	f880 204e 	strb.w	r2, [r0, #78]	; 0x4e
      pHandle->FirstCapt = 0u;
 80078b4:	f880 204c 	strb.w	r2, [r0, #76]	; 0x4c
      for ( bIndex = 0u; bIndex < pHandle->SpeedBufferSize; bIndex++ )
 80078b8:	b17c      	cbz	r4, 80078da <HALL_TIMx_UP_IRQHandler+0x10a>
 80078ba:	1e62      	subs	r2, r4, #1
 80078bc:	b2d3      	uxtb	r3, r2
        pHandle->SensorPeriod[bIndex]  = pHandle->MaxPeriod;
 80078be:	f8d0 10b8 	ldr.w	r1, [r0, #184]	; 0xb8
 80078c2:	f100 0250 	add.w	r2, r0, #80	; 0x50
 80078c6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80078ca:	f100 034c 	add.w	r3, r0, #76	; 0x4c
 80078ce:	f843 1f04 	str.w	r1, [r3, #4]!
      for ( bIndex = 0u; bIndex < pHandle->SpeedBufferSize; bIndex++ )
 80078d2:	429a      	cmp	r2, r3
 80078d4:	d1fb      	bne.n	80078ce <HALL_TIMx_UP_IRQHandler+0xfe>
      pHandle->ElPeriodSum =pHandle->MaxPeriod * pHandle->SpeedBufferSize;
 80078d6:	fb01 f404 	mul.w	r4, r1, r4
      pHandle->BufferFilled = 0 ;
 80078da:	2300      	movs	r3, #0
 80078dc:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
      pHandle->SpeedFIFOIdx = 0;
 80078e0:	f880 3098 	strb.w	r3, [r0, #152]	; 0x98
      pHandle->ElPeriodSum =pHandle->MaxPeriod * pHandle->SpeedBufferSize;
 80078e4:	f8c0 409c 	str.w	r4, [r0, #156]	; 0x9c
      pHandle->AvrElSpeedDpp = 0;
 80078e8:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
}
 80078ec:	bc30      	pop	{r4, r5}
 80078ee:	2000      	movs	r0, #0
 80078f0:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT / 2 );
 80078f2:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80078f4:	f503 53aa 	add.w	r3, r3, #5440	; 0x1540
 80078f8:	3315      	adds	r3, #21
 80078fa:	b21b      	sxth	r3, r3
 80078fc:	8083      	strh	r3, [r0, #4]
      break;
 80078fe:	e7d2      	b.n	80078a6 <HALL_TIMx_UP_IRQHandler+0xd6>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT / 2 );
 8007900:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8007902:	f5a3 53aa 	sub.w	r3, r3, #5440	; 0x1540
 8007906:	3b15      	subs	r3, #21
 8007908:	b21b      	sxth	r3, r3
 800790a:	8083      	strh	r3, [r0, #4]
      break;
 800790c:	e7cb      	b.n	80078a6 <HALL_TIMx_UP_IRQHandler+0xd6>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 800790e:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8007910:	f503 43d5 	add.w	r3, r3, #27264	; 0x6a80
 8007914:	332a      	adds	r3, #42	; 0x2a
 8007916:	b21b      	sxth	r3, r3
 8007918:	8083      	strh	r3, [r0, #4]
      break;
 800791a:	e7c4      	b.n	80078a6 <HALL_TIMx_UP_IRQHandler+0xd6>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT -
 800791c:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 800791e:	f5a3 43d5 	sub.w	r3, r3, #27264	; 0x6a80
 8007922:	3b2a      	subs	r3, #42	; 0x2a
 8007924:	b21b      	sxth	r3, r3
 8007926:	8083      	strh	r3, [r0, #4]
      break;
 8007928:	e7bd      	b.n	80078a6 <HALL_TIMx_UP_IRQHandler+0xd6>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT +
 800792a:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 800792c:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8007930:	333f      	adds	r3, #63	; 0x3f
 8007932:	b21b      	sxth	r3, r3
 8007934:	8083      	strh	r3, [r0, #4]
      break;
 8007936:	e7b6      	b.n	80078a6 <HALL_TIMx_UP_IRQHandler+0xd6>
      pHandle->SensorIsReliable = false;
 8007938:	2200      	movs	r2, #0
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 800793a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
      pHandle->SensorIsReliable = false;
 800793e:	f880 2049 	strb.w	r2, [r0, #73]	; 0x49
      break;
 8007942:	e7b0      	b.n	80078a6 <HALL_TIMx_UP_IRQHandler+0xd6>

08007944 <MPM_Clear>:
  *         measurement buffer and initialize the index.
  * @param power handle.
  * @retval none.
  */
__weak void MPM_Clear( MotorPowMeas_Handle_t * pHandle )
{
 8007944:	b510      	push	{r4, lr}
  uint16_t i;
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
  {
    pHandle->hMeasBuffer[i] = 0;
 8007946:	f44f 7280 	mov.w	r2, #256	; 0x100
{
 800794a:	4604      	mov	r4, r0
    pHandle->hMeasBuffer[i] = 0;
 800794c:	2100      	movs	r1, #0
 800794e:	f001 fc85 	bl	800925c <memset>
  }
  pHandle->hNextMeasBufferIndex = 0u;
 8007952:	2300      	movs	r3, #0
 8007954:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = 0u;

}
 8007958:	bd10      	pop	{r4, pc}
 800795a:	bf00      	nop

0800795c <MPM_CalcElMotorPower>:
{
  uint16_t i;
  int32_t wAux = 0;

  /* Store the measured values in the buffer.*/
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 800795c:	f8b0 2100 	ldrh.w	r2, [r0, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
  pHandle->hNextMeasBufferIndex++;
 8007960:	1c53      	adds	r3, r2, #1
 8007962:	b29b      	uxth	r3, r3
  if ( pHandle->hNextMeasBufferIndex >= MPM_BUFFER_LENGHT )
 8007964:	2b7f      	cmp	r3, #127	; 0x7f
  {
    pHandle->hNextMeasBufferIndex = 0u;
 8007966:	bf88      	it	hi
 8007968:	2300      	movhi	r3, #0
{
 800796a:	b500      	push	{lr}
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 800796c:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
 8007970:	f100 0efe 	add.w	lr, r0, #254	; 0xfe
 8007974:	f8a0 2102 	strh.w	r2, [r0, #258]	; 0x102
    pHandle->hNextMeasBufferIndex = 0u;
 8007978:	f8a0 3100 	strh.w	r3, [r0, #256]	; 0x100
  int32_t wAux = 0;
 800797c:	2200      	movs	r2, #0
 800797e:	1e83      	subs	r3, r0, #2
  }
  /* Compute the average measured motor power */
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
  {
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 8007980:	f933 cf02 	ldrsh.w	ip, [r3, #2]!
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8007984:	4573      	cmp	r3, lr
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 8007986:	4462      	add	r2, ip
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8007988:	d1fa      	bne.n	8007980 <MPM_CalcElMotorPower+0x24>
  }
  wAux /= ( int32_t )MPM_BUFFER_LENGHT;
 800798a:	2a00      	cmp	r2, #0
 800798c:	bfb8      	it	lt
 800798e:	327f      	addlt	r2, #127	; 0x7f
 8007990:	11d2      	asrs	r2, r2, #7
  pHandle->hAvrgElMotorPowerW = ( int16_t )( wAux );
 8007992:	f8a0 2104 	strh.w	r2, [r0, #260]	; 0x104
  /* Return the last measured motor power */
  return CurrentMotorPower;
}
 8007996:	4608      	mov	r0, r1
 8007998:	f85d fb04 	ldr.w	pc, [sp], #4

0800799c <MPM_GetAvrgElMotorPowerW>:
  * @retval int16_t The average measured motor power expressed in watt.
  */
__weak int16_t MPM_GetAvrgElMotorPowerW( MotorPowMeas_Handle_t * pHandle )
{
  return ( pHandle->hAvrgElMotorPowerW );
}
 800799c:	f9b0 0104 	ldrsh.w	r0, [r0, #260]	; 0x104
 80079a0:	4770      	bx	lr
 80079a2:	bf00      	nop

080079a4 <NTC_SetFaultState>:
  */
__weak uint16_t NTC_SetFaultState( NTC_Handle_t * pHandle )
{
  uint16_t hFault;

  if ( pHandle->hAvTemp_d > pHandle->hOverTempThreshold )
 80079a4:	8a03      	ldrh	r3, [r0, #16]
 80079a6:	8b42      	ldrh	r2, [r0, #26]
 80079a8:	429a      	cmp	r2, r3
 80079aa:	d306      	bcc.n	80079ba <NTC_SetFaultState+0x16>
  {
    hFault = MC_OVER_TEMP;
  }
  else if ( pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold )
 80079ac:	8b82      	ldrh	r2, [r0, #28]
 80079ae:	429a      	cmp	r2, r3
 80079b0:	d901      	bls.n	80079b6 <NTC_SetFaultState+0x12>
  {
    hFault = MC_NO_ERROR;
 80079b2:	2000      	movs	r0, #0
  else
  {
    hFault = pHandle->hFaultState;
  }
  return hFault;
}
 80079b4:	4770      	bx	lr
    hFault = pHandle->hFaultState;
 80079b6:	8ac0      	ldrh	r0, [r0, #22]
 80079b8:	4770      	bx	lr
    hFault = MC_OVER_TEMP;
 80079ba:	2008      	movs	r0, #8
 80079bc:	4770      	bx	lr
 80079be:	bf00      	nop

080079c0 <NTC_Clear>:
 *
 *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
 */
__weak void NTC_Clear( NTC_Handle_t * pHandle )
{
  pHandle->hAvTemp_d = 0u;
 80079c0:	2300      	movs	r3, #0
 80079c2:	8203      	strh	r3, [r0, #16]
}
 80079c4:	4770      	bx	lr
 80079c6:	bf00      	nop

080079c8 <NTC_Init>:
{
 80079c8:	b510      	push	{r4, lr}
  if ( pHandle->bSensorType == REAL_SENSOR )
 80079ca:	7803      	ldrb	r3, [r0, #0]
{
 80079cc:	4604      	mov	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 80079ce:	b123      	cbz	r3, 80079da <NTC_Init+0x12>
    pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 80079d0:	8a43      	ldrh	r3, [r0, #18]
 80079d2:	8203      	strh	r3, [r0, #16]
    pHandle->hFaultState = MC_NO_ERROR;
 80079d4:	2200      	movs	r2, #0
 80079d6:	82c2      	strh	r2, [r0, #22]
}
 80079d8:	bd10      	pop	{r4, pc}
    pHandle->convHandle = RCM_RegisterRegConv(&pHandle->TempRegConv);
 80079da:	3004      	adds	r0, #4
 80079dc:	f7fa fbb6 	bl	800214c <RCM_RegisterRegConv>
 80079e0:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    NTC_Clear( pHandle );
 80079e4:	4620      	mov	r0, r4
 80079e6:	f7ff ffeb 	bl	80079c0 <NTC_Clear>
}
 80079ea:	bd10      	pop	{r4, pc}

080079ec <NTC_CalcAvTemp>:
  *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  *  @r Fault status : Error reported in case of an over temperature detection
  */
__weak uint16_t NTC_CalcAvTemp( NTC_Handle_t * pHandle )
{
 80079ec:	b510      	push	{r4, lr}
  uint32_t wtemp;
  uint16_t hAux;

  if ( pHandle->bSensorType == REAL_SENSOR )
 80079ee:	7803      	ldrb	r3, [r0, #0]
{
 80079f0:	4604      	mov	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 80079f2:	b113      	cbz	r3, 80079fa <NTC_CalcAvTemp+0xe>

    pHandle->hFaultState = NTC_SetFaultState( pHandle );
  }
  else  /* case VIRTUAL_SENSOR */
  {
    pHandle->hFaultState = MC_NO_ERROR;
 80079f4:	2000      	movs	r0, #0
 80079f6:	82e0      	strh	r0, [r4, #22]
  }

  return ( pHandle->hFaultState );
}
 80079f8:	bd10      	pop	{r4, pc}
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 80079fa:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 80079fe:	f7fa fc81 	bl	8002304 <RCM_ExecRegularConv>
    if ( hAux != 0xFFFFu )
 8007a02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007a06:	4298      	cmp	r0, r3
 8007a08:	d007      	beq.n	8007a1a <NTC_CalcAvTemp+0x2e>
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 8007a0a:	8b23      	ldrh	r3, [r4, #24]
      wtemp *= ( uint32_t ) ( pHandle->hAvTemp_d );
 8007a0c:	8a22      	ldrh	r2, [r4, #16]
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 8007a0e:	1e59      	subs	r1, r3, #1
      wtemp += hAux;
 8007a10:	fb01 0002 	mla	r0, r1, r2, r0
      wtemp /= ( uint32_t )( pHandle->hLowPassFilterBW );
 8007a14:	fbb0 f0f3 	udiv	r0, r0, r3
      pHandle->hAvTemp_d = ( uint16_t ) wtemp;
 8007a18:	8220      	strh	r0, [r4, #16]
    pHandle->hFaultState = NTC_SetFaultState( pHandle );
 8007a1a:	4620      	mov	r0, r4
 8007a1c:	f7ff ffc2 	bl	80079a4 <NTC_SetFaultState>
 8007a20:	82e0      	strh	r0, [r4, #22]
}
 8007a22:	bd10      	pop	{r4, pc}

08007a24 <NTC_GetAvTemp_C>:
  */
__weak int16_t NTC_GetAvTemp_C( NTC_Handle_t * pHandle )
{
  int32_t wTemp;

  if ( pHandle->bSensorType == REAL_SENSOR )
 8007a24:	7803      	ldrb	r3, [r0, #0]
 8007a26:	b983      	cbnz	r3, 8007a4a <NTC_GetAvTemp_C+0x26>
  {
    wTemp = ( int32_t )( pHandle->hAvTemp_d );
 8007a28:	8a02      	ldrh	r2, [r0, #16]
    wTemp -= ( int32_t )( pHandle->wV0 );
 8007a2a:	6a01      	ldr	r1, [r0, #32]
    wTemp *= pHandle->hSensitivity;
 8007a2c:	f9b0 301e 	ldrsh.w	r3, [r0, #30]
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 8007a30:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    wTemp -= ( int32_t )( pHandle->wV0 );
 8007a32:	1a52      	subs	r2, r2, r1
    wTemp *= pHandle->hSensitivity;
 8007a34:	fb02 f303 	mul.w	r3, r2, r3
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	bfbc      	itt	lt
 8007a3c:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
 8007a40:	33ff      	addlt	r3, #255	; 0xff
 8007a42:	eb00 4023 	add.w	r0, r0, r3, asr #16
  else
  {
    wTemp = pHandle->hExpectedTemp_C;
  }
  return ( ( int16_t )wTemp );
}
 8007a46:	b200      	sxth	r0, r0
 8007a48:	4770      	bx	lr
    wTemp = pHandle->hExpectedTemp_C;
 8007a4a:	8a80      	ldrh	r0, [r0, #20]
}
 8007a4c:	b200      	sxth	r0, r0
 8007a4e:	4770      	bx	lr

08007a50 <PID_HandleInit>:
__weak void PID_HandleInit( PID_Handle_t * pHandle )
{
  pHandle->hKpGain =  pHandle->hDefKpGain;
  pHandle->hKiGain =  pHandle->hDefKiGain;
  pHandle->hKdGain =  pHandle->hDefKdGain;
  pHandle->wIntegralTerm = 0x00000000UL;
 8007a50:	2300      	movs	r3, #0
  pHandle->hKpGain =  pHandle->hDefKpGain;
 8007a52:	6801      	ldr	r1, [r0, #0]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 8007a54:	8c02      	ldrh	r2, [r0, #32]
  pHandle->hKpGain =  pHandle->hDefKpGain;
 8007a56:	6041      	str	r1, [r0, #4]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 8007a58:	8442      	strh	r2, [r0, #34]	; 0x22
  pHandle->wIntegralTerm = 0x00000000UL;
 8007a5a:	6083      	str	r3, [r0, #8]
  pHandle->wPrevProcessVarError = 0x00000000UL;
 8007a5c:	6283      	str	r3, [r0, #40]	; 0x28
}
 8007a5e:	4770      	bx	lr

08007a60 <PID_SetKP>:
 * @param  hKpGain: new Kp gain
 * @retval None
 */
__weak void PID_SetKP( PID_Handle_t * pHandle, int16_t hKpGain )
{
  pHandle->hKpGain = hKpGain;
 8007a60:	8081      	strh	r1, [r0, #4]
}
 8007a62:	4770      	bx	lr

08007a64 <PID_SetKI>:
 * @param  hKiGain: new Ki gain
 * @retval None
 */
__weak void PID_SetKI( PID_Handle_t * pHandle, int16_t hKiGain )
{
  pHandle->hKiGain = hKiGain;
 8007a64:	80c1      	strh	r1, [r0, #6]
}
 8007a66:	4770      	bx	lr

08007a68 <PID_GetKP>:
 * @retval Kp gain
 */
__weak int16_t PID_GetKP( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpGain );
}
 8007a68:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8007a6c:	4770      	bx	lr
 8007a6e:	bf00      	nop

08007a70 <PID_GetKI>:
 * @retval Ki gain
 */
__weak int16_t PID_GetKI( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiGain );
}
 8007a70:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8007a74:	4770      	bx	lr
 8007a76:	bf00      	nop

08007a78 <PID_SetIntegralTerm>:
 * @param  wIntegralTermValue: new integral term value
 * @retval None
 */
__weak void PID_SetIntegralTerm( PID_Handle_t * pHandle, int32_t wIntegralTermValue )
{
  pHandle->wIntegralTerm = wIntegralTermValue;
 8007a78:	6081      	str	r1, [r0, #8]

  return;
}
 8007a7a:	4770      	bx	lr

08007a7c <PID_GetKPDivisor>:
 * @retval Kp gain divisor
 */
__weak uint16_t PID_GetKPDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpDivisor );
}
 8007a7c:	8b00      	ldrh	r0, [r0, #24]
 8007a7e:	4770      	bx	lr

08007a80 <PID_GetKIDivisor>:
 * @retval Ki gain divisor
 */
__weak uint16_t PID_GetKIDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiDivisor );
}
 8007a80:	8b40      	ldrh	r0, [r0, #26]
 8007a82:	4770      	bx	lr

08007a84 <PID_SetKD>:
 * @param  hKdGain: new Kd gain
 * @retval None
 */
__weak void PID_SetKD( PID_Handle_t * pHandle, int16_t hKdGain )
{
  pHandle->hKdGain = hKdGain;
 8007a84:	8441      	strh	r1, [r0, #34]	; 0x22
}
 8007a86:	4770      	bx	lr

08007a88 <PID_GetKD>:
 * @retval Kd gain
 */
__weak int16_t PID_GetKD( PID_Handle_t * pHandle )
{
  return pHandle->hKdGain;
}
 8007a88:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	; 0x22
 8007a8c:	4770      	bx	lr
 8007a8e:	bf00      	nop

08007a90 <PI_Controller>:
  int32_t wDischarge = 0;
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

  /* Proportional term computation*/
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8007a90:	f9b0 3004 	ldrsh.w	r3, [r0, #4]

  /* Integral term computation */
  if ( pHandle->hKiGain == 0 )
 8007a94:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 8007a98:	f9b0 c014 	ldrsh.w	ip, [r0, #20]
{
 8007a9c:	b510      	push	{r4, lr}
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8007a9e:	fb01 f303 	mul.w	r3, r1, r3
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 8007aa2:	f9b0 e016 	ldrsh.w	lr, [r0, #22]
  if ( pHandle->hKiGain == 0 )
 8007aa6:	b162      	cbz	r2, 8007ac2 <PI_Controller+0x32>
  {
    pHandle->wIntegralTerm = 0;
  }
  else
  {
    wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 8007aa8:	fb01 f202 	mul.w	r2, r1, r2
    wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;
 8007aac:	6881      	ldr	r1, [r0, #8]

    if ( wIntegral_sum_temp < 0 )
 8007aae:	188c      	adds	r4, r1, r2
 8007ab0:	d420      	bmi.n	8007af4 <PI_Controller+0x64>
        }
      }
    }
    else
    {
      if ( pHandle->wIntegralTerm < 0 )
 8007ab2:	2900      	cmp	r1, #0
 8007ab4:	db2a      	blt.n	8007b0c <PI_Controller+0x7c>
          wIntegral_sum_temp = -INT32_MAX;
        }
      }
    }

    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 8007ab6:	68c2      	ldr	r2, [r0, #12]
 8007ab8:	42a2      	cmp	r2, r4
 8007aba:	db02      	blt.n	8007ac2 <PI_Controller+0x32>
    {
      pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
    }
    else if ( wIntegral_sum_temp < pHandle->wLowerIntegralLimit )
 8007abc:	6902      	ldr	r2, [r0, #16]
 8007abe:	42a2      	cmp	r2, r4
 8007ac0:	dd22      	ble.n	8007b08 <PI_Controller+0x78>
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
             that Cortex-M3 assembly instruction ASR (arithmetic shift right)
             is used by the compiler to perform the shifts (instead of LSR
             logical shift right)*/
  wOutput_32 = ( wProportional_Term >> pHandle->hKpDivisorPOW2 ) + ( pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2 );
 8007ac2:	8b81      	ldrh	r1, [r0, #28]
 8007ac4:	410b      	asrs	r3, r1
 8007ac6:	8bc1      	ldrh	r1, [r0, #30]
 8007ac8:	fa42 f101 	asr.w	r1, r2, r1
 8007acc:	440b      	add	r3, r1
#endif

  if ( wOutput_32 > hUpperOutputLimit )
 8007ace:	459c      	cmp	ip, r3
 8007ad0:	da05      	bge.n	8007ade <PI_Controller+0x4e>
  {

    wDischarge = hUpperOutputLimit - wOutput_32;
 8007ad2:	ebac 0303 	sub.w	r3, ip, r3
    wDischarge = hLowerOutputLimit - wOutput_32;
    wOutput_32 = hLowerOutputLimit;
  }
  else { /* Nothing to do here */ }

  pHandle->wIntegralTerm += wDischarge;
 8007ad6:	441a      	add	r2, r3
 8007ad8:	6082      	str	r2, [r0, #8]

  return ( ( int16_t )( wOutput_32 ) );
}
 8007ada:	4660      	mov	r0, ip
 8007adc:	bd10      	pop	{r4, pc}
  else if ( wOutput_32 < hLowerOutputLimit )
 8007ade:	459e      	cmp	lr, r3
    wDischarge = hLowerOutputLimit - wOutput_32;
 8007ae0:	bfc9      	itett	gt
 8007ae2:	ebae 0303 	subgt.w	r3, lr, r3
  return ( ( int16_t )( wOutput_32 ) );
 8007ae6:	fa0f fc83 	sxthle.w	ip, r3
  pHandle->wIntegralTerm += wDischarge;
 8007aea:	18d2      	addgt	r2, r2, r3
 8007aec:	46f4      	movgt	ip, lr
 8007aee:	6082      	str	r2, [r0, #8]
}
 8007af0:	4660      	mov	r0, ip
 8007af2:	bd10      	pop	{r4, pc}
      if ( pHandle->wIntegralTerm > 0 )
 8007af4:	2900      	cmp	r1, #0
 8007af6:	ddde      	ble.n	8007ab6 <PI_Controller+0x26>
        if ( wIntegral_Term > 0 )
 8007af8:	2a00      	cmp	r2, #0
 8007afa:	dddc      	ble.n	8007ab6 <PI_Controller+0x26>
    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 8007afc:	68c2      	ldr	r2, [r0, #12]
 8007afe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007b02:	428a      	cmp	r2, r1
 8007b04:	d1dd      	bne.n	8007ac2 <PI_Controller+0x32>
          wIntegral_sum_temp = INT32_MAX;
 8007b06:	4614      	mov	r4, r2
 8007b08:	4622      	mov	r2, r4
 8007b0a:	e7da      	b.n	8007ac2 <PI_Controller+0x32>
          wIntegral_sum_temp = -INT32_MAX;
 8007b0c:	4902      	ldr	r1, [pc, #8]	; (8007b18 <PI_Controller+0x88>)
 8007b0e:	ea34 0422 	bics.w	r4, r4, r2, asr #32
 8007b12:	bf28      	it	cs
 8007b14:	460c      	movcs	r4, r1
 8007b16:	e7ce      	b.n	8007ab6 <PI_Controller+0x26>
 8007b18:	80000001 	.word	0x80000001

08007b1c <PQD_CalcElMotorPower>:
  */
__weak void PQD_CalcElMotorPower( PQD_MotorPowMeas_Handle_t * pHandle )
{

  int32_t wAux, wAux2, wAux3;
  qd_t Iqd = pHandle->pFOCVars->Iqd;
 8007b1c:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
{
 8007b20:	b570      	push	{r4, r5, r6, lr}
  qd_t Vqd = pHandle->pFOCVars->Vqd;
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 8007b22:	8b11      	ldrh	r1, [r2, #24]
 8007b24:	89d4      	ldrh	r4, [r2, #14]
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 8007b26:	8993      	ldrh	r3, [r2, #12]
 8007b28:	8ad2      	ldrh	r2, [r2, #22]
  wAux /= 65536;

  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8007b2a:	f8d0 6108 	ldr.w	r6, [r0, #264]	; 0x108
{
 8007b2e:	4605      	mov	r5, r0
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 8007b30:	fb14 f401 	smulbb	r4, r4, r1
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8007b34:	f8d0 0110 	ldr.w	r0, [r0, #272]	; 0x110
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 8007b38:	fb13 4402 	smlabb	r4, r3, r2, r4
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8007b3c:	f7ff faa2 	bl	8007084 <VBS_GetAvBusVoltage_V>
  wAux /= 65536;
 8007b40:	1e23      	subs	r3, r4, #0
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8007b42:	490f      	ldr	r1, [pc, #60]	; (8007b80 <PQD_CalcElMotorPower+0x64>)
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8007b44:	fb06 f000 	mul.w	r0, r6, r0
  wAux /= 65536;
 8007b48:	bfb8      	it	lt
 8007b4a:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8007b4e:	ea4f 72e0 	mov.w	r2, r0, asr #31
  wAux /= 65536;
 8007b52:	bfb8      	it	lt
 8007b54:	33ff      	addlt	r3, #255	; 0xff
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8007b56:	fb81 1000 	smull	r1, r0, r1, r0
 8007b5a:	ebc2 10a0 	rsb	r0, r2, r0, asr #6
  wAux /= 65536;
 8007b5e:	141b      	asrs	r3, r3, #16

  wAux3 = wAux * wAux2;
 8007b60:	fb00 f303 	mul.w	r3, r0, r3
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
  wAux3 /= 10;
  wAux3 /= 65536;
 8007b64:	4907      	ldr	r1, [pc, #28]	; (8007b84 <PQD_CalcElMotorPower+0x68>)
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
 8007b66:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8007b6a:	005b      	lsls	r3, r3, #1
  wAux3 /= 65536;
 8007b6c:	fb81 2103 	smull	r2, r1, r1, r3
 8007b70:	17db      	asrs	r3, r3, #31

  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 8007b72:	4628      	mov	r0, r5
 8007b74:	ebc3 41a1 	rsb	r1, r3, r1, asr #18

}
 8007b78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 8007b7c:	f7ff beee 	b.w	800795c <MPM_CalcElMotorPower>
 8007b80:	1b4e81b5 	.word	0x1b4e81b5
 8007b84:	66666667 	.word	0x66666667

08007b88 <startTimers>:
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
*/
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return (READ_BIT(RCC->APB1ENR, Periphs) == Periphs);
 8007b88:	4b17      	ldr	r3, [pc, #92]	; (8007be8 <startTimers+0x60>)
 8007b8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
  uint32_t isTIM2ClockOn;
  uint32_t trigOut;

  isTIM2ClockOn = LL_APB1_GRP1_IsEnabledClock ( LL_APB1_GRP1_PERIPH_TIM2 );
  if ( isTIM2ClockOn == 0 )
 8007b8c:	07d2      	lsls	r2, r2, #31
 8007b8e:	d415      	bmi.n	8007bbc <startTimers+0x34>
  SET_BIT(RCC->APB1ENR, Periphs);
 8007b90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b92:	f042 0201 	orr.w	r2, r2, #1
 8007b96:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8007b98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8007b9a:	b082      	sub	sp, #8
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8007b9c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007ba0:	f002 0201 	and.w	r2, r2, #1
 8007ba4:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8007ba6:	9a01      	ldr	r2, [sp, #4]
 8007ba8:	694a      	ldr	r2, [r1, #20]
 8007baa:	f042 0201 	orr.w	r2, r2, #1
 8007bae:	614a      	str	r2, [r1, #20]
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 8007bb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007bb2:	f022 0201 	bic.w	r2, r2, #1
 8007bb6:	641a      	str	r2, [r3, #64]	; 0x40
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
    LL_TIM_SetTriggerOutput( TIM2, LL_TIM_TRGO_UPDATE );
    LL_TIM_GenerateEvent_UPDATE ( TIM2 );
    LL_TIM_SetTriggerOutput( TIM2, trigOut );
  }
}
 8007bb8:	b002      	add	sp, #8
 8007bba:	4770      	bx	lr
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
 8007bbc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007bc0:	685a      	ldr	r2, [r3, #4]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8007bc2:	6859      	ldr	r1, [r3, #4]
 8007bc4:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8007bc8:	f041 0120 	orr.w	r1, r1, #32
 8007bcc:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8007bce:	6959      	ldr	r1, [r3, #20]
 8007bd0:	f041 0101 	orr.w	r1, r1, #1
 8007bd4:	6159      	str	r1, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8007bd6:	6859      	ldr	r1, [r3, #4]
 8007bd8:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8007bdc:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8007be0:	430a      	orrs	r2, r1
 8007be2:	605a      	str	r2, [r3, #4]
 8007be4:	4770      	bx	lr
 8007be6:	bf00      	nop
 8007be8:	40023800 	.word	0x40023800

08007bec <waitForPolarizationEnd>:
 *         repCnt: repetition counter value
 *         cnt: polarization counter value
 * @retval none
 */
__weak void waitForPolarizationEnd( TIM_TypeDef*  TIMx, uint16_t  *SWerror, uint8_t repCnt, volatile uint8_t *cnt )
{
 8007bec:	b570      	push	{r4, r5, r6, lr}
  counter_mode = (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_CMS));
 8007bee:	6804      	ldr	r4, [r0, #0]
  if (counter_mode == 0U)
 8007bf0:	f014 0460 	ands.w	r4, r4, #96	; 0x60
 8007bf4:	d11c      	bne.n	8007c30 <waitForPolarizationEnd+0x44>
    counter_mode = (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 8007bf6:	6804      	ldr	r4, [r0, #0]
  {
    hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u));
  }
  else
  {
	hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u)>>1);
 8007bf8:	3201      	adds	r2, #1
 8007bfa:	0855      	lsrs	r5, r2, #1
 8007bfc:	016d      	lsls	r5, r5, #5
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8007bfe:	f06f 0602 	mvn.w	r6, #2
 8007c02:	6106      	str	r6, [r0, #16]
  }

  /* Wait for NB_CONVERSIONS to be executed */
  LL_TIM_ClearFlag_CC1(TIMx);
  hCalibrationPeriodCounter = 0u;
 8007c04:	2200      	movs	r2, #0
  while (*cnt < NB_CONVERSIONS)
 8007c06:	f893 c000 	ldrb.w	ip, [r3]
 8007c0a:	f1bc 0f0f 	cmp.w	ip, #15
  {
    if (LL_TIM_IsActiveFlag_CC1(TIMx))
    {
      LL_TIM_ClearFlag_CC1(TIMx);
      hCalibrationPeriodCounter++;
 8007c0e:	f102 0e01 	add.w	lr, r2, #1
  while (*cnt < NB_CONVERSIONS)
 8007c12:	d80c      	bhi.n	8007c2e <waitForPolarizationEnd+0x42>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8007c14:	6904      	ldr	r4, [r0, #16]
 8007c16:	07a4      	lsls	r4, r4, #30
 8007c18:	d5f5      	bpl.n	8007c06 <waitForPolarizationEnd+0x1a>
      hCalibrationPeriodCounter++;
 8007c1a:	fa1f f28e 	uxth.w	r2, lr
      if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 8007c1e:	4295      	cmp	r5, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8007c20:	6106      	str	r6, [r0, #16]
 8007c22:	d8f0      	bhi.n	8007c06 <waitForPolarizationEnd+0x1a>
      {
        if (*cnt < NB_CONVERSIONS)
 8007c24:	781c      	ldrb	r4, [r3, #0]
 8007c26:	2c0f      	cmp	r4, #15
 8007c28:	d8ed      	bhi.n	8007c06 <waitForPolarizationEnd+0x1a>
        {
          *SWerror = 1u;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	800b      	strh	r3, [r1, #0]
          break;
        }
      }
    }
  }
}
 8007c2e:	bd70      	pop	{r4, r5, r6, pc}
  if ( (LL_TIM_GetCounterMode(TIMx) & LL_TIM_COUNTERMODE_CENTER_UP_DOWN) == LL_TIM_COUNTERMODE_CENTER_UP_DOWN)
 8007c30:	2c60      	cmp	r4, #96	; 0x60
 8007c32:	d1e1      	bne.n	8007bf8 <waitForPolarizationEnd+0xc>
    hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u));
 8007c34:	3201      	adds	r2, #1
 8007c36:	0155      	lsls	r5, r2, #5
 8007c38:	e7e1      	b.n	8007bfe <waitForPolarizationEnd+0x12>
 8007c3a:	bf00      	nop

08007c3c <PWMC_GetPhaseCurrents>:
  * @param  pStator_Currents Pointer to the structure that will receive motor current
  *         of phase A and B in ElectricalValue format.
*/
__weak void PWMC_GetPhaseCurrents( PWMC_Handle_t * pHandle, ab_t * Iab )
{
  pHandle->pFctGetPhaseCurrents( pHandle, Iab );
 8007c3c:	6843      	ldr	r3, [r0, #4]
 8007c3e:	4718      	bx	r3

08007c40 <PWMC_SetPhaseVoltage>:
  *
  * @retval Returns #MC_NO_ERROR if no error occurred or #MC_FOC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage( PWMC_Handle_t * pHandle, alphabeta_t Valfa_beta )
{
 8007c40:	b510      	push	{r4, lr}
  int32_t wX, wY, wZ, wUAlpha, wUBeta, wTimePhA, wTimePhB, wTimePhC;

  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8007c42:	f8b0 4050 	ldrh.w	r4, [r0, #80]	; 0x50
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8007c46:	8e03      	ldrh	r3, [r0, #48]	; 0x30
{
 8007c48:	b082      	sub	sp, #8
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8007c4a:	ea4f 4c21 	mov.w	ip, r1, asr #16
{
 8007c4e:	9101      	str	r1, [sp, #4]
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8007c50:	fb04 fc0c 	mul.w	ip, r4, ip
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8007c54:	b209      	sxth	r1, r1
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8007c56:	ebcc 7ccc 	rsb	ip, ip, ip, lsl #31
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8007c5a:	fb03 f101 	mul.w	r1, r3, r1

  wX = wUBeta;
  wY = ( wUBeta + wUAlpha ) / 2;
 8007c5e:	eb01 034c 	add.w	r3, r1, ip, lsl #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 8007c62:	ebc1 014c 	rsb	r1, r1, ip, lsl #1
  wY = ( wUBeta + wUAlpha ) / 2;
 8007c66:	eb03 7ed3 	add.w	lr, r3, r3, lsr #31
  wZ = ( wUBeta - wUAlpha ) / 2;
 8007c6a:	eb01 72d1 	add.w	r2, r1, r1, lsr #31

  /* Sector calculation from wX, wY, wZ */
  if ( wY < 0 )
 8007c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8007c72:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
  wY = ( wUBeta + wUAlpha ) / 2;
 8007c76:	ea4f 0e6e 	mov.w	lr, lr, asr #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 8007c7a:	ea4f 0262 	mov.w	r2, r2, asr #1
  if ( wY < 0 )
 8007c7e:	db7d      	blt.n	8007d7c <PWMC_SetPhaseVoltage+0x13c>
        pHandle->highDuty = wTimePhA;
      }
  }
  else /* wY > 0 */
  {
    if ( wZ >= 0 )
 8007c80:	f1b1 3fff 	cmp.w	r1, #4294967295
 8007c84:	db51      	blt.n	8007d2a <PWMC_SetPhaseVoltage+0xea>
    {
      pHandle->Sector = SECTOR_2;
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8007c86:	ebbe 0e02 	subs.w	lr, lr, r2
 8007c8a:	bf44      	itt	mi
 8007c8c:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 8007c90:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8007c94:	2900      	cmp	r1, #0
 8007c96:	bfbc      	itt	lt
 8007c98:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
 8007c9c:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	bfb8      	it	lt
 8007ca4:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8007ca8:	ea4f 0294 	mov.w	r2, r4, lsr #2
 8007cac:	eb02 42ae 	add.w	r2, r2, lr, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8007cb0:	bfb8      	it	lt
 8007cb2:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
      pHandle->Sector = SECTOR_2;
 8007cb6:	f04f 0c01 	mov.w	ip, #1
      wTimePhB = wTimePhA + wZ / 131072;
 8007cba:	eb02 41a1 	add.w	r1, r2, r1, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8007cbe:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
      pHandle->Sector = SECTOR_2;
 8007cc2:	f880 c03a 	strb.w	ip, [r0, #58]	; 0x3a
      pHandle->lowDuty = wTimePhB;
 8007cc6:	8781      	strh	r1, [r0, #60]	; 0x3c
      pHandle->midDuty = wTimePhA;
 8007cc8:	87c2      	strh	r2, [r0, #62]	; 0x3e
      pHandle->highDuty = wTimePhC;
 8007cca:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
  
  if ( pHandle->DTTest == 1u )
 8007cce:	f8b0 404e 	ldrh.w	r4, [r0, #78]	; 0x4e
 8007cd2:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8007cd6:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8007cda:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007cde:	b292      	uxth	r2, r2
 8007ce0:	b289      	uxth	r1, r1
 8007ce2:	b29b      	uxth	r3, r3
 8007ce4:	2c01      	cmp	r4, #1
  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
 8007ce6:	8642      	strh	r2, [r0, #50]	; 0x32
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
 8007ce8:	8681      	strh	r1, [r0, #52]	; 0x34
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
 8007cea:	86c3      	strh	r3, [r0, #54]	; 0x36
  if ( pHandle->DTTest == 1u )
 8007cec:	d118      	bne.n	8007d20 <PWMC_SetPhaseVoltage+0xe0>
  {
    /* Dead time compensation */
    if ( pHandle->Ia > 0 )
 8007cee:	f9b0 4048 	ldrsh.w	r4, [r0, #72]	; 0x48
 8007cf2:	2c00      	cmp	r4, #0
    {
      pHandle->CntPhA += pHandle->DTCompCnt;
 8007cf4:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
 8007cf8:	bfcc      	ite	gt
 8007cfa:	1912      	addgt	r2, r2, r4
    }
    else
    {
      pHandle->CntPhA -= pHandle->DTCompCnt;
 8007cfc:	1b12      	suble	r2, r2, r4
 8007cfe:	b292      	uxth	r2, r2
 8007d00:	8642      	strh	r2, [r0, #50]	; 0x32
    }

    if ( pHandle->Ib > 0 )
 8007d02:	f9b0 204a 	ldrsh.w	r2, [r0, #74]	; 0x4a
 8007d06:	2a00      	cmp	r2, #0
    else
    {
      pHandle->CntPhB -= pHandle->DTCompCnt;
    }

    if ( pHandle->Ic > 0 )
 8007d08:	f9b0 204c 	ldrsh.w	r2, [r0, #76]	; 0x4c
      pHandle->CntPhB += pHandle->DTCompCnt;
 8007d0c:	bfcc      	ite	gt
 8007d0e:	1909      	addgt	r1, r1, r4
      pHandle->CntPhB -= pHandle->DTCompCnt;
 8007d10:	1b09      	suble	r1, r1, r4
    if ( pHandle->Ic > 0 )
 8007d12:	2a00      	cmp	r2, #0
      pHandle->CntPhB -= pHandle->DTCompCnt;
 8007d14:	b289      	uxth	r1, r1
    {
      pHandle->CntPhC += pHandle->DTCompCnt;
 8007d16:	bfcc      	ite	gt
 8007d18:	191b      	addgt	r3, r3, r4
    }
    else
    {
      pHandle->CntPhC -= pHandle->DTCompCnt;
 8007d1a:	1b1b      	suble	r3, r3, r4
 8007d1c:	8681      	strh	r1, [r0, #52]	; 0x34
 8007d1e:	86c3      	strh	r3, [r0, #54]	; 0x36
    }
  }

  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 8007d20:	6983      	ldr	r3, [r0, #24]
}
 8007d22:	b002      	add	sp, #8
 8007d24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 8007d28:	4718      	bx	r3
      if ( wX <= 0 )
 8007d2a:	f1bc 0f00 	cmp.w	ip, #0
 8007d2e:	dd4b      	ble.n	8007dc8 <PWMC_SetPhaseVoltage+0x188>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8007d30:	ebbc 0e02 	subs.w	lr, ip, r2
 8007d34:	bf44      	itt	mi
 8007d36:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 8007d3a:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
        wTimePhB = wTimePhA + wZ / 131072;
 8007d3e:	2900      	cmp	r1, #0
 8007d40:	bfb8      	it	lt
 8007d42:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_1;
 8007d46:	f04f 0300 	mov.w	r3, #0
        wTimePhB = wTimePhA + wZ / 131072;
 8007d4a:	bfb8      	it	lt
 8007d4c:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        pHandle->Sector = SECTOR_1;
 8007d50:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8007d54:	08a2      	lsrs	r2, r4, #2
        wTimePhC = wTimePhB - wX / 131072;
 8007d56:	f1bc 0300 	subs.w	r3, ip, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8007d5a:	eb02 42ae 	add.w	r2, r2, lr, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8007d5e:	bfb8      	it	lt
 8007d60:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 8007d64:	eb02 41a1 	add.w	r1, r2, r1, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8007d68:	bfb8      	it	lt
 8007d6a:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 8007d6e:	eba1 4363 	sub.w	r3, r1, r3, asr #17
        pHandle->lowDuty = wTimePhA;
 8007d72:	8782      	strh	r2, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 8007d74:	87c1      	strh	r1, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhC;
 8007d76:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 8007d7a:	e7a8      	b.n	8007cce <PWMC_SetPhaseVoltage+0x8e>
    if ( wZ < 0 )
 8007d7c:	f1b1 3fff 	cmp.w	r1, #4294967295
 8007d80:	db6f      	blt.n	8007e62 <PWMC_SetPhaseVoltage+0x222>
      if ( wX <= 0 )
 8007d82:	f1bc 0f00 	cmp.w	ip, #0
 8007d86:	dd46      	ble.n	8007e16 <PWMC_SetPhaseVoltage+0x1d6>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8007d88:	ebbe 0e0c 	subs.w	lr, lr, ip
 8007d8c:	bf48      	it	mi
 8007d8e:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_3;
 8007d92:	f04f 0202 	mov.w	r2, #2
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8007d96:	bf48      	it	mi
 8007d98:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
        wTimePhC = wTimePhA - wY / 131072;
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	bfb8      	it	lt
 8007da0:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_3;
 8007da4:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8007da8:	ea4f 0294 	mov.w	r2, r4, lsr #2
 8007dac:	eb02 42ae 	add.w	r2, r2, lr, asr #18
        wTimePhC = wTimePhA - wY / 131072;
 8007db0:	bfb8      	it	lt
 8007db2:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
 8007db6:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8007dba:	eb03 416c 	add.w	r1, r3, ip, asr #17
        pHandle->lowDuty = wTimePhB;
 8007dbe:	8781      	strh	r1, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhC;
 8007dc0:	87c3      	strh	r3, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhA;
 8007dc2:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8007dc6:	e782      	b.n	8007cce <PWMC_SetPhaseVoltage+0x8e>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8007dc8:	ebbe 0e0c 	subs.w	lr, lr, ip
 8007dcc:	bf44      	itt	mi
 8007dce:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 8007dd2:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
        wTimePhC = wTimePhA - wY / 131072;
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	bfb8      	it	lt
 8007dda:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_6;
 8007dde:	f04f 0205 	mov.w	r2, #5
        wTimePhC = wTimePhA - wY / 131072;
 8007de2:	bfb8      	it	lt
 8007de4:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
        pHandle->Sector = SECTOR_6;
 8007de8:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
        wTimePhB = wTimePhC + wX / 131072;
 8007dec:	f1bc 0100 	subs.w	r1, ip, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8007df0:	ea4f 0294 	mov.w	r2, r4, lsr #2
 8007df4:	eb02 42ae 	add.w	r2, r2, lr, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8007df8:	bfb8      	it	lt
 8007dfa:	f501 31ff 	addlt.w	r1, r1, #130560	; 0x1fe00
        wTimePhC = wTimePhA - wY / 131072;
 8007dfe:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8007e02:	bfb8      	it	lt
 8007e04:	f201 11ff 	addwlt	r1, r1, #511	; 0x1ff
 8007e08:	eb03 4161 	add.w	r1, r3, r1, asr #17
        pHandle->lowDuty = wTimePhA;
 8007e0c:	8782      	strh	r2, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhC;
 8007e0e:	87c3      	strh	r3, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhB;
 8007e10:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8007e14:	e75b      	b.n	8007cce <PWMC_SetPhaseVoltage+0x8e>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8007e16:	ebbc 0e02 	subs.w	lr, ip, r2
 8007e1a:	bf44      	itt	mi
 8007e1c:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 8007e20:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
        wTimePhB = wTimePhA + wZ / 131072;
 8007e24:	2900      	cmp	r1, #0
 8007e26:	bfb8      	it	lt
 8007e28:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_4;
 8007e2c:	f04f 0303 	mov.w	r3, #3
        wTimePhB = wTimePhA + wZ / 131072;
 8007e30:	bfb8      	it	lt
 8007e32:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        pHandle->Sector = SECTOR_4;
 8007e36:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8007e3a:	08a2      	lsrs	r2, r4, #2
        wTimePhC = wTimePhB - wX / 131072;
 8007e3c:	f1bc 0300 	subs.w	r3, ip, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8007e40:	eb02 42ae 	add.w	r2, r2, lr, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8007e44:	bfb8      	it	lt
 8007e46:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 8007e4a:	eb02 41a1 	add.w	r1, r2, r1, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8007e4e:	bfb8      	it	lt
 8007e50:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 8007e54:	eba1 4363 	sub.w	r3, r1, r3, asr #17
        pHandle->lowDuty = wTimePhC;
 8007e58:	8783      	strh	r3, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 8007e5a:	87c1      	strh	r1, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhA;
 8007e5c:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8007e60:	e735      	b.n	8007cce <PWMC_SetPhaseVoltage+0x8e>
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8007e62:	ebbe 0e02 	subs.w	lr, lr, r2
 8007e66:	bf44      	itt	mi
 8007e68:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 8007e6c:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8007e70:	2900      	cmp	r1, #0
 8007e72:	bfbc      	itt	lt
 8007e74:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
 8007e78:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	bfb8      	it	lt
 8007e80:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8007e84:	ea4f 0294 	mov.w	r2, r4, lsr #2
 8007e88:	eb02 42ae 	add.w	r2, r2, lr, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8007e8c:	bfb8      	it	lt
 8007e8e:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
      pHandle->Sector = SECTOR_5;
 8007e92:	f04f 0c04 	mov.w	ip, #4
      wTimePhB = wTimePhA + wZ / 131072;
 8007e96:	eb02 41a1 	add.w	r1, r2, r1, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8007e9a:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
      pHandle->Sector = SECTOR_5;
 8007e9e:	f880 c03a 	strb.w	ip, [r0, #58]	; 0x3a
      pHandle->lowDuty = wTimePhC;
 8007ea2:	8783      	strh	r3, [r0, #60]	; 0x3c
      pHandle->midDuty = wTimePhA;
 8007ea4:	87c2      	strh	r2, [r0, #62]	; 0x3e
      pHandle->highDuty = wTimePhB;
 8007ea6:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8007eaa:	e710      	b.n	8007cce <PWMC_SetPhaseVoltage+0x8e>

08007eac <PWMC_SwitchOffPWM>:
  * @brief  Switches PWM generation off, inactivating the outputs.
  * @param  pHandle Handle on the target instance of the PWMC component
  */
__weak void PWMC_SwitchOffPWM( PWMC_Handle_t * pHandle )
{
  pHandle->pFctSwitchOffPwm( pHandle );
 8007eac:	6883      	ldr	r3, [r0, #8]
 8007eae:	4718      	bx	r3

08007eb0 <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, false if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr( PWMC_Handle_t * pHandle, CRCAction_t action )
{
 8007eb0:	b510      	push	{r4, lr}
 8007eb2:	4604      	mov	r4, r0
 8007eb4:	b082      	sub	sp, #8
  bool retVal = false;
  if ( action == CRC_START )
 8007eb6:	b199      	cbz	r1, 8007ee0 <PWMC_CurrentReadingCalibr+0x30>
    {
      pHandle->pFctCurrReadingCalib( pHandle );
      retVal = true;
    }
  }
  else if ( action == CRC_EXEC )
 8007eb8:	2901      	cmp	r1, #1
 8007eba:	d002      	beq.n	8007ec2 <PWMC_CurrentReadingCalibr+0x12>
  bool retVal = false;
 8007ebc:	2000      	movs	r0, #0
  }
  else
  {
  }
  return retVal;
}
 8007ebe:	b002      	add	sp, #8
 8007ec0:	bd10      	pop	{r4, pc}
    if ( pHandle->OffCalibrWaitTimeCounter > 0u )
 8007ec2:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8007ec6:	b1cb      	cbz	r3, 8007efc <PWMC_CurrentReadingCalibr+0x4c>
      pHandle->OffCalibrWaitTimeCounter--;
 8007ec8:	3b01      	subs	r3, #1
 8007eca:	b29b      	uxth	r3, r3
 8007ecc:	9101      	str	r1, [sp, #4]
 8007ece:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
      if ( pHandle->OffCalibrWaitTimeCounter == 0u )
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d1f2      	bne.n	8007ebc <PWMC_CurrentReadingCalibr+0xc>
        pHandle->pFctCurrReadingCalib( pHandle );
 8007ed6:	6903      	ldr	r3, [r0, #16]
 8007ed8:	4798      	blx	r3
        retVal = true;
 8007eda:	9901      	ldr	r1, [sp, #4]
 8007edc:	4608      	mov	r0, r1
 8007ede:	e7ee      	b.n	8007ebe <PWMC_CurrentReadingCalibr+0xe>
    PWMC_SwitchOffPWM( pHandle );
 8007ee0:	f7ff ffe4 	bl	8007eac <PWMC_SwitchOffPWM>
    pHandle->OffCalibrWaitTimeCounter = pHandle->OffCalibrWaitTicks;
 8007ee4:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8007ee8:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    if ( pHandle->OffCalibrWaitTicks == 0u )
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d1e5      	bne.n	8007ebc <PWMC_CurrentReadingCalibr+0xc>
      pHandle->pFctCurrReadingCalib( pHandle );
 8007ef0:	4620      	mov	r0, r4
 8007ef2:	6923      	ldr	r3, [r4, #16]
 8007ef4:	4798      	blx	r3
      retVal = true;
 8007ef6:	2001      	movs	r0, #1
}
 8007ef8:	b002      	add	sp, #8
 8007efa:	bd10      	pop	{r4, pc}
      retVal = true;
 8007efc:	4608      	mov	r0, r1
}
 8007efe:	b002      	add	sp, #8
 8007f00:	bd10      	pop	{r4, pc}
 8007f02:	bf00      	nop

08007f04 <PWMC_CheckOverCurrent>:
/** @brief Returns #MC_BREAK_IN if an over current condition was detected on the power stage
 *         controlled by the PWMC component pointed by  @p pHandle, since the last call to this function;
 *         returns #MC_NO_FAULTS otherwise. */
__weak uint16_t PWMC_CheckOverCurrent( PWMC_Handle_t * pHandle )
{
  return pHandle->pFctIsOverCurrentOccurred( pHandle );
 8007f04:	69c3      	ldr	r3, [r0, #28]
 8007f06:	4718      	bx	r3

08007f08 <R3_1_GetPhaseCurrents>:
  * @retval Ia and Ib current in ab_t format
  */
__weak void R3_1_GetPhaseCurrents(PWMC_Handle_t *pHdl, ab_t* pStator_Currents)
{
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007f08:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 8007f0a:	b530      	push	{r4, r5, lr}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007f0c:	685c      	ldr	r4, [r3, #4]
  CLEAR_BIT(TIMx->CCER, Channels);
 8007f0e:	6a22      	ldr	r2, [r4, #32]
 8007f10:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007f14:	6222      	str	r2, [r4, #32]
  uint8_t bSector;

  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  bSector = ( uint8_t )( pHandle->_Super.Sector );
 8007f16:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a

  hReg1 =  *pHandle->pParams_str->ADCDataReg1[bSector]*2;
 8007f1a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  hReg2 =  *pHandle->pParams_str->ADCDataReg2[bSector]*2;
 8007f1e:	6d1c      	ldr	r4, [r3, #80]	; 0x50
  hReg1 =  *pHandle->pParams_str->ADCDataReg1[bSector]*2;
 8007f20:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8007f22:	682b      	ldr	r3, [r5, #0]
  hReg2 =  *pHandle->pParams_str->ADCDataReg2[bSector]*2;
 8007f24:	6824      	ldr	r4, [r4, #0]
  hReg1 =  *pHandle->pParams_str->ADCDataReg1[bSector]*2;
 8007f26:	005b      	lsls	r3, r3, #1
  hReg2 =  *pHandle->pParams_str->ADCDataReg2[bSector]*2;
 8007f28:	ea4f 0c44 	mov.w	ip, r4, lsl #1
  hReg1 =  *pHandle->pParams_str->ADCDataReg1[bSector]*2;
 8007f2c:	b29b      	uxth	r3, r3
  hReg2 =  *pHandle->pParams_str->ADCDataReg2[bSector]*2;
 8007f2e:	fa1f fc8c 	uxth.w	ip, ip

  switch ( bSector )
 8007f32:	2a05      	cmp	r2, #5
 8007f34:	f200 80a6 	bhi.w	8008084 <R3_1_GetPhaseCurrents+0x17c>
 8007f38:	e8df f002 	tbb	[pc, r2]
 8007f3c:	031c1c36 	.word	0x031c1c36
 8007f40:	3603      	.short	0x3603
    case SECTOR_4:
    case SECTOR_5:
    {
      /* Current on Phase C is not accessible     */
      /* Ia = PhaseAOffset - ADC converted value) */
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 8007f42:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8007f44:	1ad3      	subs	r3, r2, r3
      /* Saturation of Ia */
      if ( wAux < -INT16_MAX )
 8007f46:	4a53      	ldr	r2, [pc, #332]	; (8008094 <R3_1_GetPhaseCurrents+0x18c>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	db5a      	blt.n	8008002 <R3_1_GetPhaseCurrents+0xfa>
      {
        pStator_Currents->a = ( int16_t )wAux;
      }

      /* Ib = PhaseBOffset - ADC converted value) */
        wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg2 );
 8007f4c:	6e02      	ldr	r2, [r0, #96]	; 0x60

      /* Saturation of Ib */
      if ( wAux < -INT16_MAX )
 8007f4e:	4d51      	ldr	r5, [pc, #324]	; (8008094 <R3_1_GetPhaseCurrents+0x18c>)
      else  if ( wAux > INT16_MAX )
 8007f50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
        wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg2 );
 8007f54:	eba2 0c0c 	sub.w	ip, r2, ip
        pStator_Currents->a = INT16_MAX;
 8007f58:	bfa8      	it	ge
 8007f5a:	f647 73ff 	movwge	r3, #32767	; 0x7fff
      if ( wAux < -INT16_MAX )
 8007f5e:	45ac      	cmp	ip, r5
        pStator_Currents->a = ( int16_t )wAux;
 8007f60:	800b      	strh	r3, [r1, #0]
      if ( wAux < -INT16_MAX )
 8007f62:	da55      	bge.n	8008010 <R3_1_GetPhaseCurrents+0x108>
    default:
    {
    }
    break;
  }
  pHandle->_Super.Ia = pStator_Currents->a;
 8007f64:	f9b1 e000 	ldrsh.w	lr, [r1]
        pStator_Currents->b = -INT16_MAX;
 8007f68:	804d      	strh	r5, [r1, #2]
  pHandle->_Super.Ib = pStator_Currents->b;
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8007f6a:	fa1f f38e 	uxth.w	r3, lr
 8007f6e:	f248 0201 	movw	r2, #32769	; 0x8001
 8007f72:	e031      	b.n	8007fd8 <R3_1_GetPhaseCurrents+0xd0>
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 8007f74:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 8007f76:	1ae4      	subs	r4, r4, r3
      if ( wAux < -INT16_MAX )
 8007f78:	4b46      	ldr	r3, [pc, #280]	; (8008094 <R3_1_GetPhaseCurrents+0x18c>)
 8007f7a:	429c      	cmp	r4, r3
 8007f7c:	db3b      	blt.n	8007ff6 <R3_1_GetPhaseCurrents+0xee>
      else  if ( wAux > INT16_MAX )
 8007f7e:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8007f82:	db6f      	blt.n	8008064 <R3_1_GetPhaseCurrents+0x15c>
        pStator_Currents->a = INT16_MAX;
 8007f84:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007f88:	4613      	mov	r3, r2
 8007f8a:	800a      	strh	r2, [r1, #0]
 8007f8c:	4614      	mov	r4, r2
 8007f8e:	4696      	mov	lr, r2
      wAux = -wAux -  ( int32_t )pStator_Currents->a;
 8007f90:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8007f92:	ebac 0202 	sub.w	r2, ip, r2
 8007f96:	1b12      	subs	r2, r2, r4
      if ( wAux > INT16_MAX )
 8007f98:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8007f9c:	db4d      	blt.n	800803a <R3_1_GetPhaseCurrents+0x132>
        pStator_Currents->b = INT16_MAX;
 8007f9e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007fa2:	804a      	strh	r2, [r1, #2]
 8007fa4:	4615      	mov	r5, r2
 8007fa6:	e017      	b.n	8007fd8 <R3_1_GetPhaseCurrents+0xd0>
      wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg1 );
 8007fa8:	6e04      	ldr	r4, [r0, #96]	; 0x60
      if ( wAux < -INT16_MAX )
 8007faa:	4a3a      	ldr	r2, [pc, #232]	; (8008094 <R3_1_GetPhaseCurrents+0x18c>)
      wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg1 );
 8007fac:	1ae3      	subs	r3, r4, r3
      if ( wAux < -INT16_MAX )
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	db1b      	blt.n	8007fea <R3_1_GetPhaseCurrents+0xe2>
      else  if ( wAux > INT16_MAX )
 8007fb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fb6:	db47      	blt.n	8008048 <R3_1_GetPhaseCurrents+0x140>
        pStator_Currents->b = INT16_MAX;
 8007fb8:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8007fbc:	461a      	mov	r2, r3
 8007fbe:	804b      	strh	r3, [r1, #2]
 8007fc0:	461d      	mov	r5, r3
      wAux = -wAux - ( int32_t )pStator_Currents->b;
 8007fc2:	6e44      	ldr	r4, [r0, #100]	; 0x64
 8007fc4:	ebac 0404 	sub.w	r4, ip, r4
 8007fc8:	1ae3      	subs	r3, r4, r3
      if ( wAux > INT16_MAX )
 8007fca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fce:	db2c      	blt.n	800802a <R3_1_GetPhaseCurrents+0x122>
        pStator_Currents->a = INT16_MAX;
 8007fd0:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8007fd4:	800b      	strh	r3, [r1, #0]
 8007fd6:	469e      	mov	lr, r3
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8007fd8:	4413      	add	r3, r2
 8007fda:	425b      	negs	r3, r3
  pHandle->_Super.Ia = pStator_Currents->a;
 8007fdc:	f8a0 e048 	strh.w	lr, [r0, #72]	; 0x48
  pHandle->_Super.Ib = pStator_Currents->b;
 8007fe0:	f8a0 504a 	strh.w	r5, [r0, #74]	; 0x4a
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8007fe4:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
}
 8007fe8:	bd30      	pop	{r4, r5, pc}
        pStator_Currents->b = -INT16_MAX;
 8007fea:	4613      	mov	r3, r2
 8007fec:	804a      	strh	r2, [r1, #2]
 8007fee:	461d      	mov	r5, r3
 8007ff0:	f248 0201 	movw	r2, #32769	; 0x8001
 8007ff4:	e7e5      	b.n	8007fc2 <R3_1_GetPhaseCurrents+0xba>
        pStator_Currents->a = -INT16_MAX;
 8007ff6:	461c      	mov	r4, r3
 8007ff8:	800b      	strh	r3, [r1, #0]
 8007ffa:	46a6      	mov	lr, r4
 8007ffc:	f248 0301 	movw	r3, #32769	; 0x8001
 8008000:	e7c6      	b.n	8007f90 <R3_1_GetPhaseCurrents+0x88>
        pStator_Currents->a = -INT16_MAX;
 8008002:	800a      	strh	r2, [r1, #0]
        wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg2 );
 8008004:	6e02      	ldr	r2, [r0, #96]	; 0x60
      if ( wAux < -INT16_MAX )
 8008006:	4d23      	ldr	r5, [pc, #140]	; (8008094 <R3_1_GetPhaseCurrents+0x18c>)
        wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg2 );
 8008008:	eba2 0c0c 	sub.w	ip, r2, ip
      if ( wAux < -INT16_MAX )
 800800c:	45ac      	cmp	ip, r5
 800800e:	dba9      	blt.n	8007f64 <R3_1_GetPhaseCurrents+0x5c>
      else  if ( wAux > INT16_MAX )
 8008010:	f5bc 4f00 	cmp.w	ip, #32768	; 0x8000
 8008014:	db1c      	blt.n	8008050 <R3_1_GetPhaseCurrents+0x148>
        pStator_Currents->b = INT16_MAX;
 8008016:	f647 73ff 	movw	r3, #32767	; 0x7fff
  pHandle->_Super.Ia = pStator_Currents->a;
 800801a:	f9b1 e000 	ldrsh.w	lr, [r1]
        pStator_Currents->b = INT16_MAX;
 800801e:	804b      	strh	r3, [r1, #2]
 8008020:	461a      	mov	r2, r3
 8008022:	4615      	mov	r5, r2
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8008024:	fa1f f38e 	uxth.w	r3, lr
 8008028:	e7d6      	b.n	8007fd8 <R3_1_GetPhaseCurrents+0xd0>
      else  if ( wAux < -INT16_MAX )
 800802a:	4c1a      	ldr	r4, [pc, #104]	; (8008094 <R3_1_GetPhaseCurrents+0x18c>)
 800802c:	42a3      	cmp	r3, r4
 800802e:	da1f      	bge.n	8008070 <R3_1_GetPhaseCurrents+0x168>
        pStator_Currents->a = -INT16_MAX;
 8008030:	800c      	strh	r4, [r1, #0]
 8008032:	f248 0301 	movw	r3, #32769	; 0x8001
 8008036:	46a6      	mov	lr, r4
 8008038:	e7ce      	b.n	8007fd8 <R3_1_GetPhaseCurrents+0xd0>
      else  if ( wAux < -INT16_MAX )
 800803a:	4d16      	ldr	r5, [pc, #88]	; (8008094 <R3_1_GetPhaseCurrents+0x18c>)
 800803c:	42aa      	cmp	r2, r5
 800803e:	da1d      	bge.n	800807c <R3_1_GetPhaseCurrents+0x174>
        pStator_Currents->b = -INT16_MAX;
 8008040:	804d      	strh	r5, [r1, #2]
 8008042:	f248 0201 	movw	r2, #32769	; 0x8001
 8008046:	e7c7      	b.n	8007fd8 <R3_1_GetPhaseCurrents+0xd0>
        pStator_Currents->b = ( int16_t )wAux;
 8008048:	b21d      	sxth	r5, r3
 800804a:	804d      	strh	r5, [r1, #2]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 800804c:	b29a      	uxth	r2, r3
 800804e:	e7b8      	b.n	8007fc2 <R3_1_GetPhaseCurrents+0xba>
  pHandle->_Super.Ia = pStator_Currents->a;
 8008050:	f9b1 e000 	ldrsh.w	lr, [r1]
        pStator_Currents->b = ( int16_t )wAux;
 8008054:	fa0f f58c 	sxth.w	r5, ip
 8008058:	804d      	strh	r5, [r1, #2]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 800805a:	fa1f f38e 	uxth.w	r3, lr
 800805e:	fa1f f28c 	uxth.w	r2, ip
 8008062:	e7b9      	b.n	8007fd8 <R3_1_GetPhaseCurrents+0xd0>
        pStator_Currents->a = ( int16_t )wAux;
 8008064:	fa0f fe84 	sxth.w	lr, r4
 8008068:	f8a1 e000 	strh.w	lr, [r1]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 800806c:	b2a3      	uxth	r3, r4
 800806e:	e78f      	b.n	8007f90 <R3_1_GetPhaseCurrents+0x88>
        pStator_Currents->a = ( int16_t )wAux;
 8008070:	fa0f fe83 	sxth.w	lr, r3
 8008074:	f8a1 e000 	strh.w	lr, [r1]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8008078:	b29b      	uxth	r3, r3
 800807a:	e7ad      	b.n	8007fd8 <R3_1_GetPhaseCurrents+0xd0>
        pStator_Currents->b = ( int16_t )wAux;
 800807c:	b215      	sxth	r5, r2
 800807e:	804d      	strh	r5, [r1, #2]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8008080:	b292      	uxth	r2, r2
 8008082:	e7a9      	b.n	8007fd8 <R3_1_GetPhaseCurrents+0xd0>
  pHandle->_Super.Ia = pStator_Currents->a;
 8008084:	f9b1 e000 	ldrsh.w	lr, [r1]
  pHandle->_Super.Ib = pStator_Currents->b;
 8008088:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 800808c:	880b      	ldrh	r3, [r1, #0]
 800808e:	884a      	ldrh	r2, [r1, #2]
 8008090:	e7a2      	b.n	8007fd8 <R3_1_GetPhaseCurrents+0xd0>
 8008092:	bf00      	nop
 8008094:	ffff8001 	.word	0xffff8001

08008098 <R3_1_HFCurrentsCalibrationAB>:
 * @retval It always returns {0,0} in ab_t format
 */
void R3_1_HFCurrentsCalibrationAB(PWMC_Handle_t *pHdl,ab_t* pStator_Currents)
{  
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008098:	6f83      	ldr	r3, [r0, #120]	; 0x78
{  
 800809a:	b410      	push	{r4}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800809c:	685c      	ldr	r4, [r3, #4]
 800809e:	6a22      	ldr	r2, [r4, #32]
 80080a0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80080a4:	6222      	str	r2, [r4, #32]
  
  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 80080a6:	f890 2073 	ldrb.w	r2, [r0, #115]	; 0x73
 80080aa:	2a0f      	cmp	r2, #15
 80080ac:	d813      	bhi.n	80080d6 <R3_1_HFCurrentsCalibrationAB+0x3e>
  {
    pHandle->PhaseAOffset += *pHandle->pParams_str->ADCDataReg1[pHandle->CalibSector];
 80080ae:	f890 4072 	ldrb.w	r4, [r0, #114]	; 0x72
 80080b2:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80080b4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80080b8:	6b9c      	ldr	r4, [r3, #56]	; 0x38
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 80080ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    pHandle->PhaseAOffset += *pHandle->pParams_str->ADCDataReg1[pHandle->CalibSector];
 80080bc:	6824      	ldr	r4, [r4, #0]
 80080be:	4422      	add	r2, r4
 80080c0:	65c2      	str	r2, [r0, #92]	; 0x5c
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 80080c2:	681c      	ldr	r4, [r3, #0]
    pHandle->PolarizationCounter++;
 80080c4:	f890 3073 	ldrb.w	r3, [r0, #115]	; 0x73
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 80080c8:	6e02      	ldr	r2, [r0, #96]	; 0x60
    pHandle->PolarizationCounter++;
 80080ca:	3301      	adds	r3, #1
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 80080cc:	4422      	add	r2, r4
    pHandle->PolarizationCounter++;
 80080ce:	b2db      	uxtb	r3, r3
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 80080d0:	6602      	str	r2, [r0, #96]	; 0x60
    pHandle->PolarizationCounter++;
 80080d2:	f880 3073 	strb.w	r3, [r0, #115]	; 0x73
  }

  /* during offset calibration no current is flowing in the phases */
  pStator_Currents->a = 0;
 80080d6:	2300      	movs	r3, #0
  pStator_Currents->b = 0;
}
 80080d8:	f85d 4b04 	ldr.w	r4, [sp], #4
  pStator_Currents->a = 0;
 80080dc:	600b      	str	r3, [r1, #0]
}
 80080de:	4770      	bx	lr

080080e0 <R3_1_HFCurrentsCalibrationC>:
  *         the offset computation.
  * @param pHdl: handler of the current instance of the PWM component
  * @retval It always returns {0,0} in ab_t format
  */
__weak void R3_1_HFCurrentsCalibrationC(PWMC_Handle_t *pHdl, ab_t* pStator_Currents)
{
 80080e0:	b410      	push	{r4}
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80080e2:	6f84      	ldr	r4, [r0, #120]	; 0x78
 80080e4:	6862      	ldr	r2, [r4, #4]
 80080e6:	6a13      	ldr	r3, [r2, #32]
 80080e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80080ec:	6213      	str	r3, [r2, #32]

  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 80080ee:	f890 3073 	ldrb.w	r3, [r0, #115]	; 0x73
 80080f2:	2b0f      	cmp	r3, #15
 80080f4:	d80e      	bhi.n	8008114 <R3_1_HFCurrentsCalibrationC+0x34>
  {
    pHandle->PhaseCOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 80080f6:	f890 2072 	ldrb.w	r2, [r0, #114]	; 0x72
 80080fa:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80080fc:	3214      	adds	r2, #20
 80080fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008102:	6812      	ldr	r2, [r2, #0]
 8008104:	441a      	add	r2, r3
    pHandle->PolarizationCounter++;
 8008106:	f890 3073 	ldrb.w	r3, [r0, #115]	; 0x73
    pHandle->PhaseCOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 800810a:	6642      	str	r2, [r0, #100]	; 0x64
    pHandle->PolarizationCounter++;
 800810c:	3301      	adds	r3, #1
 800810e:	b2db      	uxtb	r3, r3
 8008110:	f880 3073 	strb.w	r3, [r0, #115]	; 0x73
  }

  /* during offset calibration no current is flowing in the phases */
  pStator_Currents->a = 0;
 8008114:	2300      	movs	r3, #0
  pStator_Currents->b = 0;
}
 8008116:	f85d 4b04 	ldr.w	r4, [sp], #4
  pStator_Currents->a = 0;
 800811a:	600b      	str	r3, [r1, #0]
}
 800811c:	4770      	bx	lr
 800811e:	bf00      	nop

08008120 <R3_1_TurnOnLowSides>:
  * @retval none
  */
__weak void R3_1_TurnOnLowSides(PWMC_Handle_t *pHdl)
{
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8008120:	6f81      	ldr	r1, [r0, #120]	; 0x78

  pHandle->_Super.TurnOnLowSidesAction = true;
 8008122:	f04f 0c01 	mov.w	ip, #1
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8008126:	684a      	ldr	r2, [r1, #4]
  pHandle->_Super.TurnOnLowSidesAction = true;
 8008128:	f880 c042 	strb.w	ip, [r0, #66]	; 0x42
  WRITE_REG(TIMx->CCR1, CompareValue);
 800812c:	2300      	movs	r3, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800812e:	f06f 0001 	mvn.w	r0, #1
 8008132:	6110      	str	r0, [r2, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008134:	6353      	str	r3, [r2, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8008136:	6393      	str	r3, [r2, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8008138:	63d3      	str	r3, [r2, #60]	; 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800813a:	6913      	ldr	r3, [r2, #16]
  LL_TIM_OC_SetCompareCH1( TIMx, 0 );
  LL_TIM_OC_SetCompareCH2( TIMx, 0 );
  LL_TIM_OC_SetCompareCH3( TIMx, 0 );

  /* Wait until next update */
  while (LL_TIM_IsActiveFlag_UPDATE(TIMx) == 0)
 800813c:	07db      	lsls	r3, r3, #31
 800813e:	d5fc      	bpl.n	800813a <R3_1_TurnOnLowSides+0x1a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008140:	f06f 0301 	mvn.w	r3, #1
 8008144:	6113      	str	r3, [r2, #16]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8008146:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8008148:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800814c:	6453      	str	r3, [r2, #68]	; 0x44
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs(TIMx);
  
  if ((pHandle->pParams_str->LowSideOutputs)== ES_GPIO)
 800814e:	f891 306e 	ldrb.w	r3, [r1, #110]	; 0x6e
 8008152:	2b02      	cmp	r3, #2
 8008154:	d000      	beq.n	8008158 <R3_1_TurnOnLowSides+0x38>
 8008156:	4770      	bx	lr
{
 8008158:	b410      	push	{r4}
  {
    /* Enable signals activation */
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 800815a:	e9d1 2002 	ldrd	r2, r0, [r1, #8]
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 800815e:	e9d1 3404 	ldrd	r3, r4, [r1, #16]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 8008162:	6194      	str	r4, [r2, #24]
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8008164:	e9d1 4206 	ldrd	r4, r2, [r1, #24]
 8008168:	6184      	str	r4, [r0, #24]
  }
  return; 
}
 800816a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800816e:	619a      	str	r2, [r3, #24]
 8008170:	4770      	bx	lr
 8008172:	bf00      	nop

08008174 <R3_1_SwitchOnPWM>:
  * @param pHdl handler of the current instance of the PWM component
  */
__weak void R3_1_SwitchOnPWM(PWMC_Handle_t *pHdl)
{  
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8008174:	6f81      	ldr	r1, [r0, #120]	; 0x78

  pHandle->_Super.TurnOnLowSidesAction = false;
  
  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
 8008176:	f8b0 2070 	ldrh.w	r2, [r0, #112]	; 0x70
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 800817a:	684b      	ldr	r3, [r1, #4]
  pHandle->_Super.TurnOnLowSidesAction = false;
 800817c:	f04f 0c00 	mov.w	ip, #0
{  
 8008180:	b430      	push	{r4, r5}
  pHandle->_Super.TurnOnLowSidesAction = false;
 8008182:	f880 c042 	strb.w	ip, [r0, #66]	; 0x42
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
 8008186:	0850      	lsrs	r0, r2, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008188:	6358      	str	r0, [r3, #52]	; 0x34
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
  LL_TIM_OC_SetCompareCH4(TIMx, (uint32_t)(pHandle->Half_PWMPeriod - 5u));
 800818a:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR2, CompareValue);
 800818c:	6398      	str	r0, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800818e:	63d8      	str	r0, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008190:	f06f 0001 	mvn.w	r0, #1
  WRITE_REG(TIMx->CCR4, CompareValue);
 8008194:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008196:	6118      	str	r0, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8008198:	691a      	ldr	r2, [r3, #16]

  /* wait for a new PWM period */
  LL_TIM_ClearFlag_UPDATE(TIMx);
  while (LL_TIM_IsActiveFlag_UPDATE(TIMx) == 0)
 800819a:	07d2      	lsls	r2, r2, #31
 800819c:	d5fc      	bpl.n	8008198 <R3_1_SwitchOnPWM+0x24>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800819e:	f06f 0201 	mvn.w	r2, #1
 80081a2:	611a      	str	r2, [r3, #16]
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE(TIMx);

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 80081a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081a6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80081aa:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80081ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80081b2:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80081b4:	f891 206e 	ldrb.w	r2, [r1, #110]	; 0x6e
 80081b8:	2a02      	cmp	r2, #2
 80081ba:	d008      	beq.n	80081ce <R3_1_SwitchOnPWM+0x5a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80081bc:	f06f 0201 	mvn.w	r2, #1
 80081c0:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80081c2:	68da      	ldr	r2, [r3, #12]
 80081c4:	f042 0201 	orr.w	r2, r2, #1
  LL_TIM_ClearFlag_UPDATE( TIMx );
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE( TIMx );

  return; 
}
 80081c8:	bc30      	pop	{r4, r5}
 80081ca:	60da      	str	r2, [r3, #12]
 80081cc:	4770      	bx	lr
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0u)
 80081ce:	6a18      	ldr	r0, [r3, #32]
 80081d0:	f240 5255 	movw	r2, #1365	; 0x555
 80081d4:	4210      	tst	r0, r2
 80081d6:	d009      	beq.n	80081ec <R3_1_SwitchOnPWM+0x78>
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 80081d8:	e9d1 4002 	ldrd	r4, r0, [r1, #8]
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 80081dc:	e9d1 2504 	ldrd	r2, r5, [r1, #16]
 80081e0:	61a5      	str	r5, [r4, #24]
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 80081e2:	e9d1 4106 	ldrd	r4, r1, [r1, #24]
 80081e6:	6184      	str	r4, [r0, #24]
 80081e8:	6191      	str	r1, [r2, #24]
}
 80081ea:	e7e7      	b.n	80081bc <R3_1_SwitchOnPWM+0x48>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80081ec:	e9d1 4005 	ldrd	r4, r0, [r1, #20]
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 80081f0:	688d      	ldr	r5, [r1, #8]
 80081f2:	69ca      	ldr	r2, [r1, #28]
 80081f4:	0424      	lsls	r4, r4, #16
 80081f6:	61ac      	str	r4, [r5, #24]
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 80081f8:	e9d1 5403 	ldrd	r5, r4, [r1, #12]
 80081fc:	0400      	lsls	r0, r0, #16
 80081fe:	0412      	lsls	r2, r2, #16
 8008200:	61a8      	str	r0, [r5, #24]
 8008202:	61a2      	str	r2, [r4, #24]
}
 8008204:	e7da      	b.n	80081bc <R3_1_SwitchOnPWM+0x48>
 8008206:	bf00      	nop

08008208 <R3_1_SwitchOffPWM>:
  * @param pHdl handler of the current instance of the PWM component
  */
__weak void R3_1_SwitchOffPWM(PWMC_Handle_t *pHdl)
{
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8008208:	6f81      	ldr	r1, [r0, #120]	; 0x78
 800820a:	684a      	ldr	r2, [r1, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 800820c:	68d3      	ldr	r3, [r2, #12]
 800820e:	f023 0301 	bic.w	r3, r3, #1
 8008212:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8008214:	6c53      	ldr	r3, [r2, #68]	; 0x44

  /* Disable UPDATE ISR */
  LL_TIM_DisableIT_UPDATE( TIMx );

  pHandle->_Super.TurnOnLowSidesAction = false;
 8008216:	f04f 0c00 	mov.w	ip, #0
 800821a:	f880 c042 	strb.w	ip, [r0, #66]	; 0x42

  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs(TIMx);
  if (pHandle->BrakeActionLock == true)
 800821e:	f890 0076 	ldrb.w	r0, [r0, #118]	; 0x76
 8008222:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008226:	6453      	str	r3, [r2, #68]	; 0x44
 8008228:	b918      	cbnz	r0, 8008232 <R3_1_SwitchOffPWM+0x2a>
  {
  }
  else
  {
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800822a:	f891 306e 	ldrb.w	r3, [r1, #110]	; 0x6e
 800822e:	2b02      	cmp	r3, #2
 8008230:	d009      	beq.n	8008246 <R3_1_SwitchOffPWM+0x3e>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008232:	f06f 0301 	mvn.w	r3, #1
 8008236:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8008238:	6913      	ldr	r3, [r2, #16]
    }
  }

  /* wait for a new PWM period to flush last HF task */
  LL_TIM_ClearFlag_UPDATE(TIMx);
  while (LL_TIM_IsActiveFlag_UPDATE(TIMx) == 0)
 800823a:	07db      	lsls	r3, r3, #31
 800823c:	d5fc      	bpl.n	8008238 <R3_1_SwitchOffPWM+0x30>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800823e:	f06f 0301 	mvn.w	r3, #1
 8008242:	6113      	str	r3, [r2, #16]
 8008244:	4770      	bx	lr
{
 8008246:	b430      	push	{r4, r5}
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8008248:	e9d1 4005 	ldrd	r4, r0, [r1, #20]
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 800824c:	688d      	ldr	r5, [r1, #8]
 800824e:	69cb      	ldr	r3, [r1, #28]
 8008250:	0424      	lsls	r4, r4, #16
 8008252:	61ac      	str	r4, [r5, #24]
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8008254:	e9d1 5403 	ldrd	r5, r4, [r1, #12]
 8008258:	041b      	lsls	r3, r3, #16
 800825a:	0400      	lsls	r0, r0, #16
 800825c:	61a8      	str	r0, [r5, #24]
 800825e:	61a3      	str	r3, [r4, #24]
 8008260:	f06f 0301 	mvn.w	r3, #1
 8008264:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8008266:	6913      	ldr	r3, [r2, #16]
  while (LL_TIM_IsActiveFlag_UPDATE(TIMx) == 0)
 8008268:	07d9      	lsls	r1, r3, #31
 800826a:	d5fc      	bpl.n	8008266 <R3_1_SwitchOffPWM+0x5e>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800826c:	f06f 0301 	mvn.w	r3, #1
  {}
  LL_TIM_ClearFlag_UPDATE(TIMx);

  return;
}
 8008270:	bc30      	pop	{r4, r5}
 8008272:	6113      	str	r3, [r2, #16]
 8008274:	4770      	bx	lr
 8008276:	bf00      	nop

08008278 <R3_1_RLGetPhaseCurrents>:
  *         during RL detection phase
  * @param pHdl: handler of the current instance of the PWM component
  * @retval Ia and Ib current in ab_t format
  */
void R3_1_RLGetPhaseCurrents(PWMC_Handle_t *pHdl,ab_t* pStator_Currents)
{
 8008278:	b410      	push	{r4}

  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800827a:	6f84      	ldr	r4, [r0, #120]	; 0x78
 800827c:	6862      	ldr	r2, [r4, #4]
  CLEAR_BIT(TIMx->CCER, Channels);
 800827e:	6a13      	ldr	r3, [r2, #32]
 8008280:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008284:	6213      	str	r3, [r2, #32]
  int32_t wAux;
  
  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
  
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t)*pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]*2;
 8008286:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
 800828a:	6e03      	ldr	r3, [r0, #96]	; 0x60
  
  /* Check saturation */
  if (wAux > -INT16_MAX)
 800828c:	480d      	ldr	r0, [pc, #52]	; (80082c4 <R3_1_RLGetPhaseCurrents+0x4c>)
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t)*pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]*2;
 800828e:	3214      	adds	r2, #20
 8008290:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008294:	6812      	ldr	r2, [r2, #0]
 8008296:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
  if (wAux > -INT16_MAX)
 800829a:	4283      	cmp	r3, r0
 800829c:	db05      	blt.n	80082aa <R3_1_RLGetPhaseCurrents+0x32>
  {
    if (wAux < INT16_MAX)
 800829e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80082a2:	4293      	cmp	r3, r2
 80082a4:	dc0b      	bgt.n	80082be <R3_1_RLGetPhaseCurrents+0x46>
  else
  {
    wAux = -INT16_MAX;
  }
  /* First value read of Phase B*/
  pStator_Currents->a = ( int16_t )( wAux );
 80082a6:	b21b      	sxth	r3, r3
 80082a8:	e000      	b.n	80082ac <R3_1_RLGetPhaseCurrents+0x34>
 80082aa:	4b07      	ldr	r3, [pc, #28]	; (80082c8 <R3_1_RLGetPhaseCurrents+0x50>)
  pStator_Currents->b = ( int16_t )( wAux );

}
 80082ac:	f85d 4b04 	ldr.w	r4, [sp], #4
  pStator_Currents->a = ( int16_t )( wAux );
 80082b0:	2200      	movs	r2, #0
 80082b2:	f363 020f 	bfi	r2, r3, #0, #16
 80082b6:	f363 421f 	bfi	r2, r3, #16, #16
 80082ba:	600a      	str	r2, [r1, #0]
}
 80082bc:	4770      	bx	lr
 80082be:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80082c2:	e7f3      	b.n	80082ac <R3_1_RLGetPhaseCurrents+0x34>
 80082c4:	ffff8002 	.word	0xffff8002
 80082c8:	ffff8001 	.word	0xffff8001

080082cc <R3_1_RLTurnOnLowSides>:
  * @retval none
  */
void R3_1_RLTurnOnLowSides(PWMC_Handle_t *pHdl)
{  
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80082cc:	6f81      	ldr	r1, [r0, #120]	; 0x78
 80082ce:	684a      	ldr	r2, [r1, #4]
{  
 80082d0:	b410      	push	{r4}
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80082d2:	f06f 0301 	mvn.w	r3, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 80082d6:	2400      	movs	r4, #0
 80082d8:	6354      	str	r4, [r2, #52]	; 0x34
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80082da:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80082dc:	6913      	ldr	r3, [r2, #16]

  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Wait until next update */
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 80082de:	07db      	lsls	r3, r3, #31
 80082e0:	d5fc      	bpl.n	80082dc <R3_1_RLTurnOnLowSides+0x10>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80082e2:	f06f 0301 	mvn.w	r3, #1
 80082e6:	6113      	str	r3, [r2, #16]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80082e8:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80082ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082ee:	6453      	str	r3, [r2, #68]	; 0x44
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs(TIMx);

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80082f0:	f891 306e 	ldrb.w	r3, [r1, #110]	; 0x6e
 80082f4:	2b02      	cmp	r3, #2
 80082f6:	d10a      	bne.n	800830e <R3_1_RLTurnOnLowSides+0x42>
  {
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 80082f8:	6888      	ldr	r0, [r1, #8]
 80082fa:	694c      	ldr	r4, [r1, #20]
 80082fc:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8008300:	6184      	str	r4, [r0, #24]
    LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
    LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8008302:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8008306:	0412      	lsls	r2, r2, #16
 8008308:	041b      	lsls	r3, r3, #16
 800830a:	6182      	str	r2, [r0, #24]
 800830c:	618b      	str	r3, [r1, #24]
  }
  return; 
}
 800830e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008312:	4770      	bx	lr

08008314 <R3_1_RLSwitchOnPWM>:
  * @retval none
  */
void R3_1_RLSwitchOnPWM(PWMC_Handle_t *pHdl)
{
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8008314:	6f81      	ldr	r1, [r0, #120]	; 0x78
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
  
  pHandle->_Super.TurnOnLowSidesAction = false;
 8008316:	2200      	movs	r2, #0
{
 8008318:	b430      	push	{r4, r5}
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 800831a:	e9d1 4300 	ldrd	r4, r3, [r1]
  pHandle->_Super.TurnOnLowSidesAction = false;
 800831e:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  /* The following while cycles ensure the identification of the nergative counting mode of TIM1
   * for correct modification of Repetition Counter value of TIM1.*/

  /* Wait the change of Counter Direction of TIM1 from Down-Direction to Up-Direction*/

  while ( ( TIMx->CR1 & DIR_MASK ) == DIR_MASK )
 8008322:	681a      	ldr	r2, [r3, #0]
 8008324:	06d2      	lsls	r2, r2, #27
 8008326:	d4fc      	bmi.n	8008322 <R3_1_RLSwitchOnPWM+0xe>
  {
  }
  /* Wait the change of Counter Direction of TIM1 from Up-Direction to Down-Direction*/
  while ( ( TIMx->CR1 & DIR_MASK ) == 0u )
 8008328:	681a      	ldr	r2, [r3, #0]
 800832a:	06d5      	lsls	r5, r2, #27
 800832c:	d5fc      	bpl.n	8008328 <R3_1_RLSwitchOnPWM+0x14>
  /* Set channel 1 Compare/Capture register to 1 */
  LL_TIM_OC_SetCompareCH1(TIMx, 1u);

  /* Set channel 4 Compare/Capture register to trig ADC in the middle 
     of the PWM period */
  LL_TIM_OC_SetCompareCH4(TIMx,(( uint32_t )( pHandle->Half_PWMPeriod ) - 5u));
 800832e:	f8b0 2070 	ldrh.w	r2, [r0, #112]	; 0x70
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008332:	2001      	movs	r0, #1
 8008334:	3a05      	subs	r2, #5
 8008336:	6358      	str	r0, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR4, CompareValue);
 8008338:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800833a:	f06f 0201 	mvn.w	r2, #1
 800833e:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8008340:	691a      	ldr	r2, [r3, #16]
  

  LL_TIM_ClearFlag_UPDATE( TIMx ); /* Clear flag to wait next update */

  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 8008342:	07d2      	lsls	r2, r2, #31
 8008344:	d5fc      	bpl.n	8008340 <R3_1_RLSwitchOnPWM+0x2c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008346:	f06f 0201 	mvn.w	r2, #1
 800834a:	611a      	str	r2, [r3, #16]
  {}
  LL_TIM_ClearFlag_UPDATE( TIMx );
  
  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 800834c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800834e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008352:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8008354:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008356:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800835a:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs(TIMx);

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800835c:	f891 206e 	ldrb.w	r2, [r1, #110]	; 0x6e
 8008360:	2a02      	cmp	r2, #2
 8008362:	d00b      	beq.n	800837c <R3_1_RLSwitchOnPWM+0x68>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008364:	f06f 0201 	mvn.w	r2, #1
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8008368:	f06f 0104 	mvn.w	r1, #4
 800836c:	6021      	str	r1, [r4, #0]
 800836e:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8008370:	68da      	ldr	r2, [r3, #12]
 8008372:	f042 0201 	orr.w	r2, r2, #1

  /* enable TIMx update interrupt*/
  LL_TIM_EnableIT_UPDATE( TIMx );

  return; 
}
 8008376:	bc30      	pop	{r4, r5}
 8008378:	60da      	str	r2, [r3, #12]
 800837a:	4770      	bx	lr
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0u)
 800837c:	6a18      	ldr	r0, [r3, #32]
 800837e:	f240 5255 	movw	r2, #1365	; 0x555
 8008382:	4210      	tst	r0, r2
 8008384:	d00a      	beq.n	800839c <R3_1_RLSwitchOnPWM+0x88>
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 8008386:	688a      	ldr	r2, [r1, #8]
 8008388:	6948      	ldr	r0, [r1, #20]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800838a:	6190      	str	r0, [r2, #24]
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 800838c:	68ca      	ldr	r2, [r1, #12]
 800838e:	6988      	ldr	r0, [r1, #24]
 8008390:	6190      	str	r0, [r2, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8008392:	69ca      	ldr	r2, [r1, #28]
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8008394:	6909      	ldr	r1, [r1, #16]
 8008396:	0412      	lsls	r2, r2, #16
 8008398:	618a      	str	r2, [r1, #24]
}
 800839a:	e7e3      	b.n	8008364 <R3_1_RLSwitchOnPWM+0x50>
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800839c:	e9d1 0205 	ldrd	r0, r2, [r1, #20]
 80083a0:	688d      	ldr	r5, [r1, #8]
 80083a2:	0400      	lsls	r0, r0, #16
 80083a4:	61a8      	str	r0, [r5, #24]
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 80083a6:	68c8      	ldr	r0, [r1, #12]
 80083a8:	0412      	lsls	r2, r2, #16
 80083aa:	6182      	str	r2, [r0, #24]
 80083ac:	69ca      	ldr	r2, [r1, #28]
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 80083ae:	6909      	ldr	r1, [r1, #16]
 80083b0:	0412      	lsls	r2, r2, #16
 80083b2:	618a      	str	r2, [r1, #24]
}
 80083b4:	e7d6      	b.n	8008364 <R3_1_RLSwitchOnPWM+0x50>
 80083b6:	bf00      	nop

080083b8 <R3_1_Init>:
{
 80083b8:	b430      	push	{r4, r5}
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80083ba:	6f84      	ldr	r4, [r0, #120]	; 0x78
  ADC_TypeDef* ADCx  = pHandle->pParams_str->ADCx;
 80083bc:	6823      	ldr	r3, [r4, #0]
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80083be:	6862      	ldr	r2, [r4, #4]
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 80083c0:	6859      	ldr	r1, [r3, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 80083c2:	f06f 0502 	mvn.w	r5, #2
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 80083c6:	f021 0120 	bic.w	r1, r1, #32
 80083ca:	6059      	str	r1, [r3, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 80083cc:	601d      	str	r5, [r3, #0]
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 80083ce:	6859      	ldr	r1, [r3, #4]
 80083d0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80083d4:	6059      	str	r1, [r3, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 80083d6:	f06f 0104 	mvn.w	r1, #4
 80083da:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 80083dc:	6811      	ldr	r1, [r2, #0]
 80083de:	f021 0101 	bic.w	r1, r1, #1
 80083e2:	6011      	str	r1, [r2, #0]
    if ( TIMx == TIM1 )
 80083e4:	491a      	ldr	r1, [pc, #104]	; (8008450 <R3_1_Init+0x98>)
 80083e6:	428a      	cmp	r2, r1
 80083e8:	d02c      	beq.n	8008444 <R3_1_Init+0x8c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 80083ea:	f06f 0180 	mvn.w	r1, #128	; 0x80
 80083ee:	6111      	str	r1, [r2, #16]
    if ( ( pHandle->pParams_str->EmergencyStop ) != DISABLE )
 80083f0:	f894 106c 	ldrb.w	r1, [r4, #108]	; 0x6c
 80083f4:	b119      	cbz	r1, 80083fe <R3_1_Init+0x46>
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 80083f6:	68d1      	ldr	r1, [r2, #12]
 80083f8:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80083fc:	60d1      	str	r1, [r2, #12]
  SET_BIT(TIMx->CCER, Channels);
 80083fe:	6a11      	ldr	r1, [r2, #32]
 8008400:	f441 61aa 	orr.w	r1, r1, #1360	; 0x550
 8008404:	f041 0105 	orr.w	r1, r1, #5
 8008408:	6211      	str	r1, [r2, #32]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 800840a:	689a      	ldr	r2, [r3, #8]
 800840c:	f042 0201 	orr.w	r2, r2, #1
 8008410:	609a      	str	r2, [r3, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8008412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8008414:	f06f 0404 	mvn.w	r4, #4
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8008418:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800841c:	62da      	str	r2, [r3, #44]	; 0x2c
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 800841e:	601c      	str	r4, [r3, #0]
  SET_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8008420:	685a      	ldr	r2, [r3, #4]
 8008422:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008426:	605a      	str	r2, [r3, #4]
  MODIFY_REG(ADCx->JSQR, ADC_JSQR_JL, SequencerNbRanks);
 8008428:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    pHandle->OverCurrentFlag = false;
 800842a:	2100      	movs	r1, #0
    pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 800842c:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
 8008430:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8008434:	66c4      	str	r4, [r0, #108]	; 0x6c
 8008436:	639a      	str	r2, [r3, #56]	; 0x38
}
 8008438:	bc30      	pop	{r4, r5}
    pHandle->OverCurrentFlag = false;
 800843a:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
    pHandle->_Super.DTTest = 0u;
 800843e:	f8a0 104e 	strh.w	r1, [r0, #78]	; 0x4e
}
 8008442:	4770      	bx	lr
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 8008444:	4d03      	ldr	r5, [pc, #12]	; (8008454 <R3_1_Init+0x9c>)
 8008446:	68e9      	ldr	r1, [r5, #12]
 8008448:	f041 0101 	orr.w	r1, r1, #1
 800844c:	60e9      	str	r1, [r5, #12]
}
 800844e:	e7cc      	b.n	80083ea <R3_1_Init+0x32>
 8008450:	40010000 	.word	0x40010000
 8008454:	e0042000 	.word	0xe0042000

08008458 <R3_1_CurrentReadingCalibration>:
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8008458:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 800845a:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 800845c:	685d      	ldr	r5, [r3, #4]
  pHandle->PhaseAOffset = 0u;
 800845e:	2600      	movs	r6, #0
  pHandle->PolarizationCounter = 0u;
 8008460:	f880 6073 	strb.w	r6, [r0, #115]	; 0x73
  CLEAR_BIT(TIMx->CCER, Channels);
 8008464:	6a2b      	ldr	r3, [r5, #32]
  pHandle->PhaseAOffset = 0u;
 8008466:	65c6      	str	r6, [r0, #92]	; 0x5c
 8008468:	f423 63aa 	bic.w	r3, r3, #1360	; 0x550
 800846c:	f023 0305 	bic.w	r3, r3, #5
  pHandle->PhaseCOffset = 0u;
 8008470:	e9c0 6618 	strd	r6, r6, [r0, #96]	; 0x60
 8008474:	622b      	str	r3, [r5, #32]
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsCalibrationAB;
 8008476:	4b34      	ldr	r3, [pc, #208]	; (8008548 <R3_1_CurrentReadingCalibration+0xf0>)
 8008478:	6043      	str	r3, [r0, #4]
{
 800847a:	4604      	mov	r4, r0
  pHandle->CalibSector = SECTOR_5;
 800847c:	2704      	movs	r7, #4
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_1_SetADCSampPointCalibration;
 800847e:	4b33      	ldr	r3, [pc, #204]	; (800854c <R3_1_CurrentReadingCalibration+0xf4>)
 8008480:	6183      	str	r3, [r0, #24]
{
 8008482:	b083      	sub	sp, #12
  pHandle->CalibSector = SECTOR_5;
 8008484:	f880 7072 	strb.w	r7, [r0, #114]	; 0x72
  pHandle->_Super.Sector = SECTOR_5; 
 8008488:	f880 703a 	strb.w	r7, [r0, #58]	; 0x3a
  R3_1_SwitchOnPWM( &pHandle->_Super );
 800848c:	f7ff fe72 	bl	8008174 <R3_1_SwitchOnPWM>
  waitForPolarizationEnd( TIMx,
 8008490:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8008492:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8008496:	f893 206d 	ldrb.w	r2, [r3, #109]	; 0x6d
 800849a:	4628      	mov	r0, r5
 800849c:	f104 0373 	add.w	r3, r4, #115	; 0x73
 80084a0:	e9cd 1300 	strd	r1, r3, [sp]
 80084a4:	f7ff fba2 	bl	8007bec <waitForPolarizationEnd>
  R3_1_SwitchOffPWM( &pHandle->_Super );
 80084a8:	4620      	mov	r0, r4
 80084aa:	f7ff fead 	bl	8008208 <R3_1_SwitchOffPWM>
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsCalibrationC;
 80084ae:	4a28      	ldr	r2, [pc, #160]	; (8008550 <R3_1_CurrentReadingCalibration+0xf8>)
 80084b0:	6062      	str	r2, [r4, #4]
  R3_1_SwitchOnPWM( &pHandle->_Super );
 80084b2:	4620      	mov	r0, r4
  pHandle->PolarizationCounter = 0u;
 80084b4:	f884 6073 	strb.w	r6, [r4, #115]	; 0x73
  pHandle->CalibSector = SECTOR_1;
 80084b8:	f884 6072 	strb.w	r6, [r4, #114]	; 0x72
  pHandle->_Super.Sector = SECTOR_1; 
 80084bc:	f884 603a 	strb.w	r6, [r4, #58]	; 0x3a
  R3_1_SwitchOnPWM( &pHandle->_Super );
 80084c0:	f7ff fe58 	bl	8008174 <R3_1_SwitchOnPWM>
  waitForPolarizationEnd( TIMx,
 80084c4:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80084c6:	e9dd 1300 	ldrd	r1, r3, [sp]
 80084ca:	f892 206d 	ldrb.w	r2, [r2, #109]	; 0x6d
 80084ce:	4628      	mov	r0, r5
 80084d0:	f7ff fb8c 	bl	8007bec <waitForPolarizationEnd>
  R3_1_SwitchOffPWM( &pHandle->_Super );
 80084d4:	4620      	mov	r0, r4
 80084d6:	f7ff fe97 	bl	8008208 <R3_1_SwitchOffPWM>
  pHandle->PhaseAOffset >>= 3;
 80084da:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80084dc:	08db      	lsrs	r3, r3, #3
 80084de:	65e3      	str	r3, [r4, #92]	; 0x5c
  pHandle->PhaseBOffset >>= 3;
 80084e0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80084e2:	08db      	lsrs	r3, r3, #3
 80084e4:	6623      	str	r3, [r4, #96]	; 0x60
  pHandle->PhaseCOffset >>= 3;
 80084e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80084e8:	08db      	lsrs	r3, r3, #3
 80084ea:	6663      	str	r3, [r4, #100]	; 0x64
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_GetPhaseCurrents;
 80084ec:	4b19      	ldr	r3, [pc, #100]	; (8008554 <R3_1_CurrentReadingCalibration+0xfc>)
 80084ee:	6063      	str	r3, [r4, #4]
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_1_SetADCSampPointSectX;
 80084f0:	4b19      	ldr	r3, [pc, #100]	; (8008558 <R3_1_CurrentReadingCalibration+0x100>)
 80084f2:	61a3      	str	r3, [r4, #24]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80084f4:	69ab      	ldr	r3, [r5, #24]
 80084f6:	f023 0308 	bic.w	r3, r3, #8
 80084fa:	61ab      	str	r3, [r5, #24]
 80084fc:	69ab      	ldr	r3, [r5, #24]
 80084fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008502:	61ab      	str	r3, [r5, #24]
 8008504:	69eb      	ldr	r3, [r5, #28]
 8008506:	f023 0308 	bic.w	r3, r3, #8
 800850a:	61eb      	str	r3, [r5, #28]
  LL_TIM_OC_SetCompareCH1 (TIMx,pHandle->Half_PWMPeriod);
 800850c:	f8b4 3070 	ldrh.w	r3, [r4, #112]	; 0x70
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008510:	636b      	str	r3, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8008512:	63ab      	str	r3, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8008514:	63eb      	str	r3, [r5, #60]	; 0x3c
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8008516:	69ab      	ldr	r3, [r5, #24]
 8008518:	f043 0308 	orr.w	r3, r3, #8
 800851c:	61ab      	str	r3, [r5, #24]
 800851e:	69ab      	ldr	r3, [r5, #24]
 8008520:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008524:	61ab      	str	r3, [r5, #24]
 8008526:	69eb      	ldr	r3, [r5, #28]
 8008528:	f043 0308 	orr.w	r3, r3, #8
 800852c:	61eb      	str	r3, [r5, #28]
  pHandle->_Super.Sector = SECTOR_5;
 800852e:	f884 703a 	strb.w	r7, [r4, #58]	; 0x3a
  SET_BIT(TIMx->CCER, Channels);
 8008532:	6a2b      	ldr	r3, [r5, #32]
 8008534:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 8008538:	f043 0305 	orr.w	r3, r3, #5
 800853c:	622b      	str	r3, [r5, #32]
  pHandle->BrakeActionLock = false;
 800853e:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
}
 8008542:	b003      	add	sp, #12
 8008544:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008546:	bf00      	nop
 8008548:	08008099 	.word	0x08008099
 800854c:	08008589 	.word	0x08008589
 8008550:	080080e1 	.word	0x080080e1
 8008554:	08007f09 	.word	0x08007f09
 8008558:	080085a9 	.word	0x080085a9

0800855c <R3_1_WriteTIMRegisters>:
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 800855c:	6f83      	ldr	r3, [r0, #120]	; 0x78
  LL_TIM_OC_SetCompareCH2 (TIMx,pHandle->_Super.CntPhB);
 800855e:	8e82      	ldrh	r2, [r0, #52]	; 0x34
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8008560:	685b      	ldr	r3, [r3, #4]
  LL_TIM_OC_SetCompareCH3 (TIMx,pHandle->_Super.CntPhC);
 8008562:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
{
 8008564:	b410      	push	{r4}
  LL_TIM_OC_SetCompareCH1 (TIMx,pHandle->_Super.CntPhA);
 8008566:	8e44      	ldrh	r4, [r0, #50]	; 0x32
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008568:	635c      	str	r4, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800856a:	639a      	str	r2, [r3, #56]	; 0x38
  if ( pHandle->_Super.SWerror == 1u )
 800856c:	8f02      	ldrh	r2, [r0, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800856e:	63d9      	str	r1, [r3, #60]	; 0x3c
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 8008570:	6a1b      	ldr	r3, [r3, #32]
}
 8008572:	f85d 4b04 	ldr.w	r4, [sp], #4
  if ( pHandle->_Super.SWerror == 1u )
 8008576:	2a01      	cmp	r2, #1
    hAux = MC_FOC_DURATION;
 8008578:	bf12      	itee	ne
 800857a:	f3c3 3200 	ubfxne	r2, r3, #12, #1
    pHandle->_Super.SWerror = 0u;
 800857e:	2300      	moveq	r3, #0
 8008580:	8703      	strheq	r3, [r0, #56]	; 0x38
}
 8008582:	4610      	mov	r0, r2
 8008584:	4770      	bx	lr
 8008586:	bf00      	nop

08008588 <R3_1_SetADCSampPointCalibration>:
{
 8008588:	b510      	push	{r4, lr}
  return R3_1_WriteTIMRegisters(&pHandle->_Super, (uint16_t)(pHandle->Half_PWMPeriod) - 1u);
 800858a:	f8b0 1070 	ldrh.w	r1, [r0, #112]	; 0x70
  pHandle->_Super.Sector = pHandle->CalibSector;
 800858e:	f890 2072 	ldrb.w	r2, [r0, #114]	; 0x72
 8008592:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 8008596:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
  return R3_1_WriteTIMRegisters(&pHandle->_Super, (uint16_t)(pHandle->Half_PWMPeriod) - 1u);
 800859a:	3901      	subs	r1, #1
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 800859c:	66c4      	str	r4, [r0, #108]	; 0x6c
  return R3_1_WriteTIMRegisters(&pHandle->_Super, (uint16_t)(pHandle->Half_PWMPeriod) - 1u);
 800859e:	b289      	uxth	r1, r1
 80085a0:	f7ff ffdc 	bl	800855c <R3_1_WriteTIMRegisters>
}
 80085a4:	bd10      	pop	{r4, pc}
 80085a6:	bf00      	nop

080085a8 <R3_1_SetADCSampPointSectX>:
{
 80085a8:	b510      	push	{r4, lr}
  register uint16_t lowDuty = pHdl->lowDuty;
 80085aa:	8f81      	ldrh	r1, [r0, #60]	; 0x3c
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) > pHandle->pParams_str->hTafter )
 80085ac:	f8b0 e070 	ldrh.w	lr, [r0, #112]	; 0x70
 80085b0:	6f84      	ldr	r4, [r0, #120]	; 0x78
 80085b2:	ebae 0201 	sub.w	r2, lr, r1
 80085b6:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 80085ba:	b292      	uxth	r2, r2
 80085bc:	429a      	cmp	r2, r3
 80085be:	d908      	bls.n	80085d2 <R3_1_SetADCSampPointSectX+0x2a>
    pHandle->_Super.Sector = SECTOR_5;
 80085c0:	2304      	movs	r3, #4
    hCntSmp = ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u;
 80085c2:	f10e 31ff 	add.w	r1, lr, #4294967295
    pHandle->_Super.Sector = SECTOR_5;
 80085c6:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    hCntSmp = ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u;
 80085ca:	b289      	uxth	r1, r1
  return R3_1_WriteTIMRegisters( &pHandle->_Super, hCntSmp);
 80085cc:	f7ff ffc6 	bl	800855c <R3_1_WriteTIMRegisters>
}
 80085d0:	bd10      	pop	{r4, pc}
    hDeltaDuty = ( uint16_t )( lowDuty - midDuty );
 80085d2:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 80085d6:	eba1 0c0c 	sub.w	ip, r1, ip
    if ( hDeltaDuty > ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) * 2u )
 80085da:	fa1f fc8c 	uxth.w	ip, ip
 80085de:	ebbc 0f42 	cmp.w	ip, r2, lsl #1
 80085e2:	d906      	bls.n	80085f2 <R3_1_SetADCSampPointSectX+0x4a>
      hCntSmp = lowDuty - pHandle->pParams_str->hTbefore;
 80085e4:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 80085e8:	1ac9      	subs	r1, r1, r3
 80085ea:	b289      	uxth	r1, r1
  return R3_1_WriteTIMRegisters( &pHandle->_Super, hCntSmp);
 80085ec:	f7ff ffb6 	bl	800855c <R3_1_WriteTIMRegisters>
}
 80085f0:	bd10      	pop	{r4, pc}
      hCntSmp = lowDuty + pHandle->pParams_str->hTafter;
 80085f2:	440b      	add	r3, r1
 80085f4:	b299      	uxth	r1, r3
      if ( hCntSmp >= pHandle->Half_PWMPeriod )
 80085f6:	458e      	cmp	lr, r1
 80085f8:	d8e8      	bhi.n	80085cc <R3_1_SetADCSampPointSectX+0x24>
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 80085fa:	43c9      	mvns	r1, r1
        pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_FALLING;
 80085fc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 8008600:	eb01 014e 	add.w	r1, r1, lr, lsl #1
        pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_FALLING;
 8008604:	66c3      	str	r3, [r0, #108]	; 0x6c
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 8008606:	b289      	uxth	r1, r1
  return R3_1_WriteTIMRegisters( &pHandle->_Super, hCntSmp);
 8008608:	f7ff ffa8 	bl	800855c <R3_1_WriteTIMRegisters>
}
 800860c:	bd10      	pop	{r4, pc}
 800860e:	bf00      	nop

08008610 <R3_1_TIMx_UP_IRQHandler>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008610:	6f81      	ldr	r1, [r0, #120]	; 0x78
{
 8008612:	b430      	push	{r4, r5}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008614:	e9d1 2400 	ldrd	r2, r4, [r1]
{
 8008618:	4603      	mov	r3, r0
  CLEAR_BIT(ADCx->CR2, ADC_CR2_JEXTEN);
 800861a:	6890      	ldr	r0, [r2, #8]
  SET_BIT(ADCx->CR2, ExternalTriggerEdge);
 800861c:	6edd      	ldr	r5, [r3, #108]	; 0x6c
  CLEAR_BIT(ADCx->CR2, ADC_CR2_JEXTEN);
 800861e:	f420 1040 	bic.w	r0, r0, #3145728	; 0x300000
 8008622:	6090      	str	r0, [r2, #8]
  ADCx->JSQR = pHandle->pParams_str->ADCConfig[pHandle->_Super.Sector];
 8008624:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
 8008628:	3008      	adds	r0, #8
 800862a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800862e:	6391      	str	r1, [r2, #56]	; 0x38
  SET_BIT(TIMx->CCER, Channels);
 8008630:	6a20      	ldr	r0, [r4, #32]
 8008632:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 8008636:	6220      	str	r0, [r4, #32]
  SET_BIT(ADCx->CR2, ExternalTriggerEdge);
 8008638:	6891      	ldr	r1, [r2, #8]
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 800863a:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
 800863e:	4329      	orrs	r1, r5
 8008640:	6091      	str	r1, [r2, #8]
}
 8008642:	f103 0046 	add.w	r0, r3, #70	; 0x46
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 8008646:	66dc      	str	r4, [r3, #108]	; 0x6c
}
 8008648:	bc30      	pop	{r4, r5}
 800864a:	4770      	bx	lr

0800864c <R3_1_BRK_IRQHandler>:
  if ( pHandle->BrakeActionLock == false )
 800864c:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
 8008650:	b923      	cbnz	r3, 800865c <R3_1_BRK_IRQHandler+0x10>
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8008652:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8008654:	f893 206e 	ldrb.w	r2, [r3, #110]	; 0x6e
 8008658:	2a02      	cmp	r2, #2
 800865a:	d004      	beq.n	8008666 <R3_1_BRK_IRQHandler+0x1a>
  pHandle->OverCurrentFlag = true;
 800865c:	2301      	movs	r3, #1
 800865e:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
}
 8008662:	3046      	adds	r0, #70	; 0x46
 8008664:	4770      	bx	lr
{
 8008666:	b430      	push	{r4, r5}
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8008668:	e9d3 4105 	ldrd	r4, r1, [r3, #20]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800866c:	689d      	ldr	r5, [r3, #8]
 800866e:	69da      	ldr	r2, [r3, #28]
 8008670:	0424      	lsls	r4, r4, #16
 8008672:	61ac      	str	r4, [r5, #24]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8008674:	e9d3 5403 	ldrd	r5, r4, [r3, #12]
 8008678:	0409      	lsls	r1, r1, #16
 800867a:	0412      	lsls	r2, r2, #16
  pHandle->OverCurrentFlag = true;
 800867c:	2301      	movs	r3, #1
 800867e:	61a9      	str	r1, [r5, #24]
}
 8008680:	3046      	adds	r0, #70	; 0x46
 8008682:	61a2      	str	r2, [r4, #24]
  pHandle->OverCurrentFlag = true;
 8008684:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
}
 8008688:	bc30      	pop	{r4, r5}
 800868a:	4770      	bx	lr

0800868c <R3_1_IsOverCurrentOccurred>:
  if (pHandle->OverCurrentFlag == true )
 800868c:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8008690:	b90b      	cbnz	r3, 8008696 <R3_1_IsOverCurrentOccurred+0xa>
  uint16_t retVal = MC_NO_FAULTS;
 8008692:	4618      	mov	r0, r3
}
 8008694:	4770      	bx	lr
    pHandle->OverCurrentFlag = false;
 8008696:	2300      	movs	r3, #0
 8008698:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    retVal |= MC_BREAK_IN;
 800869c:	2040      	movs	r0, #64	; 0x40
 800869e:	4770      	bx	lr

080086a0 <R3_1_RLDetectionModeEnable>:
  if (pHandle->_Super.RLDetectionMode == false)
 80086a0:	f890 1047 	ldrb.w	r1, [r0, #71]	; 0x47
{
 80086a4:	b430      	push	{r4, r5}
  if (pHandle->_Super.RLDetectionMode == false)
 80086a6:	2900      	cmp	r1, #0
 80086a8:	d134      	bne.n	8008714 <R3_1_RLDetectionModeEnable+0x74>
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80086aa:	6f85      	ldr	r5, [r0, #120]	; 0x78
 80086ac:	686b      	ldr	r3, [r5, #4]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80086ae:	699a      	ldr	r2, [r3, #24]
 80086b0:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 80086b4:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80086b8:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 80086ba:	6a1a      	ldr	r2, [r3, #32]
 80086bc:	f042 0201 	orr.w	r2, r2, #1
 80086c0:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 80086c2:	6a1a      	ldr	r2, [r3, #32]
 80086c4:	f022 0204 	bic.w	r2, r2, #4
 80086c8:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80086ca:	6359      	str	r1, [r3, #52]	; 0x34
    if ((pHandle->pParams_str->LowSideOutputs)== LS_PWM_TIMER)
 80086cc:	f895 206e 	ldrb.w	r2, [r5, #110]	; 0x6e
 80086d0:	2a01      	cmp	r2, #1
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80086d2:	f103 0418 	add.w	r4, r3, #24
 80086d6:	d02a      	beq.n	800872e <R3_1_RLDetectionModeEnable+0x8e>
    else if ((pHandle->pParams_str->LowSideOutputs)== ES_GPIO)
 80086d8:	2a02      	cmp	r2, #2
 80086da:	d10d      	bne.n	80086f8 <R3_1_RLDetectionModeEnable+0x58>
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80086dc:	699a      	ldr	r2, [r3, #24]
 80086de:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 80086e2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80086e6:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 80086e8:	6a1a      	ldr	r2, [r3, #32]
 80086ea:	f042 0210 	orr.w	r2, r2, #16
 80086ee:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 80086f0:	6a1a      	ldr	r2, [r3, #32]
 80086f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80086f6:	621a      	str	r2, [r3, #32]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80086f8:	6862      	ldr	r2, [r4, #4]
 80086fa:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 80086fe:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 8008702:	6062      	str	r2, [r4, #4]
  CLEAR_BIT(TIMx->CCER, Channels);
 8008704:	6a1a      	ldr	r2, [r3, #32]
 8008706:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800870a:	621a      	str	r2, [r3, #32]
 800870c:	6a1a      	ldr	r2, [r3, #32]
 800870e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008712:	621a      	str	r2, [r3, #32]
  pHandle->_Super.pFctTurnOnLowSides = &R3_1_RLTurnOnLowSides;
 8008714:	4b0d      	ldr	r3, [pc, #52]	; (800874c <R3_1_RLDetectionModeEnable+0xac>)
  pHandle->_Super.pFctSwitchOnPwm = &R3_1_RLSwitchOnPWM;
 8008716:	490e      	ldr	r1, [pc, #56]	; (8008750 <R3_1_RLDetectionModeEnable+0xb0>)
  pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 8008718:	4a0e      	ldr	r2, [pc, #56]	; (8008754 <R3_1_RLDetectionModeEnable+0xb4>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_RLGetPhaseCurrents;
 800871a:	4c0f      	ldr	r4, [pc, #60]	; (8008758 <R3_1_RLDetectionModeEnable+0xb8>)
  pHandle->_Super.pFctTurnOnLowSides = &R3_1_RLTurnOnLowSides;
 800871c:	6143      	str	r3, [r0, #20]
  pHandle->_Super.RLDetectionMode = true;
 800871e:	2301      	movs	r3, #1
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_RLGetPhaseCurrents;
 8008720:	6044      	str	r4, [r0, #4]
  pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 8008722:	e9c0 2102 	strd	r2, r1, [r0, #8]
}
 8008726:	bc30      	pop	{r4, r5}
  pHandle->_Super.RLDetectionMode = true;
 8008728:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
}
 800872c:	4770      	bx	lr
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800872e:	699a      	ldr	r2, [r3, #24]
 8008730:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8008734:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008738:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(TIMx->CCER, Channels);
 800873a:	6a1a      	ldr	r2, [r3, #32]
 800873c:	f022 0210 	bic.w	r2, r2, #16
 8008740:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CCER, Channels);
 8008742:	6a1a      	ldr	r2, [r3, #32]
 8008744:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008748:	621a      	str	r2, [r3, #32]
}
 800874a:	e7d5      	b.n	80086f8 <R3_1_RLDetectionModeEnable+0x58>
 800874c:	080082cd 	.word	0x080082cd
 8008750:	08008315 	.word	0x08008315
 8008754:	08008209 	.word	0x08008209
 8008758:	08008279 	.word	0x08008279

0800875c <R3_1_RLDetectionModeDisable>:
  if (pHandle->_Super.RLDetectionMode == true)
 800875c:	f890 3047 	ldrb.w	r3, [r0, #71]	; 0x47
 8008760:	2b00      	cmp	r3, #0
 8008762:	d048      	beq.n	80087f6 <R3_1_RLDetectionModeDisable+0x9a>
{
 8008764:	b410      	push	{r4}
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8008766:	6f81      	ldr	r1, [r0, #120]	; 0x78
 8008768:	684b      	ldr	r3, [r1, #4]
    while ((TIMx->CR1 & DIR_MASK) == 0u)
 800876a:	681a      	ldr	r2, [r3, #0]
 800876c:	06d4      	lsls	r4, r2, #27
 800876e:	d5fc      	bpl.n	800876a <R3_1_RLDetectionModeDisable+0xe>
    while ((TIMx->CR1 & DIR_MASK) == DIR_MASK)
 8008770:	681a      	ldr	r2, [r3, #0]
 8008772:	06d2      	lsls	r2, r2, #27
 8008774:	d4fc      	bmi.n	8008770 <R3_1_RLDetectionModeDisable+0x14>
    TIMx->RCR = pHandle->pParams_str->RepetitionCounter;
 8008776:	f891 206d 	ldrb.w	r2, [r1, #109]	; 0x6d
 800877a:	631a      	str	r2, [r3, #48]	; 0x30
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800877c:	699a      	ldr	r2, [r3, #24]
 800877e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8008782:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8008786:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8008788:	6a1a      	ldr	r2, [r3, #32]
 800878a:	f042 0201 	orr.w	r2, r2, #1
 800878e:	621a      	str	r2, [r3, #32]
    if ((pHandle->pParams_str-> LowSideOutputs)== LS_PWM_TIMER)
 8008790:	f891 206e 	ldrb.w	r2, [r1, #110]	; 0x6e
 8008794:	2a01      	cmp	r2, #1
 8008796:	d02f      	beq.n	80087f8 <R3_1_RLDetectionModeDisable+0x9c>
    else if ((pHandle->pParams_str->LowSideOutputs)== ES_GPIO)
 8008798:	2a02      	cmp	r2, #2
 800879a:	d053      	beq.n	8008844 <R3_1_RLDetectionModeDisable+0xe8>
    LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod) >> 1);
 800879c:	f8b0 2070 	ldrh.w	r2, [r0, #112]	; 0x70
 80087a0:	0852      	lsrs	r2, r2, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 80087a2:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80087a4:	699c      	ldr	r4, [r3, #24]
 80087a6:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
 80087aa:	f444 44c0 	orr.w	r4, r4, #24576	; 0x6000
 80087ae:	619c      	str	r4, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 80087b0:	6a1c      	ldr	r4, [r3, #32]
 80087b2:	f044 0410 	orr.w	r4, r4, #16
 80087b6:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80087b8:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80087ba:	69dc      	ldr	r4, [r3, #28]
 80087bc:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 80087c0:	f044 0460 	orr.w	r4, r4, #96	; 0x60
 80087c4:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 80087c6:	6a1c      	ldr	r4, [r3, #32]
 80087c8:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 80087cc:	621c      	str	r4, [r3, #32]
    LL_ADC_INJ_SetSequencerDiscont(pHandle->pParams_str->ADCx,
 80087ce:	6809      	ldr	r1, [r1, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80087d0:	63da      	str	r2, [r3, #60]	; 0x3c
  MODIFY_REG(ADCx->CR1, ADC_CR1_JDISCEN, SeqDiscont);
 80087d2:	684b      	ldr	r3, [r1, #4]
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_GetPhaseCurrents;
 80087d4:	4a2e      	ldr	r2, [pc, #184]	; (8008890 <R3_1_RLDetectionModeDisable+0x134>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_1_TurnOnLowSides;
 80087d6:	4c2f      	ldr	r4, [pc, #188]	; (8008894 <R3_1_RLDetectionModeDisable+0x138>)
 80087d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80087dc:	604b      	str	r3, [r1, #4]
    pHandle->_Super.pFctSwitchOnPwm = &R3_1_SwitchOnPWM;
 80087de:	492e      	ldr	r1, [pc, #184]	; (8008898 <R3_1_RLDetectionModeDisable+0x13c>)
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_GetPhaseCurrents;
 80087e0:	6042      	str	r2, [r0, #4]
    pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 80087e2:	4a2e      	ldr	r2, [pc, #184]	; (800889c <R3_1_RLDetectionModeDisable+0x140>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_1_TurnOnLowSides;
 80087e4:	6144      	str	r4, [r0, #20]
    pHandle->_Super.RLDetectionMode = false;
 80087e6:	2300      	movs	r3, #0
    pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 80087e8:	e9c0 2102 	strd	r2, r1, [r0, #8]
}
 80087ec:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->_Super.RLDetectionMode = false;
 80087f0:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
}
 80087f4:	4770      	bx	lr
 80087f6:	4770      	bx	lr
  SET_BIT(TIMx->CCER, Channels);
 80087f8:	6a1c      	ldr	r4, [r3, #32]
    LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod) >> 1);
 80087fa:	f8b0 2070 	ldrh.w	r2, [r0, #112]	; 0x70
 80087fe:	f044 0404 	orr.w	r4, r4, #4
 8008802:	0852      	lsrs	r2, r2, #1
 8008804:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008806:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8008808:	699c      	ldr	r4, [r3, #24]
 800880a:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
 800880e:	f444 44c0 	orr.w	r4, r4, #24576	; 0x6000
 8008812:	619c      	str	r4, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8008814:	6a1c      	ldr	r4, [r3, #32]
 8008816:	f044 0410 	orr.w	r4, r4, #16
 800881a:	621c      	str	r4, [r3, #32]
 800881c:	6a1c      	ldr	r4, [r3, #32]
 800881e:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 8008822:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8008824:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8008826:	69dc      	ldr	r4, [r3, #28]
 8008828:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 800882c:	f044 0460 	orr.w	r4, r4, #96	; 0x60
 8008830:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8008832:	6a1c      	ldr	r4, [r3, #32]
 8008834:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8008838:	621c      	str	r4, [r3, #32]
 800883a:	6a1c      	ldr	r4, [r3, #32]
 800883c:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 8008840:	621c      	str	r4, [r3, #32]
}
 8008842:	e7c4      	b.n	80087ce <R3_1_RLDetectionModeDisable+0x72>
  CLEAR_BIT(TIMx->CCER, Channels);
 8008844:	6a1c      	ldr	r4, [r3, #32]
 8008846:	f8b0 2070 	ldrh.w	r2, [r0, #112]	; 0x70
 800884a:	f024 0404 	bic.w	r4, r4, #4
 800884e:	0852      	lsrs	r2, r2, #1
 8008850:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008852:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8008854:	699c      	ldr	r4, [r3, #24]
 8008856:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
 800885a:	f444 44c0 	orr.w	r4, r4, #24576	; 0x6000
 800885e:	619c      	str	r4, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8008860:	6a1c      	ldr	r4, [r3, #32]
 8008862:	f044 0410 	orr.w	r4, r4, #16
 8008866:	621c      	str	r4, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8008868:	6a1c      	ldr	r4, [r3, #32]
 800886a:	f024 0440 	bic.w	r4, r4, #64	; 0x40
 800886e:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8008870:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8008872:	69dc      	ldr	r4, [r3, #28]
 8008874:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 8008878:	f044 0460 	orr.w	r4, r4, #96	; 0x60
 800887c:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 800887e:	6a1c      	ldr	r4, [r3, #32]
 8008880:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8008884:	621c      	str	r4, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8008886:	6a1c      	ldr	r4, [r3, #32]
 8008888:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 800888c:	621c      	str	r4, [r3, #32]
}
 800888e:	e79e      	b.n	80087ce <R3_1_RLDetectionModeDisable+0x72>
 8008890:	08007f09 	.word	0x08007f09
 8008894:	08008121 	.word	0x08008121
 8008898:	08008175 	.word	0x08008175
 800889c:	08008209 	.word	0x08008209

080088a0 <R3_1_RLDetectionModeSetDuty>:
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 80088a0:	f8b0 3070 	ldrh.w	r3, [r0, #112]	; 0x70
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80088a4:	6f82      	ldr	r2, [r0, #120]	; 0x78
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 80088a6:	fb03 f101 	mul.w	r1, r3, r1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80088aa:	6852      	ldr	r2, [r2, #4]
  if (pHandle->_Super.SWerror == 1u)
 80088ac:	8f03      	ldrh	r3, [r0, #56]	; 0x38
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 80088ae:	0c09      	lsrs	r1, r1, #16
  pHandle->_Super.Sector = SECTOR_4;
 80088b0:	f04f 0c03 	mov.w	ip, #3
 80088b4:	f880 c03a 	strb.w	ip, [r0, #58]	; 0x3a
  pHandle->_Super.CntPhA = ( uint16_t )( val );
 80088b8:	8641      	strh	r1, [r0, #50]	; 0x32
  WRITE_REG(TIMx->CCR1, CompareValue);
 80088ba:	6351      	str	r1, [r2, #52]	; 0x34
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 80088bc:	6a12      	ldr	r2, [r2, #32]
  if (pHandle->_Super.SWerror == 1u)
 80088be:	2b01      	cmp	r3, #1
    hAux = MC_FOC_DURATION;
 80088c0:	bf12      	itee	ne
 80088c2:	f3c2 3300 	ubfxne	r3, r2, #12, #1
    pHandle->_Super.SWerror = 0u;
 80088c6:	2200      	moveq	r2, #0
 80088c8:	8702      	strheq	r2, [r0, #56]	; 0x38
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	4770      	bx	lr
 80088ce:	bf00      	nop

080088d0 <RVBS_Clear>:
__weak void RVBS_Clear( RDivider_Handle_t * pHandle )
{
  uint16_t aux;
  uint16_t index;

  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 80088d0:	f8b0 c01a 	ldrh.w	ip, [r0, #26]
 80088d4:	8b82      	ldrh	r2, [r0, #28]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 80088d6:	8b03      	ldrh	r3, [r0, #24]
  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 80088d8:	4494      	add	ip, r2
{
 80088da:	b410      	push	{r4}
  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 80088dc:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 80088e0:	b14b      	cbz	r3, 80088f6 <RVBS_Clear+0x26>
  {
    pHandle->aBuffer[index] = aux;
 80088e2:	6a04      	ldr	r4, [r0, #32]
 80088e4:	2300      	movs	r3, #0
 80088e6:	b29a      	uxth	r2, r3
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 80088e8:	3301      	adds	r3, #1
    pHandle->aBuffer[index] = aux;
 80088ea:	f824 c012 	strh.w	ip, [r4, r2, lsl #1]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 80088ee:	8b01      	ldrh	r1, [r0, #24]
 80088f0:	b29a      	uxth	r2, r3
 80088f2:	4291      	cmp	r1, r2
 80088f4:	d8f7      	bhi.n	80088e6 <RVBS_Clear+0x16>
  }
  pHandle->_Super.LatestConv = aux;
 80088f6:	2300      	movs	r3, #0
 80088f8:	f36c 030f 	bfi	r3, ip, #0, #16
 80088fc:	f36c 431f 	bfi	r3, ip, #16, #16
  pHandle->_Super.AvBusVoltage_d = aux;
  pHandle->index = 0;
 8008900:	2200      	movs	r2, #0
}
 8008902:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->_Super.LatestConv = aux;
 8008906:	6043      	str	r3, [r0, #4]
  pHandle->index = 0;
 8008908:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
}
 800890c:	4770      	bx	lr
 800890e:	bf00      	nop

08008910 <RVBS_Init>:
{
 8008910:	b510      	push	{r4, lr}
 8008912:	4604      	mov	r4, r0
  pHandle->convHandle = RCM_RegisterRegConv(&pHandle->VbusRegConv);
 8008914:	300c      	adds	r0, #12
 8008916:	f7f9 fc19 	bl	800214c <RCM_RegisterRegConv>
 800891a:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
  RVBS_Clear( pHandle );
 800891e:	4620      	mov	r0, r4
 8008920:	f7ff ffd6 	bl	80088d0 <RVBS_Clear>
}
 8008924:	bd10      	pop	{r4, pc}
 8008926:	bf00      	nop

08008928 <RVBS_CheckFaultState>:
  */
__weak uint16_t RVBS_CheckFaultState( RDivider_Handle_t * pHandle )
{
  uint16_t fault;

  if ( pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold )
 8008928:	88c3      	ldrh	r3, [r0, #6]
 800892a:	8b42      	ldrh	r2, [r0, #26]
 800892c:	429a      	cmp	r2, r3
 800892e:	d305      	bcc.n	800893c <RVBS_CheckFaultState+0x14>
  {
    fault = MC_OVER_VOLT;
  }
  else if ( pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold )
 8008930:	8b80      	ldrh	r0, [r0, #28]
  {
    fault = MC_UNDER_VOLT;
  }
  else
  {
    fault = MC_NO_ERROR;
 8008932:	4298      	cmp	r0, r3
 8008934:	bf8c      	ite	hi
 8008936:	2004      	movhi	r0, #4
 8008938:	2000      	movls	r0, #0
 800893a:	4770      	bx	lr
    fault = MC_OVER_VOLT;
 800893c:	2002      	movs	r0, #2
  }
  return fault;
}
 800893e:	4770      	bx	lr

08008940 <RVBS_CalcAvVbus>:
{
 8008940:	b570      	push	{r4, r5, r6, lr}
 8008942:	4604      	mov	r4, r0
  hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8008944:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 8008948:	f7f9 fcdc 	bl	8002304 <RCM_ExecRegularConv>
  if ( hAux != 0xFFFF )
 800894c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008950:	4298      	cmp	r0, r3
 8008952:	d01b      	beq.n	800898c <RVBS_CalcAvVbus+0x4c>
    pHandle->aBuffer[pHandle->index] = hAux;
 8008954:	6a26      	ldr	r6, [r4, #32]
 8008956:	f894 e025 	ldrb.w	lr, [r4, #37]	; 0x25
 800895a:	f826 001e 	strh.w	r0, [r6, lr, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 800895e:	8b25      	ldrh	r5, [r4, #24]
 8008960:	b1cd      	cbz	r5, 8008996 <RVBS_CalcAvVbus+0x56>
 8008962:	2300      	movs	r3, #0
    wtemp = 0;
 8008964:	461a      	mov	r2, r3
      wtemp += pHandle->aBuffer[i];
 8008966:	f836 c013 	ldrh.w	ip, [r6, r3, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 800896a:	3301      	adds	r3, #1
 800896c:	b2d9      	uxtb	r1, r3
 800896e:	42a9      	cmp	r1, r5
      wtemp += pHandle->aBuffer[i];
 8008970:	4462      	add	r2, ip
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8008972:	460b      	mov	r3, r1
 8008974:	d3f7      	bcc.n	8008966 <RVBS_CalcAvVbus+0x26>
    wtemp /= pHandle->LowPassFilterBW;
 8008976:	fbb2 f2f5 	udiv	r2, r2, r5
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 800897a:	1e6b      	subs	r3, r5, #1
 800897c:	459e      	cmp	lr, r3
    pHandle->_Super.LatestConv = hAux;
 800897e:	80a0      	strh	r0, [r4, #4]
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 8008980:	80e2      	strh	r2, [r4, #6]
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 8008982:	da0a      	bge.n	800899a <RVBS_CalcAvVbus+0x5a>
      pHandle->index++;
 8008984:	f10e 0e01 	add.w	lr, lr, #1
 8008988:	f884 e025 	strb.w	lr, [r4, #37]	; 0x25
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 800898c:	4620      	mov	r0, r4
 800898e:	f7ff ffcb 	bl	8008928 <RVBS_CheckFaultState>
 8008992:	8120      	strh	r0, [r4, #8]
}
 8008994:	bd70      	pop	{r4, r5, r6, pc}
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 8008996:	80e5      	strh	r5, [r4, #6]
    pHandle->_Super.LatestConv = hAux;
 8008998:	80a0      	strh	r0, [r4, #4]
      pHandle->index = 0;
 800899a:	2300      	movs	r3, #0
 800899c:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 80089a0:	4620      	mov	r0, r4
 80089a2:	f7ff ffc1 	bl	8008928 <RVBS_CheckFaultState>
 80089a6:	8120      	strh	r0, [r4, #8]
}
 80089a8:	bd70      	pop	{r4, r5, r6, pc}
 80089aa:	bf00      	nop

080089ac <REMNG_Init>:
  * @param  pHandle related Handle of struct RampMngr_Handle_t
  * @retval none.
  */
void REMNG_Init( RampExtMngr_Handle_t * pHandle )
{
  pHandle->Ext = 0;
 80089ac:	2300      	movs	r3, #0
  pHandle->TargetFinal = 0;
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
  pHandle->ScalingFactor = 1u;
 80089ae:	2201      	movs	r2, #1
  pHandle->TargetFinal = 0;
 80089b0:	e9c0 3301 	strd	r3, r3, [r0, #4]
  pHandle->IncDecAmount = 0;
 80089b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
  pHandle->ScalingFactor = 1u;
 80089b8:	6142      	str	r2, [r0, #20]

#ifdef FASTDIV
  FD_Init( & ( pHandle->fd ) );
#endif

}
 80089ba:	4770      	bx	lr

080089bc <RUC_SetPhaseDurationms>:
  *         This parameter must be set in millisecond.
  *  @retval none
  */
__weak void RUC_SetPhaseDurationms( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase, uint16_t hDurationms )
{
  pHandle->ParamsData[bPhase].hDurationms = hDurationms;
 80089bc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80089c0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80089c4:	818a      	strh	r2, [r1, #12]
}
 80089c6:	4770      	bx	lr

080089c8 <RUC_SetPhaseFinalMecSpeedUnit>:
  *  @retval none
  */
__weak void RUC_SetPhaseFinalMecSpeedUnit( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase,
                                    int16_t hFinalMecSpeedUnit )
{
  pHandle->ParamsData[bPhase].hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 80089c8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80089cc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80089d0:	81ca      	strh	r2, [r1, #14]
}
 80089d2:	4770      	bx	lr

080089d4 <RUC_SetPhaseFinalTorque>:
  * @param  hFinalTorque: new targetted motor torque.
  *  @retval none
  */
__weak void RUC_SetPhaseFinalTorque( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase, int16_t hFinalTorque )
{
  pHandle->ParamsData[bPhase].hFinalTorque = hFinalTorque;
 80089d4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80089d8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80089dc:	820a      	strh	r2, [r1, #16]
}
 80089de:	4770      	bx	lr

080089e0 <RUC_GetPhaseDurationms>:
  *         This parameter must be a number between 0 and 6.
  *  @retval Returns duration used in selected phase.
  */
__weak uint16_t RUC_GetPhaseDurationms( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase )
{
  return ( ( uint16_t )pHandle->ParamsData[bPhase].hDurationms );
 80089e0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80089e4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
}
 80089e8:	8988      	ldrh	r0, [r1, #12]
 80089ea:	4770      	bx	lr

080089ec <RUC_GetPhaseFinalMecSpeedUnit>:
  *         This parameter must be a number between 0 and 6.
  *  @retval Returns targetted rotor speed set in selected phase.
  */
__weak int16_t RUC_GetPhaseFinalMecSpeedUnit( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase )
{
  return ( ( int16_t )pHandle->ParamsData[bPhase].hFinalMecSpeedUnit );
 80089ec:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80089f0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
}
 80089f4:	f9b1 000e 	ldrsh.w	r0, [r1, #14]
 80089f8:	4770      	bx	lr
 80089fa:	bf00      	nop

080089fc <RUC_GetPhaseFinalTorque>:
  *         This parameter must be a number between 0 and 6.
  *  @retval Returns targetted motor torque set in selected phase.
  */
__weak int16_t RUC_GetPhaseFinalTorque( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase )
{
  return ( ( int16_t )pHandle->ParamsData[bPhase].hFinalTorque );
 80089fc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8008a00:	eb00 0181 	add.w	r1, r0, r1, lsl #2
}
 8008a04:	f9b1 0010 	ldrsh.w	r0, [r1, #16]
 8008a08:	4770      	bx	lr
 8008a0a:	bf00      	nop

08008a0c <RUC_GetNumberOfPhases>:
  *  @retval Returns number of phases relative to the programmed revup.
  */
__weak uint8_t RUC_GetNumberOfPhases( RevUpCtrl_Handle_t * pHandle )
{
  return ( ( uint8_t )pHandle->bPhaseNbr );
}
 8008a0c:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8008a10:	4770      	bx	lr
 8008a12:	bf00      	nop

08008a14 <SPD_GetElAngle>:
  * @retval int16_t rotor electrical angle (s16degrees)
  */
__weak int16_t SPD_GetElAngle( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hElAngle );
}
 8008a14:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8008a18:	4770      	bx	lr
 8008a1a:	bf00      	nop

08008a1c <SPD_GetAvrgMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  */
__weak int16_t SPD_GetAvrgMecSpeedUnit( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hAvrMecSpeedUnit );
}
 8008a1c:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 8008a20:	4770      	bx	lr
 8008a22:	bf00      	nop

08008a24 <SPD_GetInstElSpeedDpp>:
  * @retval int16_t rotor instantaneous electrical speed (Dpp)
  */
__weak int16_t SPD_GetInstElSpeedDpp( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->InstantaneousElSpeedDpp );
}
 8008a24:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 8008a28:	4770      	bx	lr
 8008a2a:	bf00      	nop

08008a2c <SPD_IsMecSpeedReliable>:
  int16_t hAux;

  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

  /* Compute absoulte value of mechanical speed */
  if ( *pMecSpeedUnit < 0 )
 8008a2c:	f9b1 3000 	ldrsh.w	r3, [r1]
  else
  {
    hAbsMecSpeedUnit = ( uint16_t )( *pMecSpeedUnit );
  }

  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 8008a30:	8a81      	ldrh	r1, [r0, #20]
{
 8008a32:	b500      	push	{lr}
  if ( *pMecSpeedUnit < 0 )
 8008a34:	2b00      	cmp	r3, #0
    hAux = -( *pMecSpeedUnit );
 8008a36:	bfb8      	it	lt
 8008a38:	425b      	neglt	r3, r3
  {
    SpeedError = true;
  }

  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 8008a3a:	f8b0 e016 	ldrh.w	lr, [r0, #22]
  uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 8008a3e:	f890 c003 	ldrb.w	ip, [r0, #3]
  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 8008a42:	7802      	ldrb	r2, [r0, #0]
    hAbsMecSpeedUnit = ( uint16_t )( *pMecSpeedUnit );
 8008a44:	b29b      	uxth	r3, r3
  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 8008a46:	459e      	cmp	lr, r3
 8008a48:	d819      	bhi.n	8008a7e <SPD_IsMecSpeedReliable+0x52>
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 8008a4a:	4299      	cmp	r1, r3
 8008a4c:	bf2c      	ite	cs
 8008a4e:	2300      	movcs	r3, #0
 8008a50:	2301      	movcc	r3, #1
  {
    SpeedError = true;
  }

  /* Compute absoulte value of mechanical acceleration */
  if ( pHandle->hMecAccelUnitP < 0 )
 8008a52:	f9b0 1012 	ldrsh.w	r1, [r0, #18]
  else
  {
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
  }

  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 8008a56:	f8b0 e018 	ldrh.w	lr, [r0, #24]
  if ( pHandle->hMecAccelUnitP < 0 )
 8008a5a:	2900      	cmp	r1, #0
    hAux = -( pHandle->hMecAccelUnitP );
 8008a5c:	bfb8      	it	lt
 8008a5e:	4249      	neglt	r1, r1
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
 8008a60:	b289      	uxth	r1, r1
  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 8008a62:	458e      	cmp	lr, r1
 8008a64:	d300      	bcc.n	8008a68 <SPD_IsMecSpeedReliable+0x3c>
  {
    SpeedError = true;
  }

  if ( SpeedError == true )
 8008a66:	b163      	cbz	r3, 8008a82 <SPD_IsMecSpeedReliable+0x56>
  {
    if ( bSpeedErrorNumber < bMaximumSpeedErrorsNumber )
 8008a68:	4594      	cmp	ip, r2
 8008a6a:	d901      	bls.n	8008a70 <SPD_IsMecSpeedReliable+0x44>
    {
      bSpeedErrorNumber++;
 8008a6c:	3201      	adds	r2, #1
 8008a6e:	b2d2      	uxtb	r2, r2
  if ( bSpeedErrorNumber == bMaximumSpeedErrorsNumber )
  {
    SpeedSensorReliability = false;
  }

  pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8008a70:	7002      	strb	r2, [r0, #0]

  return ( SpeedSensorReliability );
}
 8008a72:	ebb2 000c 	subs.w	r0, r2, ip
 8008a76:	bf18      	it	ne
 8008a78:	2001      	movne	r0, #1
 8008a7a:	f85d fb04 	ldr.w	pc, [sp], #4
    SpeedError = true;
 8008a7e:	2301      	movs	r3, #1
 8008a80:	e7e7      	b.n	8008a52 <SPD_IsMecSpeedReliable+0x26>
      bSpeedErrorNumber = 0u;
 8008a82:	4594      	cmp	ip, r2
 8008a84:	bf88      	it	hi
 8008a86:	2200      	movhi	r2, #0
  pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8008a88:	7002      	strb	r2, [r0, #0]
}
 8008a8a:	ebb2 000c 	subs.w	r0, r2, ip
 8008a8e:	bf18      	it	ne
 8008a90:	2001      	movne	r0, #1
 8008a92:	f85d fb04 	ldr.w	pc, [sp], #4
 8008a96:	bf00      	nop

08008a98 <SPD_GetS16Speed>:
  * @retval int16_t The average mechanical rotor speed expressed in "S16Speed".
  */
__weak int16_t SPD_GetS16Speed( SpeednPosFdbk_Handle_t * pHandle )
{
  int32_t wAux = ( int32_t ) pHandle->hAvrMecSpeedUnit;
  wAux *= INT16_MAX;
 8008a98:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 8008a9c:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
  wAux *= INT16_MAX;
 8008aa0:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 8008aa4:	fb93 f0f0 	sdiv	r0, r3, r0
  return ( int16_t )wAux;
}
 8008aa8:	b200      	sxth	r0, r0
 8008aaa:	4770      	bx	lr

08008aac <STC_Init>:
{

  pHandle->PISpeed = pPI;
  pHandle->SPD = SPD_Handle;
  pHandle->Mode = pHandle->ModeDefault;
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 8008aac:	f9b0 c02c 	ldrsh.w	ip, [r0, #44]	; 0x2c
  pHandle->PISpeed = pPI;
 8008ab0:	6101      	str	r1, [r0, #16]
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 8008ab2:	f9b0 102e 	ldrsh.w	r1, [r0, #46]	; 0x2e
  pHandle->SPD = SPD_Handle;
 8008ab6:	6142      	str	r2, [r0, #20]
{
 8008ab8:	b410      	push	{r4}
  pHandle->Mode = pHandle->ModeDefault;
 8008aba:	f890 402a 	ldrb.w	r4, [r0, #42]	; 0x2a
 8008abe:	7004      	strb	r4, [r0, #0]
  pHandle->TargetFinal = 0;
 8008ac0:	2300      	movs	r3, #0
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 8008ac2:	ea4f 440c 	mov.w	r4, ip, lsl #16
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 8008ac6:	0409      	lsls	r1, r1, #16
 8008ac8:	e9c0 4101 	strd	r4, r1, [r0, #4]
  pHandle->TargetFinal = 0;
 8008acc:	8043      	strh	r3, [r0, #2]
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
}
 8008ace:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->RampRemainingStep = 0u;
 8008ad2:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 8008ad4:	6183      	str	r3, [r0, #24]
}
 8008ad6:	4770      	bx	lr

08008ad8 <STC_GetSpeedSensor>:
  * @retval SpeednPosFdbk_Handle_t speed sensor utilized by the FOC.
  */
__weak SpeednPosFdbk_Handle_t * STC_GetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( pHandle->SPD );
}
 8008ad8:	6940      	ldr	r0, [r0, #20]
 8008ada:	4770      	bx	lr

08008adc <STC_Clear>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none.
  */
__weak void STC_Clear( SpeednTorqCtrl_Handle_t * pHandle )
{
  if ( pHandle->Mode == STC_SPEED_MODE )
 8008adc:	7803      	ldrb	r3, [r0, #0]
 8008ade:	2b01      	cmp	r3, #1
 8008ae0:	d000      	beq.n	8008ae4 <STC_Clear+0x8>
  {
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
  }
}
 8008ae2:	4770      	bx	lr
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
 8008ae4:	6900      	ldr	r0, [r0, #16]
 8008ae6:	2100      	movs	r1, #0
 8008ae8:	f7fe bfc6 	b.w	8007a78 <PID_SetIntegralTerm>

08008aec <STC_GetMecSpeedRefUnit>:
  * @retval int16_t current mechanical rotor speed reference expressed in tenths
  *         of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->SpeedRefUnitExt / 65536 ) );
 8008aec:	6840      	ldr	r0, [r0, #4]
 8008aee:	2800      	cmp	r0, #0
 8008af0:	bfbc      	itt	lt
 8008af2:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 8008af6:	30ff      	addlt	r0, #255	; 0xff
}
 8008af8:	1400      	asrs	r0, r0, #16
 8008afa:	4770      	bx	lr

08008afc <STC_GetTorqueRef>:
  * @retval int16_t current motor torque reference. This value represents
  *         actually the Iq current expressed in digit.
  */
__weak int16_t STC_GetTorqueRef( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->TorqueRef / 65536 ) );
 8008afc:	6880      	ldr	r0, [r0, #8]
 8008afe:	2800      	cmp	r0, #0
 8008b00:	bfbc      	itt	lt
 8008b02:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 8008b06:	30ff      	addlt	r0, #255	; 0xff
}
 8008b08:	1400      	asrs	r0, r0, #16
 8008b0a:	4770      	bx	lr

08008b0c <STC_SetControlMode>:
  * @retval none
  */
__weak void STC_SetControlMode( SpeednTorqCtrl_Handle_t * pHandle, STC_Modality_t bMode )
{
  pHandle->Mode = bMode;
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8008b0c:	2300      	movs	r3, #0
  pHandle->Mode = bMode;
 8008b0e:	7001      	strb	r1, [r0, #0]
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8008b10:	60c3      	str	r3, [r0, #12]
}
 8008b12:	4770      	bx	lr

08008b14 <STC_ExecRamp>:
  *         application torque or below min application speed depending on
  *         current modality of TSC) in this case the command is ignored and the
  *         previous ramp is not interrupted, otherwise it returns true.
  */
__weak bool STC_ExecRamp( SpeednTorqCtrl_Handle_t * pHandle, int16_t hTargetFinal, uint32_t hDurationms )
{
 8008b14:	b570      	push	{r4, r5, r6, lr}
  uint32_t wAux;
  int32_t wAux1;
  int16_t hCurrentReference;

  /* Check if the hTargetFinal is out of the bound of application. */
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8008b16:	7803      	ldrb	r3, [r0, #0]
{
 8008b18:	4604      	mov	r4, r0
 8008b1a:	460d      	mov	r5, r1
 8008b1c:	4616      	mov	r6, r2
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8008b1e:	b323      	cbz	r3, 8008b6a <STC_ExecRamp+0x56>
    }
#endif
  }
  else
  {
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8008b20:	6840      	ldr	r0, [r0, #4]

#ifdef CHECK_BOUNDARY
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8008b22:	8be3      	ldrh	r3, [r4, #30]
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8008b24:	2800      	cmp	r0, #0
 8008b26:	bfbc      	itt	lt
 8008b28:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 8008b2c:	30ff      	addlt	r0, #255	; 0xff
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8008b2e:	4299      	cmp	r1, r3
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8008b30:	ea4f 4020 	mov.w	r0, r0, asr #16
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8008b34:	dd01      	ble.n	8008b3a <STC_ExecRamp+0x26>
      AllowedRange = false;
 8008b36:	2000      	movs	r0, #0
      pHandle->IncDecAmount = wAux1;
    }
  }

  return AllowedRange;
}
 8008b38:	bd70      	pop	{r4, r5, r6, pc}
    else if ( hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit )
 8008b3a:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
 8008b3e:	428b      	cmp	r3, r1
 8008b40:	dcf9      	bgt.n	8008b36 <STC_ExecRamp+0x22>
    else if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinAppPositiveMecSpeedUnit )
 8008b42:	8c23      	ldrh	r3, [r4, #32]
 8008b44:	4299      	cmp	r1, r3
 8008b46:	da03      	bge.n	8008b50 <STC_ExecRamp+0x3c>
      if ( hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit )
 8008b48:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
 8008b4c:	428b      	cmp	r3, r1
 8008b4e:	dbf2      	blt.n	8008b36 <STC_ExecRamp+0x22>
    if ( hDurationms == 0u )
 8008b50:	b9ae      	cbnz	r6, 8008b7e <STC_ExecRamp+0x6a>
      if ( pHandle->Mode == STC_SPEED_MODE )
 8008b52:	7823      	ldrb	r3, [r4, #0]
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 8008b54:	042d      	lsls	r5, r5, #16
      if ( pHandle->Mode == STC_SPEED_MODE )
 8008b56:	2b01      	cmp	r3, #1
      pHandle->RampRemainingStep = 0u;
 8008b58:	f04f 0300 	mov.w	r3, #0
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 8008b5c:	bf0c      	ite	eq
 8008b5e:	6065      	streq	r5, [r4, #4]
        pHandle->TorqueRef = ( int32_t )hTargetFinal * 65536;
 8008b60:	60a5      	strne	r5, [r4, #8]
      pHandle->RampRemainingStep = 0u;
 8008b62:	60e3      	str	r3, [r4, #12]
      pHandle->IncDecAmount = 0;
 8008b64:	61a3      	str	r3, [r4, #24]
 8008b66:	2001      	movs	r0, #1
}
 8008b68:	bd70      	pop	{r4, r5, r6, pc}
    hCurrentReference = STC_GetTorqueRef( pHandle );
 8008b6a:	f7ff ffc7 	bl	8008afc <STC_GetTorqueRef>
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxPositiveTorque )
 8008b6e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8008b70:	429d      	cmp	r5, r3
 8008b72:	dce0      	bgt.n	8008b36 <STC_ExecRamp+0x22>
    if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinNegativeTorque )
 8008b74:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 8008b78:	42ab      	cmp	r3, r5
 8008b7a:	dcdc      	bgt.n	8008b36 <STC_ExecRamp+0x22>
 8008b7c:	e7e8      	b.n	8008b50 <STC_ExecRamp+0x3c>
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 8008b7e:	8ba3      	ldrh	r3, [r4, #28]
      pHandle->TargetFinal = hTargetFinal;
 8008b80:	8065      	strh	r5, [r4, #2]
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 8008b82:	fb06 f303 	mul.w	r3, r6, r3
      wAux /= 1000u;
 8008b86:	4e06      	ldr	r6, [pc, #24]	; (8008ba0 <STC_ExecRamp+0x8c>)
 8008b88:	fba6 2303 	umull	r2, r3, r6, r3
 8008b8c:	099b      	lsrs	r3, r3, #6
      pHandle->RampRemainingStep++;
 8008b8e:	3301      	adds	r3, #1
      wAux1 = ( ( int32_t )hTargetFinal - ( int32_t )hCurrentReference ) * 65536;
 8008b90:	1a28      	subs	r0, r5, r0
 8008b92:	0400      	lsls	r0, r0, #16
      pHandle->RampRemainingStep++;
 8008b94:	60e3      	str	r3, [r4, #12]
      wAux1 /= ( int32_t )pHandle->RampRemainingStep;
 8008b96:	fb90 f0f3 	sdiv	r0, r0, r3
      pHandle->IncDecAmount = wAux1;
 8008b9a:	61a0      	str	r0, [r4, #24]
 8008b9c:	2001      	movs	r0, #1
}
 8008b9e:	bd70      	pop	{r4, r5, r6, pc}
 8008ba0:	10624dd3 	.word	0x10624dd3

08008ba4 <STC_StopRamp>:
  * @retval none
  */
__weak void STC_StopRamp( SpeednTorqCtrl_Handle_t * pHandle )
{

  pHandle->RampRemainingStep = 0u;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 8008ba8:	6183      	str	r3, [r0, #24]
}
 8008baa:	4770      	bx	lr

08008bac <STC_CalcTorqueReference>:
  *         To convert current expressed in Amps to current expressed in digit
  *         is possible to use the formula:
  *         Current(digit) = [Current(Amp) * 65536 * Rshunt * Aop]  /  Vdd micro
  */
__weak int16_t STC_CalcTorqueReference( SpeednTorqCtrl_Handle_t * pHandle )
{
 8008bac:	b570      	push	{r4, r5, r6, lr}
  int16_t hTargetSpeed;
  int16_t hError;

  if ( pHandle->Mode == STC_TORQUE_MODE )
  {
    wCurrentReference = pHandle->TorqueRef;
 8008bae:	e9d0 6101 	ldrd	r6, r1, [r0, #4]
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8008bb2:	7802      	ldrb	r2, [r0, #0]
    wCurrentReference = pHandle->SpeedRefUnitExt;
  }

  /* Update the speed reference or the torque reference according to the mode
     and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 8008bb4:	68c3      	ldr	r3, [r0, #12]
    wCurrentReference = pHandle->TorqueRef;
 8008bb6:	2a00      	cmp	r2, #0
 8008bb8:	bf08      	it	eq
 8008bba:	460e      	moveq	r6, r1
  if ( pHandle->RampRemainingStep > 1u )
 8008bbc:	2b01      	cmp	r3, #1
{
 8008bbe:	4604      	mov	r4, r0
  if ( pHandle->RampRemainingStep > 1u )
 8008bc0:	d90c      	bls.n	8008bdc <STC_CalcTorqueReference+0x30>
  {
    /* Increment/decrement the reference value. */
    wCurrentReference += pHandle->IncDecAmount;
 8008bc2:	6981      	ldr	r1, [r0, #24]
 8008bc4:	440e      	add	r6, r1

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep--;
 8008bc6:	3b01      	subs	r3, #1
  if ( pHandle->Mode == STC_SPEED_MODE )
  {
    /* Run the speed control loop */

    /* Compute speed error */
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 8008bc8:	2e00      	cmp	r6, #0
    pHandle->RampRemainingStep--;
 8008bca:	60c3      	str	r3, [r0, #12]
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 8008bcc:	4630      	mov	r0, r6
 8008bce:	db09      	blt.n	8008be4 <STC_CalcTorqueReference+0x38>
 8008bd0:	1405      	asrs	r5, r0, #16
  if ( pHandle->Mode == STC_SPEED_MODE )
 8008bd2:	2a01      	cmp	r2, #1
 8008bd4:	d00a      	beq.n	8008bec <STC_CalcTorqueReference+0x40>
    pHandle->SpeedRefUnitExt = wCurrentReference;
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
  }
  else
  {
    pHandle->TorqueRef = wCurrentReference;
 8008bd6:	60a6      	str	r6, [r4, #8]
    hTorqueReference = ( int16_t )( wCurrentReference / 65536 );
 8008bd8:	b228      	sxth	r0, r5
  }

  return hTorqueReference;
}
 8008bda:	bd70      	pop	{r4, r5, r6, pc}
  else if ( pHandle->RampRemainingStep == 1u )
 8008bdc:	d012      	beq.n	8008c04 <STC_CalcTorqueReference+0x58>
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 8008bde:	2e00      	cmp	r6, #0
 8008be0:	4630      	mov	r0, r6
 8008be2:	daf5      	bge.n	8008bd0 <STC_CalcTorqueReference+0x24>
 8008be4:	f506 407f 	add.w	r0, r6, #65280	; 0xff00
 8008be8:	30ff      	adds	r0, #255	; 0xff
 8008bea:	e7f1      	b.n	8008bd0 <STC_CalcTorqueReference+0x24>
    hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit( pHandle->SPD );
 8008bec:	6960      	ldr	r0, [r4, #20]
 8008bee:	f7ff ff15 	bl	8008a1c <SPD_GetAvrgMecSpeedUnit>
    hError = hTargetSpeed - hMeasuredSpeed;
 8008bf2:	1a29      	subs	r1, r5, r0
    hTorqueReference = PI_Controller( pHandle->PISpeed, ( int32_t )hError );
 8008bf4:	b209      	sxth	r1, r1
 8008bf6:	6920      	ldr	r0, [r4, #16]
 8008bf8:	f7fe ff4a 	bl	8007a90 <PI_Controller>
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
 8008bfc:	0403      	lsls	r3, r0, #16
 8008bfe:	e9c4 6301 	strd	r6, r3, [r4, #4]
}
 8008c02:	bd70      	pop	{r4, r5, r6, pc}
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 8008c04:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
    pHandle->RampRemainingStep = 0u;
 8008c08:	2300      	movs	r3, #0
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 8008c0a:	042e      	lsls	r6, r5, #16
    pHandle->RampRemainingStep = 0u;
 8008c0c:	60c3      	str	r3, [r0, #12]
 8008c0e:	e7e0      	b.n	8008bd2 <STC_CalcTorqueReference+0x26>

08008c10 <STC_GetMecSpeedRefUnitDefault>:
  *         expressed in tenths of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnitDefault( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MecSpeedRefUnitDefault;
}
 8008c10:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 8008c14:	4770      	bx	lr
 8008c16:	bf00      	nop

08008c18 <STC_GetMaxAppPositiveMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak uint16_t STC_GetMaxAppPositiveMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MaxAppPositiveMecSpeedUnit;
}
 8008c18:	8bc0      	ldrh	r0, [r0, #30]
 8008c1a:	4770      	bx	lr

08008c1c <STC_GetMinAppNegativeMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak int16_t STC_GetMinAppNegativeMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MinAppNegativeMecSpeedUnit;
}
 8008c1c:	f9b0 0024 	ldrsh.w	r0, [r0, #36]	; 0x24
 8008c20:	4770      	bx	lr
 8008c22:	bf00      	nop

08008c24 <STC_GetDefaultIqdref>:
  * @retval default values of Iqdref.
  */
__weak qd_t STC_GetDefaultIqdref( SpeednTorqCtrl_Handle_t * pHandle )
{
  qd_t IqdRefDefault;
  IqdRefDefault.q = pHandle->TorqueRefDefault;
 8008c24:	f8d0 302e 	ldr.w	r3, [r0, #46]	; 0x2e
  IqdRefDefault.d = pHandle->IdrefDefault;
  return IqdRefDefault;
 8008c28:	2200      	movs	r2, #0
 8008c2a:	b299      	uxth	r1, r3
 8008c2c:	f361 020f 	bfi	r2, r1, #0, #16
 8008c30:	0c1b      	lsrs	r3, r3, #16
 8008c32:	f363 421f 	bfi	r2, r3, #16, #16
{
 8008c36:	b082      	sub	sp, #8
}
 8008c38:	4610      	mov	r0, r2
 8008c3a:	b002      	add	sp, #8
 8008c3c:	4770      	bx	lr
 8008c3e:	bf00      	nop

08008c40 <STC_ForceSpeedReferenceToCurrentSpeed>:
  *         at the START_RUN state to initialize the speed reference.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed( SpeednTorqCtrl_Handle_t * pHandle )
{
 8008c40:	b510      	push	{r4, lr}
 8008c42:	4604      	mov	r4, r0
  pHandle->SpeedRefUnitExt = ( int32_t )SPD_GetAvrgMecSpeedUnit( pHandle->SPD ) * ( int32_t )65536;
 8008c44:	6940      	ldr	r0, [r0, #20]
 8008c46:	f7ff fee9 	bl	8008a1c <SPD_GetAvrgMecSpeedUnit>
 8008c4a:	0400      	lsls	r0, r0, #16
 8008c4c:	6060      	str	r0, [r4, #4]
}
 8008c4e:	bd10      	pop	{r4, pc}

08008c50 <STM_Init>:
  * @retval none.
  */
__weak void STM_Init( STM_Handle_t * pHandle )
{

  pHandle->bState = IDLE;
 8008c50:	2300      	movs	r3, #0
 8008c52:	7003      	strb	r3, [r0, #0]
  pHandle->hFaultNow = MC_NO_FAULTS;
 8008c54:	f8c0 3002 	str.w	r3, [r0, #2]
  pHandle->hFaultOccurred = MC_NO_FAULTS;
}
 8008c58:	4770      	bx	lr
 8008c5a:	bf00      	nop

08008c5c <STM_FaultProcessing>:
                             hResetErrors )
{
  State_t LocalState =  pHandle->bState;

  /* Set current errors */
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8008c5c:	8843      	ldrh	r3, [r0, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 8008c5e:	f8b0 c004 	ldrh.w	ip, [r0, #4]
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8008c62:	430b      	orrs	r3, r1
 8008c64:	ea23 0202 	bic.w	r2, r3, r2
  State_t LocalState =  pHandle->bState;
 8008c68:	7803      	ldrb	r3, [r0, #0]
  pHandle->hFaultOccurred |= hSetErrors;
 8008c6a:	ea41 010c 	orr.w	r1, r1, ip
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8008c6e:	b292      	uxth	r2, r2

  if ( LocalState == FAULT_NOW )
 8008c70:	2b0a      	cmp	r3, #10
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8008c72:	8042      	strh	r2, [r0, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 8008c74:	8081      	strh	r1, [r0, #4]
  if ( LocalState == FAULT_NOW )
 8008c76:	d006      	beq.n	8008c86 <STM_FaultProcessing+0x2a>
      LocalState = FAULT_OVER;
    }
  }
  else
  {
    if ( pHandle->hFaultNow != MC_NO_FAULTS )
 8008c78:	b90a      	cbnz	r2, 8008c7e <STM_FaultProcessing+0x22>
      LocalState = FAULT_NOW;
    }
  }

  return ( LocalState );
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	4770      	bx	lr
      pHandle->bState = FAULT_NOW;
 8008c7e:	230a      	movs	r3, #10
 8008c80:	7003      	strb	r3, [r0, #0]
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	4770      	bx	lr
    if ( pHandle->hFaultNow == MC_NO_FAULTS )
 8008c86:	2a00      	cmp	r2, #0
 8008c88:	d1f7      	bne.n	8008c7a <STM_FaultProcessing+0x1e>
      pHandle->bState = FAULT_OVER;
 8008c8a:	230b      	movs	r3, #11
 8008c8c:	7003      	strb	r3, [r0, #0]
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	4770      	bx	lr
 8008c92:	bf00      	nop

08008c94 <STM_NextState>:
{
 8008c94:	b508      	push	{r3, lr}
  switch ( bCurrentState )
 8008c96:	7803      	ldrb	r3, [r0, #0]
 8008c98:	2b14      	cmp	r3, #20
 8008c9a:	d810      	bhi.n	8008cbe <STM_NextState+0x2a>
 8008c9c:	e8df f003 	tbb	[pc, r3]
 8008ca0:	200d3457 	.word	0x200d3457
 8008ca4:	500d532a 	.word	0x500d532a
 8008ca8:	0f0f484d 	.word	0x0f0f484d
 8008cac:	455e0b1b 	.word	0x455e0b1b
 8008cb0:	3b3f6342 	.word	0x3b3f6342
 8008cb4:	31          	.byte	0x31
 8008cb5:	00          	.byte	0x00
      if ( ( bState == ALIGN_OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 8008cb6:	290e      	cmp	r1, #14
 8008cb8:	d00f      	beq.n	8008cda <STM_NextState+0x46>
      if ( bState == ANY_STOP )
 8008cba:	2907      	cmp	r1, #7
 8008cbc:	d00d      	beq.n	8008cda <STM_NextState+0x46>
      if ( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8008cbe:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8008cc2:	2b01      	cmp	r3, #1
 8008cc4:	d014      	beq.n	8008cf0 <STM_NextState+0x5c>
 8008cc6:	2907      	cmp	r1, #7
 8008cc8:	d012      	beq.n	8008cf0 <STM_NextState+0x5c>
      STM_FaultProcessing( pHandle, MC_SW_ERROR, 0u );
 8008cca:	2200      	movs	r2, #0
 8008ccc:	2180      	movs	r1, #128	; 0x80
 8008cce:	f7ff ffc5 	bl	8008c5c <STM_FaultProcessing>
 8008cd2:	2000      	movs	r0, #0
}
 8008cd4:	bd08      	pop	{r3, pc}
      if ( bState == IDLE )
 8008cd6:	2900      	cmp	r1, #0
 8008cd8:	d1f1      	bne.n	8008cbe <STM_NextState+0x2a>
    pHandle->bState = bNewState;
 8008cda:	7001      	strb	r1, [r0, #0]
 8008cdc:	2001      	movs	r0, #1
}
 8008cde:	bd08      	pop	{r3, pc}
           ( bState == OFFSET_CALIB ) || ( bState == IDLE_ALIGNMENT ) )
 8008ce0:	2911      	cmp	r1, #17
 8008ce2:	d8f2      	bhi.n	8008cca <STM_NextState+0x36>
 8008ce4:	4b23      	ldr	r3, [pc, #140]	; (8008d74 <STM_NextState+0xe0>)
 8008ce6:	40cb      	lsrs	r3, r1
 8008ce8:	07da      	lsls	r2, r3, #31
 8008cea:	d4f6      	bmi.n	8008cda <STM_NextState+0x46>
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8008cec:	2903      	cmp	r1, #3
 8008cee:	d1ec      	bne.n	8008cca <STM_NextState+0x36>
 8008cf0:	2000      	movs	r0, #0
}
 8008cf2:	bd08      	pop	{r3, pc}
      if ( ( bState == SWITCH_OVER ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 8008cf4:	2913      	cmp	r1, #19
 8008cf6:	d0f0      	beq.n	8008cda <STM_NextState+0x46>
 8008cf8:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 8008cfc:	2b05      	cmp	r3, #5
 8008cfe:	d1e0      	bne.n	8008cc2 <STM_NextState+0x2e>
 8008d00:	e7eb      	b.n	8008cda <STM_NextState+0x46>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) )
 8008d02:	2912      	cmp	r1, #18
 8008d04:	d1d9      	bne.n	8008cba <STM_NextState+0x26>
 8008d06:	e7e8      	b.n	8008cda <STM_NextState+0x46>
      if ( ( bState == ANY_STOP ) || ( bState == ALIGN_CHARGE_BOOT_CAP )
 8008d08:	2907      	cmp	r1, #7
 8008d0a:	d0e6      	beq.n	8008cda <STM_NextState+0x46>
 8008d0c:	f1a1 030d 	sub.w	r3, r1, #13
 8008d10:	2b01      	cmp	r3, #1
 8008d12:	d8d4      	bhi.n	8008cbe <STM_NextState+0x2a>
 8008d14:	e7e1      	b.n	8008cda <STM_NextState+0x46>
      if ( ( bState == START ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 8008d16:	1f0b      	subs	r3, r1, #4
 8008d18:	2b01      	cmp	r3, #1
 8008d1a:	d8ce      	bhi.n	8008cba <STM_NextState+0x26>
 8008d1c:	e7dd      	b.n	8008cda <STM_NextState+0x46>
      if ( ( bState == START ) || ( bState == ANY_STOP ) )
 8008d1e:	2904      	cmp	r1, #4
 8008d20:	d1cb      	bne.n	8008cba <STM_NextState+0x26>
 8008d22:	e7da      	b.n	8008cda <STM_NextState+0x46>
      if ( ( bState == OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 8008d24:	2911      	cmp	r1, #17
 8008d26:	d1c8      	bne.n	8008cba <STM_NextState+0x26>
 8008d28:	e7d7      	b.n	8008cda <STM_NextState+0x46>
      if ( ( bState == ALIGNMENT ) || ( bState == ANY_STOP ) )
 8008d2a:	2902      	cmp	r1, #2
 8008d2c:	d1c5      	bne.n	8008cba <STM_NextState+0x26>
 8008d2e:	e7d4      	b.n	8008cda <STM_NextState+0x46>
      if ( ( bState == IDLE ) || ( bState == ICLWAIT ) )
 8008d30:	2900      	cmp	r1, #0
 8008d32:	d0d2      	beq.n	8008cda <STM_NextState+0x46>
 8008d34:	290c      	cmp	r1, #12
 8008d36:	d1c2      	bne.n	8008cbe <STM_NextState+0x2a>
 8008d38:	e7cf      	b.n	8008cda <STM_NextState+0x46>
      if ( bState == STOP_IDLE )
 8008d3a:	2909      	cmp	r1, #9
 8008d3c:	d1bf      	bne.n	8008cbe <STM_NextState+0x2a>
 8008d3e:	e7cc      	b.n	8008cda <STM_NextState+0x46>
      if ( bState == STOP )
 8008d40:	2908      	cmp	r1, #8
 8008d42:	d1bc      	bne.n	8008cbe <STM_NextState+0x2a>
 8008d44:	e7c9      	b.n	8008cda <STM_NextState+0x46>
      if ( ( bState == RUN ) || ( bState == ANY_STOP ) )
 8008d46:	1f8b      	subs	r3, r1, #6
 8008d48:	2b01      	cmp	r3, #1
 8008d4a:	d8b8      	bhi.n	8008cbe <STM_NextState+0x2a>
 8008d4c:	e7c5      	b.n	8008cda <STM_NextState+0x46>
      if ( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8008d4e:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 8008d52:	2b01      	cmp	r3, #1
 8008d54:	d0c1      	beq.n	8008cda <STM_NextState+0x46>
           || ( bState == ICLWAIT ) )
 8008d56:	290c      	cmp	r1, #12
 8008d58:	d1b5      	bne.n	8008cc6 <STM_NextState+0x32>
 8008d5a:	e7be      	b.n	8008cda <STM_NextState+0x46>
      if ( ( bState == ALIGN_CLEAR ) || ( bState == ANY_STOP ) )
 8008d5c:	f001 03f7 	and.w	r3, r1, #247	; 0xf7
 8008d60:	2b07      	cmp	r3, #7
 8008d62:	d1ac      	bne.n	8008cbe <STM_NextState+0x2a>
 8008d64:	e7b9      	b.n	8008cda <STM_NextState+0x46>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) || ( bState == WAIT_STOP_MOTOR ) )
 8008d66:	2914      	cmp	r1, #20
 8008d68:	d8a9      	bhi.n	8008cbe <STM_NextState+0x2a>
 8008d6a:	4b03      	ldr	r3, [pc, #12]	; (8008d78 <STM_NextState+0xe4>)
 8008d6c:	40cb      	lsrs	r3, r1
 8008d6e:	07db      	lsls	r3, r3, #31
 8008d70:	d4b3      	bmi.n	8008cda <STM_NextState+0x46>
 8008d72:	e7a4      	b.n	8008cbe <STM_NextState+0x2a>
 8008d74:	00030092 	.word	0x00030092
 8008d78:	00140080 	.word	0x00140080

08008d7c <STM_GetState>:
  * @retval State_t Current state machine state
  */
__weak State_t STM_GetState( STM_Handle_t * pHandle )
{
  return ( pHandle->bState );
}
 8008d7c:	7800      	ldrb	r0, [r0, #0]
 8008d7e:	4770      	bx	lr

08008d80 <STM_FaultAcknowledged>:
  */
__weak bool STM_FaultAcknowledged( STM_Handle_t * pHandle )
{
  bool bToBeReturned = false;

  if ( pHandle->bState == FAULT_OVER )
 8008d80:	7803      	ldrb	r3, [r0, #0]
 8008d82:	2b0b      	cmp	r3, #11
 8008d84:	d001      	beq.n	8008d8a <STM_FaultAcknowledged+0xa>
  bool bToBeReturned = false;
 8008d86:	2000      	movs	r0, #0
    pHandle->hFaultOccurred = MC_NO_FAULTS;
    bToBeReturned = true;
  }

  return ( bToBeReturned );
}
 8008d88:	4770      	bx	lr
    pHandle->bState = STOP_IDLE;
 8008d8a:	2209      	movs	r2, #9
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 8008d8c:	2300      	movs	r3, #0
    pHandle->bState = STOP_IDLE;
 8008d8e:	7002      	strb	r2, [r0, #0]
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 8008d90:	8083      	strh	r3, [r0, #4]
    bToBeReturned = true;
 8008d92:	2001      	movs	r0, #1
 8008d94:	4770      	bx	lr
 8008d96:	bf00      	nop

08008d98 <STM_GetFaultState>:
  */
__weak uint32_t STM_GetFaultState( STM_Handle_t * pHandle )
{
  uint32_t LocalFaultState;

  LocalFaultState = ( uint32_t )( pHandle->hFaultOccurred );
 8008d98:	8883      	ldrh	r3, [r0, #4]
  LocalFaultState |= ( uint32_t )( pHandle->hFaultNow ) << 16;
 8008d9a:	8840      	ldrh	r0, [r0, #2]

  return LocalFaultState;
}
 8008d9c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8008da0:	4770      	bx	lr
 8008da2:	bf00      	nop

08008da4 <UFCP_Init>:

__weak void UFCP_Init( UFCP_Handle_t * pHandle )
{

  /* Initialize generic component part */
  FCP_Init( & pHandle->_Super );
 8008da4:	f7fe b9a4 	b.w	80070f0 <FCP_Init>

08008da8 <UFCP_TX_IRQ_Handler>:
 */
__weak void UFCP_TX_IRQ_Handler( UFCP_Handle_t * pHandle )
{
  FCP_Handle_t * pBaseHandle = & pHandle->_Super;

  if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState )
 8008da8:	f890 3097 	ldrb.w	r3, [r0, #151]	; 0x97
 8008dac:	b16b      	cbz	r3, 8008dca <UFCP_TX_IRQ_Handler+0x22>
  {
    uint16_t tx_data;

    switch ( pBaseHandle->TxFrameLevel )
 8008dae:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
 8008db2:	4602      	mov	r2, r0
 8008db4:	b1a3      	cbz	r3, 8008de0 <UFCP_TX_IRQ_Handler+0x38>
 8008db6:	2b01      	cmp	r3, #1
 8008db8:	d108      	bne.n	8008dcc <UFCP_TX_IRQ_Handler+0x24>
      case 0:
        tx_data = (uint16_t) pBaseHandle->TxFrame.Code;
        break;

      case 1:
        tx_data = (uint16_t) pBaseHandle->TxFrame.Size;
 8008dba:	7d41      	ldrb	r1, [r0, #21]
          tx_data = (uint16_t) pBaseHandle->TxFrame.FrameCRC;
        }
    } /* end of switch ( pBaseHandle->TxFrameLevel ) */

    /* Send the data byte */
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 8008dbc:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 8008dc0:	6041      	str	r1, [r0, #4]

    if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
    {
      pBaseHandle->TxFrameLevel++;
 8008dc2:	3301      	adds	r3, #1
 8008dc4:	f882 3098 	strb.w	r3, [r2, #152]	; 0x98
 8008dc8:	4770      	bx	lr
 8008dca:	4770      	bx	lr
        if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 8008dcc:	7d41      	ldrb	r1, [r0, #21]
 8008dce:	3101      	adds	r1, #1
 8008dd0:	428b      	cmp	r3, r1
 8008dd2:	dc07      	bgt.n	8008de4 <UFCP_TX_IRQ_Handler+0x3c>
          tx_data = (uint16_t) pBaseHandle->TxFrame.Buffer[ pBaseHandle->TxFrameLevel - FCP_HEADER_SIZE ];
 8008dd4:	18c1      	adds	r1, r0, r3
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 8008dd6:	f8d0 0120 	ldr.w	r0, [r0, #288]	; 0x120
 8008dda:	7d09      	ldrb	r1, [r1, #20]
 8008ddc:	6041      	str	r1, [r0, #4]
    if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 8008dde:	e7f0      	b.n	8008dc2 <UFCP_TX_IRQ_Handler+0x1a>
        tx_data = (uint16_t) pBaseHandle->TxFrame.Code;
 8008de0:	7d01      	ldrb	r1, [r0, #20]
        break;
 8008de2:	e7eb      	b.n	8008dbc <UFCP_TX_IRQ_Handler+0x14>
{
 8008de4:	b410      	push	{r4}
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 8008de6:	f8d0 1120 	ldr.w	r1, [r0, #288]	; 0x120
 8008dea:	f890 3096 	ldrb.w	r3, [r0, #150]	; 0x96
 8008dee:	604b      	str	r3, [r1, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8008df0:	310c      	adds	r1, #12
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008df2:	e851 3f00 	ldrex	r3, [r1]
 8008df6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dfa:	e841 3400 	strex	r4, r3, [r1]
 8008dfe:	2c00      	cmp	r4, #0
 8008e00:	d1f7      	bne.n	8008df2 <UFCP_TX_IRQ_Handler+0x4a>
    }
    else
    {
      LL_USART_DisableIT_TXE(pHandle->USARTx);
      pBaseHandle->TxFrameState = FCP_TRANSFER_IDLE;
 8008e02:	f882 4097 	strb.w	r4, [r2, #151]	; 0x97

      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 8008e06:	e9d2 0300 	ldrd	r0, r3, [r2]
    }

  } /* end of if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState ) */
}
 8008e0a:	f85d 4b04 	ldr.w	r4, [sp], #4
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 8008e0e:	4718      	bx	r3

08008e10 <UFCP_Receive>:

__weak uint8_t UFCP_Receive( FCP_Handle_t * pHandle )
{
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->RxFrameState )
 8008e10:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
 8008e14:	b97b      	cbnz	r3, 8008e36 <UFCP_Receive+0x26>
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8008e16:	f8d0 2120 	ldr.w	r2, [r0, #288]	; 0x120
  {
    UFCP_Handle_t * pActualHandle = (UFCP_Handle_t *) pHandle;

    pHandle->RxFrameLevel = 0;
    pHandle->RxFrameState = FCP_TRANSFER_ONGOING;
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	f8a0 311c 	strh.w	r3, [r0, #284]	; 0x11c
 8008e20:	320c      	adds	r2, #12
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e22:	e852 3f00 	ldrex	r3, [r2]
 8008e26:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e2a:	e842 3100 	strex	r1, r3, [r2]
 8008e2e:	2900      	cmp	r1, #0
 8008e30:	d1f7      	bne.n	8008e22 <UFCP_Receive+0x12>

    LL_USART_EnableIT_RXNE(pActualHandle->USARTx);
    ret_val = FCP_STATUS_WAITING_TRANSFER;
 8008e32:	2002      	movs	r0, #2
 8008e34:	4770      	bx	lr
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 8008e36:	2001      	movs	r0, #1
  }

  return ret_val;
}
 8008e38:	4770      	bx	lr
 8008e3a:	bf00      	nop

08008e3c <UFCP_Send>:

__weak uint8_t UFCP_Send( FCP_Handle_t * pHandle, uint8_t code, uint8_t *buffer, uint8_t size)
{
 8008e3c:	b570      	push	{r4, r5, r6, lr}
 8008e3e:	4604      	mov	r4, r0
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->TxFrameState )
 8008e40:	f890 0097 	ldrb.w	r0, [r0, #151]	; 0x97
 8008e44:	2800      	cmp	r0, #0
 8008e46:	d148      	bne.n	8008eda <UFCP_Send+0x9e>
    UFCP_Handle_t * pActualHandle = (UFCP_Handle_t *) pHandle;
    uint8_t *dest = pHandle->TxFrame.Buffer;

    pHandle->TxFrame.Code = code;
    pHandle->TxFrame.Size = size;
    while ( size-- ) *dest++ = *buffer++;
 8008e48:	1e58      	subs	r0, r3, #1
    uint8_t *dest = pHandle->TxFrame.Buffer;
 8008e4a:	f104 0616 	add.w	r6, r4, #22
    pHandle->TxFrame.Code = code;
 8008e4e:	7521      	strb	r1, [r4, #20]
    pHandle->TxFrame.Size = size;
 8008e50:	7563      	strb	r3, [r4, #21]
    while ( size-- ) *dest++ = *buffer++;
 8008e52:	b2c0      	uxtb	r0, r0
 8008e54:	b343      	cbz	r3, 8008ea8 <UFCP_Send+0x6c>
 8008e56:	1c51      	adds	r1, r2, #1
 8008e58:	1a75      	subs	r5, r6, r1
 8008e5a:	2d02      	cmp	r5, #2
 8008e5c:	d93f      	bls.n	8008ede <UFCP_Send+0xa2>
 8008e5e:	2807      	cmp	r0, #7
 8008e60:	d93d      	bls.n	8008ede <UFCP_Send+0xa2>
 8008e62:	089d      	lsrs	r5, r3, #2
 8008e64:	3d01      	subs	r5, #1
 8008e66:	b2e9      	uxtb	r1, r5
 8008e68:	1d15      	adds	r5, r2, #4
 8008e6a:	eb05 0581 	add.w	r5, r5, r1, lsl #2
 8008e6e:	46b4      	mov	ip, r6
 8008e70:	4611      	mov	r1, r2
 8008e72:	f851 eb04 	ldr.w	lr, [r1], #4
 8008e76:	f84c eb04 	str.w	lr, [ip], #4
 8008e7a:	42a9      	cmp	r1, r5
 8008e7c:	d1f9      	bne.n	8008e72 <UFCP_Send+0x36>
 8008e7e:	f003 01fc 	and.w	r1, r3, #252	; 0xfc
 8008e82:	1a40      	subs	r0, r0, r1
 8008e84:	428b      	cmp	r3, r1
 8008e86:	b2c0      	uxtb	r0, r0
 8008e88:	eb02 0c01 	add.w	ip, r2, r1
 8008e8c:	eb06 0501 	add.w	r5, r6, r1
 8008e90:	d00a      	beq.n	8008ea8 <UFCP_Send+0x6c>
 8008e92:	5c53      	ldrb	r3, [r2, r1]
 8008e94:	5473      	strb	r3, [r6, r1]
 8008e96:	b138      	cbz	r0, 8008ea8 <UFCP_Send+0x6c>
 8008e98:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8008e9c:	706b      	strb	r3, [r5, #1]
 8008e9e:	2801      	cmp	r0, #1
 8008ea0:	d002      	beq.n	8008ea8 <UFCP_Send+0x6c>
 8008ea2:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8008ea6:	70ab      	strb	r3, [r5, #2]
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 8008ea8:	f104 0014 	add.w	r0, r4, #20
 8008eac:	f7fe f934 	bl	8007118 <FCP_CalcCRC>
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8008eb0:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 8008eb4:	f884 0096 	strb.w	r0, [r4, #150]	; 0x96

    pHandle->TxFrameLevel = 0;
 8008eb8:	2100      	movs	r1, #0
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 8008eba:	2301      	movs	r3, #1
    pHandle->TxFrameLevel = 0;
 8008ebc:	f884 1098 	strb.w	r1, [r4, #152]	; 0x98
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 8008ec0:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
 8008ec4:	320c      	adds	r2, #12
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ec6:	e852 3f00 	ldrex	r3, [r2]
 8008eca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ece:	e842 3100 	strex	r1, r3, [r2]
 8008ed2:	2900      	cmp	r1, #0
 8008ed4:	d1f7      	bne.n	8008ec6 <UFCP_Send+0x8a>
 8008ed6:	2002      	movs	r0, #2
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
  }

  return ret_val;
}
 8008ed8:	bd70      	pop	{r4, r5, r6, pc}
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 8008eda:	2001      	movs	r0, #1
}
 8008edc:	bd70      	pop	{r4, r5, r6, pc}
 8008ede:	f104 0015 	add.w	r0, r4, #21
 8008ee2:	4413      	add	r3, r2
 8008ee4:	e000      	b.n	8008ee8 <UFCP_Send+0xac>
 8008ee6:	3101      	adds	r1, #1
    while ( size-- ) *dest++ = *buffer++;
 8008ee8:	f811 2c01 	ldrb.w	r2, [r1, #-1]
 8008eec:	f800 2f01 	strb.w	r2, [r0, #1]!
 8008ef0:	4299      	cmp	r1, r3
 8008ef2:	d1f8      	bne.n	8008ee6 <UFCP_Send+0xaa>
 8008ef4:	e7d8      	b.n	8008ea8 <UFCP_Send+0x6c>
 8008ef6:	bf00      	nop

08008ef8 <UFCP_RX_IRQ_Handler>:
  if ( FCP_TRANSFER_IDLE != pBaseHandle->RxFrameState )
 8008ef8:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
 8008efc:	b90b      	cbnz	r3, 8008f02 <UFCP_RX_IRQ_Handler+0xa>
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8008efe:	4831      	ldr	r0, [pc, #196]	; (8008fc4 <UFCP_RX_IRQ_Handler+0xcc>)
}
 8008f00:	4770      	bx	lr
{
 8008f02:	b530      	push	{r4, r5, lr}
    switch ( pBaseHandle->RxFrameLevel )
 8008f04:	f890 311d 	ldrb.w	r3, [r0, #285]	; 0x11d
{
 8008f08:	b083      	sub	sp, #12
 8008f0a:	4604      	mov	r4, r0
    uint8_t rx_byte = (uint8_t) rx_data;
 8008f0c:	fa5f fc81 	uxtb.w	ip, r1
    switch ( pBaseHandle->RxFrameLevel )
 8008f10:	b39b      	cbz	r3, 8008f7a <UFCP_RX_IRQ_Handler+0x82>
 8008f12:	2b01      	cmp	r3, #1
 8008f14:	d03b      	beq.n	8008f8e <UFCP_RX_IRQ_Handler+0x96>
        if ( pBaseHandle->RxFrameLevel < pBaseHandle->RxFrame.Size + FCP_HEADER_SIZE )
 8008f16:	f890 209a 	ldrb.w	r2, [r0, #154]	; 0x9a
 8008f1a:	3201      	adds	r2, #1
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	dc08      	bgt.n	8008f32 <UFCP_RX_IRQ_Handler+0x3a>
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 8008f20:	18c2      	adds	r2, r0, r3
          pBaseHandle->RxFrameLevel++;
 8008f22:	3301      	adds	r3, #1
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8008f24:	4827      	ldr	r0, [pc, #156]	; (8008fc4 <UFCP_RX_IRQ_Handler+0xcc>)
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 8008f26:	f882 c099 	strb.w	ip, [r2, #153]	; 0x99
          pBaseHandle->RxFrameLevel++;
 8008f2a:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
}
 8008f2e:	b003      	add	sp, #12
 8008f30:	bd30      	pop	{r4, r5, pc}
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8008f32:	f8d0 2120 	ldr.w	r2, [r0, #288]	; 0x120
          pBaseHandle->RxFrame.FrameCRC = rx_byte;
 8008f36:	f880 c11b 	strb.w	ip, [r0, #283]	; 0x11b
          pBaseHandle->RxTimeoutCountdown = 0;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	8243      	strh	r3, [r0, #18]
 8008f3e:	320c      	adds	r2, #12
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f40:	e852 3f00 	ldrex	r3, [r2]
 8008f44:	f023 0320 	bic.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f48:	e842 3100 	strex	r1, r3, [r2]
 8008f4c:	2900      	cmp	r1, #0
 8008f4e:	d1f7      	bne.n	8008f40 <UFCP_RX_IRQ_Handler+0x48>
          pBaseHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8008f50:	f884 111c 	strb.w	r1, [r4, #284]	; 0x11c
          if ( FCP_CalcCRC( & pBaseHandle->RxFrame ) == pBaseHandle->RxFrame.FrameCRC )
 8008f54:	f104 0099 	add.w	r0, r4, #153	; 0x99
 8008f58:	f7fe f8de 	bl	8007118 <FCP_CalcCRC>
 8008f5c:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
 8008f60:	4283      	cmp	r3, r0
 8008f62:	d122      	bne.n	8008faa <UFCP_RX_IRQ_Handler+0xb2>
            pBaseHandle->ClientFrameReceivedCallback( pBaseHandle->ClientEntity,
 8008f64:	6820      	ldr	r0, [r4, #0]
 8008f66:	68a5      	ldr	r5, [r4, #8]
 8008f68:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 8008f6c:	f894 1099 	ldrb.w	r1, [r4, #153]	; 0x99
 8008f70:	f104 029b 	add.w	r2, r4, #155	; 0x9b
 8008f74:	47a8      	blx	r5
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 8008f76:	4814      	ldr	r0, [pc, #80]	; (8008fc8 <UFCP_RX_IRQ_Handler+0xd0>)
 8008f78:	e7d9      	b.n	8008f2e <UFCP_RX_IRQ_Handler+0x36>
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 8008f7a:	8a02      	ldrh	r2, [r0, #16]
        ret_val = (void *) & UFCP_Usart_Timeout_start;
 8008f7c:	4813      	ldr	r0, [pc, #76]	; (8008fcc <UFCP_RX_IRQ_Handler+0xd4>)
        pBaseHandle->RxFrame.Code = rx_byte;
 8008f7e:	f884 c099 	strb.w	ip, [r4, #153]	; 0x99
        pBaseHandle->RxFrameLevel++;
 8008f82:	2301      	movs	r3, #1
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 8008f84:	8262      	strh	r2, [r4, #18]
        pBaseHandle->RxFrameLevel++;
 8008f86:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
}
 8008f8a:	b003      	add	sp, #12
 8008f8c:	bd30      	pop	{r4, r5, pc}
        if ( pBaseHandle->RxFrame.Size >= FCP_MAX_PAYLOAD_SIZE)
 8008f8e:	060b      	lsls	r3, r1, #24
        pBaseHandle->RxFrame.Size = rx_byte;
 8008f90:	f880 c09a 	strb.w	ip, [r0, #154]	; 0x9a
        if ( pBaseHandle->RxFrame.Size >= FCP_MAX_PAYLOAD_SIZE)
 8008f94:	d404      	bmi.n	8008fa0 <UFCP_RX_IRQ_Handler+0xa8>
        pBaseHandle->RxFrameLevel++;
 8008f96:	2302      	movs	r3, #2
 8008f98:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8008f9c:	4809      	ldr	r0, [pc, #36]	; (8008fc4 <UFCP_RX_IRQ_Handler+0xcc>)
 8008f9e:	e7c6      	b.n	8008f2e <UFCP_RX_IRQ_Handler+0x36>
          pBaseHandle->RxFrameLevel =0 ;
 8008fa0:	2300      	movs	r3, #0
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8008fa2:	4808      	ldr	r0, [pc, #32]	; (8008fc4 <UFCP_RX_IRQ_Handler+0xcc>)
          pBaseHandle->RxFrameLevel =0 ;
 8008fa4:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
 8008fa8:	e7c1      	b.n	8008f2e <UFCP_RX_IRQ_Handler+0x36>
            error_code = FCP_MSG_RX_BAD_CRC;
 8008faa:	250a      	movs	r5, #10
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8008fac:	2301      	movs	r3, #1
 8008fae:	f10d 0207 	add.w	r2, sp, #7
 8008fb2:	21ff      	movs	r1, #255	; 0xff
 8008fb4:	4620      	mov	r0, r4
            error_code = FCP_MSG_RX_BAD_CRC;
 8008fb6:	f88d 5007 	strb.w	r5, [sp, #7]
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8008fba:	f7ff ff3f 	bl	8008e3c <UFCP_Send>
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 8008fbe:	4802      	ldr	r0, [pc, #8]	; (8008fc8 <UFCP_RX_IRQ_Handler+0xd0>)
  return ret_val;
 8008fc0:	e7b5      	b.n	8008f2e <UFCP_RX_IRQ_Handler+0x36>
 8008fc2:	bf00      	nop
 8008fc4:	08009784 	.word	0x08009784
 8008fc8:	08009788 	.word	0x08009788
 8008fcc:	08009786 	.word	0x08009786

08008fd0 <UFCP_OVR_IRQ_Handler>:
{
 8008fd0:	b500      	push	{lr}
 8008fd2:	b083      	sub	sp, #12
  error_code = UFCP_MSG_OVERRUN;
 8008fd4:	f04f 0c08 	mov.w	ip, #8
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8008fd8:	2301      	movs	r3, #1
 8008fda:	f10d 0207 	add.w	r2, sp, #7
 8008fde:	21ff      	movs	r1, #255	; 0xff
  error_code = UFCP_MSG_OVERRUN;
 8008fe0:	f88d c007 	strb.w	ip, [sp, #7]
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8008fe4:	f7ff ff2a 	bl	8008e3c <UFCP_Send>
}
 8008fe8:	b003      	add	sp, #12
 8008fea:	f85d fb04 	ldr.w	pc, [sp], #4
 8008fee:	bf00      	nop

08008ff0 <UFCP_AbortReceive>:

__weak void UFCP_AbortReceive( FCP_Handle_t * pHandle )
{
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	f880 311c 	strb.w	r3, [r0, #284]	; 0x11c
}
 8008ff6:	4770      	bx	lr

08008ff8 <POWER_CONTROL_CONFG>:
POWER_State_t state_Handler;
Power_Control_Heartbeat protocolHandler;

void POWER_CONTROL_CONFG(POWER_Control *cmd)
{
	pwrControl = cmd;
 8008ff8:	4b01      	ldr	r3, [pc, #4]	; (8009000 <POWER_CONTROL_CONFG+0x8>)
 8008ffa:	6018      	str	r0, [r3, #0]
}
 8008ffc:	4770      	bx	lr
 8008ffe:	bf00      	nop
 8009000:	20004fe8 	.word	0x20004fe8

08009004 <POWER_INDICATOR_CONFG>:

void POWER_INDICATOR_CONFG(Power_Status_Indicator *indicator)
{
	tailLightControl = indicator;
}
 8009004:	4770      	bx	lr
 8009006:	bf00      	nop

08009008 <POWER_RETRANSMIT_CTL_CONFG>:

void POWER_RETRANSMIT_CTL_CONFG(Power_sysProtocol_Handler *reTransTIM)
{
    reTransMgnt = reTransTIM;
 8009008:	4b01      	ldr	r3, [pc, #4]	; (8009010 <POWER_RETRANSMIT_CTL_CONFG+0x8>)
 800900a:	6018      	str	r0, [r3, #0]
}
 800900c:	4770      	bx	lr
 800900e:	bf00      	nop
 8009010:	20004fec 	.word	0x20004fec

08009014 <POWER_SET_DEFAULT_STATE>:

void POWER_SET_DEFAULT_STATE(POWER_State_t state)
{
	state_Handler = state;
 8009014:	4b01      	ldr	r3, [pc, #4]	; (800901c <POWER_SET_DEFAULT_STATE+0x8>)
 8009016:	7018      	strb	r0, [r3, #0]
}
 8009018:	4770      	bx	lr
 800901a:	bf00      	nop
 800901c:	20004ff0 	.word	0x20004ff0

08009020 <POWER_CHANGE_STATE>:
 8009020:	4b01      	ldr	r3, [pc, #4]	; (8009028 <POWER_CHANGE_STATE+0x8>)
 8009022:	7018      	strb	r0, [r3, #0]
 8009024:	4770      	bx	lr
 8009026:	bf00      	nop
 8009028:	20004ff0 	.word	0x20004ff0

0800902c <Stop_RetransmissionTimer>:
}

void Stop_RetransmissionTimer()
{
	protocolHandler.RxPacketLossCount = 0;
	reTransMgnt->reTransmissionOff();
 800902c:	4b03      	ldr	r3, [pc, #12]	; (800903c <Stop_RetransmissionTimer+0x10>)
	protocolHandler.RxPacketLossCount = 0;
 800902e:	4a04      	ldr	r2, [pc, #16]	; (8009040 <Stop_RetransmissionTimer+0x14>)
	reTransMgnt->reTransmissionOff();
 8009030:	681b      	ldr	r3, [r3, #0]
	protocolHandler.RxPacketLossCount = 0;
 8009032:	2100      	movs	r1, #0
	reTransMgnt->reTransmissionOff();
 8009034:	685b      	ldr	r3, [r3, #4]
	protocolHandler.RxPacketLossCount = 0;
 8009036:	7051      	strb	r1, [r2, #1]
	reTransMgnt->reTransmissionOff();
 8009038:	4718      	bx	r3
 800903a:	bf00      	nop
 800903c:	20004fec 	.word	0x20004fec
 8009040:	20004fe4 	.word	0x20004fe4

08009044 <retransmissionTimerStart>:
}

void retransmissionTimerStart()
{
	reTransMgnt->reTransmissionOn();
 8009044:	4b01      	ldr	r3, [pc, #4]	; (800904c <retransmissionTimerStart+0x8>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	4718      	bx	r3
 800904c:	20004fec 	.word	0x20004fec

08009050 <PacketLossCount>:
}


void PacketLossCount()
{
   protocolHandler.RxPacketLossCount++;
 8009050:	4a02      	ldr	r2, [pc, #8]	; (800905c <PacketLossCount+0xc>)
 8009052:	7853      	ldrb	r3, [r2, #1]
 8009054:	3301      	adds	r3, #1
 8009056:	7053      	strb	r3, [r2, #1]
}
 8009058:	4770      	bx	lr
 800905a:	bf00      	nop
 800905c:	20004fe4 	.word	0x20004fe4

08009060 <POWER_PACKET_ACK>:

void POWER_PACKET_ACK()
{
	protocolHandler.RxPacketLossCount = 0;
 8009060:	4b01      	ldr	r3, [pc, #4]	; (8009068 <POWER_PACKET_ACK+0x8>)
 8009062:	2200      	movs	r2, #0
 8009064:	705a      	strb	r2, [r3, #1]
}
 8009066:	4770      	bx	lr
 8009068:	20004fe4 	.word	0x20004fe4

0800906c <POWER_PROTOCOL_CHECKSTATUS>:

void POWER_PROTOCOL_CHECKSTATUS()
{
    if(protocolHandler.RxPacketLossCount == 0)
 800906c:	4a05      	ldr	r2, [pc, #20]	; (8009084 <POWER_PROTOCOL_CHECKSTATUS+0x18>)
 800906e:	7853      	ldrb	r3, [r2, #1]
 8009070:	b90b      	cbnz	r3, 8009076 <POWER_PROTOCOL_CHECKSTATUS+0xa>
    {
    	protocolHandler.protocolFailure = false;
 8009072:	7013      	strb	r3, [r2, #0]
 8009074:	4770      	bx	lr
    }
    else if(protocolHandler.RxPacketLossCount != 0)
    {
    	if(protocolHandler.RxPacketLossCount > MAXIMUM_PACKET_RETRANSMIT)
 8009076:	2b0a      	cmp	r3, #10
 8009078:	d800      	bhi.n	800907c <POWER_PROTOCOL_CHECKSTATUS+0x10>
             * --> Automatically Power Off
             * */

    	}
    }
}
 800907a:	4770      	bx	lr
            protocolHandler.protocolFailure = true;
 800907c:	2001      	movs	r0, #1
 800907e:	7010      	strb	r0, [r2, #0]
            ESCOOTER_SendReportStatus(true);
 8009080:	f7fb be32 	b.w	8004ce8 <ESCOOTER_SendReportStatus>
 8009084:	20004fe4 	.word	0x20004fe4

08009088 <POWER_CTL_MONITORING>:
{
	pwrControl->wake();
}

void POWER_CTL_MONITORING(void const *argument)
{
 8009088:	b508      	push	{r3, lr}
 800908a:	4d0a      	ldr	r5, [pc, #40]	; (80090b4 <POWER_CTL_MONITORING+0x2c>)
 800908c:	4c0a      	ldr	r4, [pc, #40]	; (80090b8 <POWER_CTL_MONITORING+0x30>)
	for(;;)
	{
		switch(state_Handler)
 800908e:	782b      	ldrb	r3, [r5, #0]
 8009090:	2b01      	cmp	r3, #1
 8009092:	d00b      	beq.n	80090ac <POWER_CTL_MONITORING+0x24>
 8009094:	2b02      	cmp	r3, #2
 8009096:	d005      	beq.n	80090a4 <POWER_CTL_MONITORING+0x1c>
 8009098:	2b00      	cmp	r3, #0
 800909a:	d1f9      	bne.n	8009090 <POWER_CTL_MONITORING+0x8>
		{
		    case POWER_OFF:
		    	pwrControl -> sleep();
 800909c:	6823      	ldr	r3, [r4, #0]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4798      	blx	r3
		    	break;
 80090a2:	e7f4      	b.n	800908e <POWER_CTL_MONITORING+0x6>
		    case POWER_ON:
		    	pwrControl -> powerOn();
		    	break;

		    case WAKEUP:
		    	pwrControl -> wake();
 80090a4:	6823      	ldr	r3, [r4, #0]
 80090a6:	685b      	ldr	r3, [r3, #4]
 80090a8:	4798      	blx	r3
 80090aa:	e7f0      	b.n	800908e <POWER_CTL_MONITORING+0x6>
		    	pwrControl -> powerOn();
 80090ac:	6823      	ldr	r3, [r4, #0]
 80090ae:	689b      	ldr	r3, [r3, #8]
 80090b0:	4798      	blx	r3
		    	break;
 80090b2:	e7ec      	b.n	800908e <POWER_CTL_MONITORING+0x6>
 80090b4:	20004ff0 	.word	0x20004ff0
 80090b8:	20004fe8 	.word	0x20004fe8

080090bc <SYSTEM_INDICATOR_ON>:
}

static void SYSTEM_INDICATOR_ON()
{

}
 80090bc:	4770      	bx	lr
 80090be:	bf00      	nop

080090c0 <SYSTEM_START_RETRANSMISSION_TIMER>:
}

static void SYSTEM_START_RETRANSMISSION_TIMER()
{
	//Enable the TIM3 CLOCK
   RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 80090c0:	4917      	ldr	r1, [pc, #92]	; (8009120 <SYSTEM_START_RETRANSMISSION_TIMER+0x60>)

   /*Config for the prescalar + auto reload register*/
   TIM3->PSC = 10000;  /*Pre-scalar*/
 80090c2:	4b18      	ldr	r3, [pc, #96]	; (8009124 <SYSTEM_START_RETRANSMISSION_TIMER+0x64>)
   RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 80090c4:	6c0a      	ldr	r2, [r1, #64]	; 0x40
{
 80090c6:	b410      	push	{r4}
   RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 80090c8:	f042 0202 	orr.w	r2, r2, #2
   TIM3->PSC = 10000;  /*Pre-scalar*/
 80090cc:	f242 7410 	movw	r4, #10000	; 0x2710
   TIM3->ARR = 8400;   /*Auto reload register*/
 80090d0:	f242 00d0 	movw	r0, #8400	; 0x20d0
   RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 80090d4:	640a      	str	r2, [r1, #64]	; 0x40
   TIM3->PSC = 10000;  /*Pre-scalar*/
 80090d6:	629c      	str	r4, [r3, #40]	; 0x28
   TIM3->ARR = 8400;   /*Auto reload register*/
 80090d8:	62d8      	str	r0, [r3, #44]	; 0x2c

   /*Set up the CounterMode: Up*/
   TIM3->CR1 &= ~TIM_CR1_DIR;
 80090da:	681a      	ldr	r2, [r3, #0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80090dc:	4912      	ldr	r1, [pc, #72]	; (8009128 <SYSTEM_START_RETRANSMISSION_TIMER+0x68>)
 80090de:	f022 0210 	bic.w	r2, r2, #16
 80090e2:	601a      	str	r2, [r3, #0]

   /*Setup the clock division as 1*/
   TIM3->CR1 |= TIM_CR1_CKD_1;
 80090e4:	681a      	ldr	r2, [r3, #0]
 80090e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80090ea:	601a      	str	r2, [r3, #0]

   /*Auto-Reload Pre-load Disable! */
   TIM3->CR1 &= ~TIM_CR1_ARPE;
 80090ec:	681a      	ldr	r2, [r3, #0]
 80090ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80090f2:	601a      	str	r2, [r3, #0]

   /*Setup the Clock Source as Internal Clock*/
   TIM3->SMCR &= ~TIM_SMCR_SMS;
 80090f4:	689a      	ldr	r2, [r3, #8]
 80090f6:	f022 0207 	bic.w	r2, r2, #7
 80090fa:	609a      	str	r2, [r3, #8]

   /*Enable the Interrupt*/
   TIM3->DIER |= TIM_DIER_UIE;
 80090fc:	68da      	ldr	r2, [r3, #12]
 80090fe:	f04f 0ca0 	mov.w	ip, #160	; 0xa0
 8009102:	f042 0201 	orr.w	r2, r2, #1
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009106:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 800910a:	60da      	str	r2, [r3, #12]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800910c:	f881 c31d 	strb.w	ip, [r1, #797]	; 0x31d
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009110:	6008      	str	r0, [r1, #0]
   NVIC_SetPriority(TIM3_IRQn, 10);

   NVIC_EnableIRQ(TIM3_IRQn);

   /*Start the timer*/
   TIM3->CR1 |= TIM_CR1_CEN;
 8009112:	681a      	ldr	r2, [r3, #0]
}
 8009114:	f85d 4b04 	ldr.w	r4, [sp], #4
   TIM3->CR1 |= TIM_CR1_CEN;
 8009118:	f042 0201 	orr.w	r2, r2, #1
 800911c:	601a      	str	r2, [r3, #0]
}
 800911e:	4770      	bx	lr
 8009120:	40023800 	.word	0x40023800
 8009124:	40000400 	.word	0x40000400
 8009128:	e000e100 	.word	0xe000e100

0800912c <SYSTEM_STOP_RETRANSMISSION_TIMER>:

static void SYSTEM_STOP_RETRANSMISSION_TIMER()
{
   /*Stop the timer*/
   TIM3->CR1 &= ~TIM_CR1_CEN;
 800912c:	4b04      	ldr	r3, [pc, #16]	; (8009140 <SYSTEM_STOP_RETRANSMISSION_TIMER+0x14>)
 800912e:	681a      	ldr	r2, [r3, #0]
 8009130:	f022 0201 	bic.w	r2, r2, #1
 8009134:	601a      	str	r2, [r3, #0]

   /*Disable the Interrupt*/
   TIM3->DIER &= ~TIM_DIER_UIE;
 8009136:	68da      	ldr	r2, [r3, #12]
 8009138:	f022 0201 	bic.w	r2, r2, #1
 800913c:	60da      	str	r2, [r3, #12]
}
 800913e:	4770      	bx	lr
 8009140:	40000400 	.word	0x40000400

08009144 <SYSTEM_POWER_ON>:
	power = 1;
 8009144:	4b02      	ldr	r3, [pc, #8]	; (8009150 <SYSTEM_POWER_ON+0xc>)
 8009146:	2201      	movs	r2, #1
 8009148:	701a      	strb	r2, [r3, #0]
	POWER_PROTOCOL_CHECKSTATUS();
 800914a:	f7ff bf8f 	b.w	800906c <POWER_PROTOCOL_CHECKSTATUS>
 800914e:	bf00      	nop
 8009150:	20004ff8 	.word	0x20004ff8

08009154 <SYSTEM_BOOT>:
	HAL_NVIC_SystemReset();
 8009154:	f7fa ba9e 	b.w	8003694 <HAL_NVIC_SystemReset>

08009158 <SYSTEM_POWER_OFF>:
{
 8009158:	b508      	push	{r3, lr}
	Stop_RetransmissionTimer();
 800915a:	f7ff ff67 	bl	800902c <Stop_RetransmissionTimer>
	ESCOOTER_StopCoreTask();
 800915e:	f7fb ff3d 	bl	8004fdc <ESCOOTER_StopCoreTask>
	suspend_SystemTask();
 8009162:	f7f7 fcbb 	bl	8000adc <suspend_SystemTask>
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON,PWR_SLEEPENTRY_WFI);
 8009166:	2101      	movs	r1, #1
}
 8009168:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON,PWR_SLEEPENTRY_WFI);
 800916c:	4608      	mov	r0, r1
 800916e:	f7fa bbbd 	b.w	80038ec <HAL_PWR_EnterSTOPMode>
 8009172:	bf00      	nop

08009174 <SYSTEM_INDICATOR_OFF>:
 8009174:	4770      	bx	lr
 8009176:	bf00      	nop

08009178 <POWER_CONTROL_Init>:
{
 8009178:	b508      	push	{r3, lr}
	POWER_CONTROL_CONFG(&power_control);
 800917a:	4807      	ldr	r0, [pc, #28]	; (8009198 <POWER_CONTROL_Init+0x20>)
 800917c:	f7ff ff3c 	bl	8008ff8 <POWER_CONTROL_CONFG>
	POWER_INDICATOR_CONFG(&power_status_indicator);
 8009180:	4806      	ldr	r0, [pc, #24]	; (800919c <POWER_CONTROL_Init+0x24>)
 8009182:	f7ff ff3f 	bl	8009004 <POWER_INDICATOR_CONFG>
	POWER_RETRANSMIT_CTL_CONFG(&protocol_control);
 8009186:	4806      	ldr	r0, [pc, #24]	; (80091a0 <POWER_CONTROL_Init+0x28>)
 8009188:	f7ff ff3e 	bl	8009008 <POWER_RETRANSMIT_CTL_CONFG>
}
 800918c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	POWER_SET_DEFAULT_STATE(POWER_ON);
 8009190:	2001      	movs	r0, #1
 8009192:	f7ff bf3f 	b.w	8009014 <POWER_SET_DEFAULT_STATE>
 8009196:	bf00      	nop
 8009198:	2000058c 	.word	0x2000058c
 800919c:	20000598 	.word	0x20000598
 80091a0:	200005a0 	.word	0x200005a0

080091a4 <POWER_CONTROL_START_MONITORING>:
{
 80091a4:	b510      	push	{r4, lr}
	osThreadDef(PowerStateMachine, POWER_CTL_MONITORING, osPriorityBelowNormal,0,128);
 80091a6:	4c09      	ldr	r4, [pc, #36]	; (80091cc <POWER_CONTROL_START_MONITORING+0x28>)
 80091a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
{
 80091aa:	b088      	sub	sp, #32
	osThreadDef(PowerStateMachine, POWER_CTL_MONITORING, osPriorityBelowNormal,0,128);
 80091ac:	f10d 0c04 	add.w	ip, sp, #4
 80091b0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80091b4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80091b8:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
	PowerControlHandler = osThreadCreate(osThread(PowerStateMachine),NULL);
 80091bc:	2100      	movs	r1, #0
 80091be:	a801      	add	r0, sp, #4
 80091c0:	f7fb ff24 	bl	800500c <osThreadCreate>
 80091c4:	4b02      	ldr	r3, [pc, #8]	; (80091d0 <POWER_CONTROL_START_MONITORING+0x2c>)
 80091c6:	6018      	str	r0, [r3, #0]
}
 80091c8:	b008      	add	sp, #32
 80091ca:	bd10      	pop	{r4, pc}
 80091cc:	08009478 	.word	0x08009478
 80091d0:	20004ff4 	.word	0x20004ff4

080091d4 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 80091d4:	b510      	push	{r4, lr}
	if(TIM3->SR & TIM_SR_UIF)
 80091d6:	4c06      	ldr	r4, [pc, #24]	; (80091f0 <TIM3_IRQHandler+0x1c>)
 80091d8:	6923      	ldr	r3, [r4, #16]
 80091da:	07db      	lsls	r3, r3, #31
 80091dc:	d400      	bmi.n	80091e0 <TIM3_IRQHandler+0xc>
	{
		PacketLossCount();
		TIM3->SR &= ~TIM_SR_UIF;
	}
}
 80091de:	bd10      	pop	{r4, pc}
		PacketLossCount();
 80091e0:	f7ff ff36 	bl	8009050 <PacketLossCount>
		TIM3->SR &= ~TIM_SR_UIF;
 80091e4:	6923      	ldr	r3, [r4, #16]
 80091e6:	f023 0301 	bic.w	r3, r3, #1
 80091ea:	6123      	str	r3, [r4, #16]
}
 80091ec:	bd10      	pop	{r4, pc}
 80091ee:	bf00      	nop
 80091f0:	40000400 	.word	0x40000400

080091f4 <__libc_init_array>:
 80091f4:	b570      	push	{r4, r5, r6, lr}
 80091f6:	4d0d      	ldr	r5, [pc, #52]	; (800922c <__libc_init_array+0x38>)
 80091f8:	4c0d      	ldr	r4, [pc, #52]	; (8009230 <__libc_init_array+0x3c>)
 80091fa:	1b64      	subs	r4, r4, r5
 80091fc:	10a4      	asrs	r4, r4, #2
 80091fe:	2600      	movs	r6, #0
 8009200:	42a6      	cmp	r6, r4
 8009202:	d109      	bne.n	8009218 <__libc_init_array+0x24>
 8009204:	4d0b      	ldr	r5, [pc, #44]	; (8009234 <__libc_init_array+0x40>)
 8009206:	4c0c      	ldr	r4, [pc, #48]	; (8009238 <__libc_init_array+0x44>)
 8009208:	f000 f8f2 	bl	80093f0 <_init>
 800920c:	1b64      	subs	r4, r4, r5
 800920e:	10a4      	asrs	r4, r4, #2
 8009210:	2600      	movs	r6, #0
 8009212:	42a6      	cmp	r6, r4
 8009214:	d105      	bne.n	8009222 <__libc_init_array+0x2e>
 8009216:	bd70      	pop	{r4, r5, r6, pc}
 8009218:	f855 3b04 	ldr.w	r3, [r5], #4
 800921c:	4798      	blx	r3
 800921e:	3601      	adds	r6, #1
 8009220:	e7ee      	b.n	8009200 <__libc_init_array+0xc>
 8009222:	f855 3b04 	ldr.w	r3, [r5], #4
 8009226:	4798      	blx	r3
 8009228:	3601      	adds	r6, #1
 800922a:	e7f2      	b.n	8009212 <__libc_init_array+0x1e>
 800922c:	08009808 	.word	0x08009808
 8009230:	08009808 	.word	0x08009808
 8009234:	08009808 	.word	0x08009808
 8009238:	0800980c 	.word	0x0800980c

0800923c <__retarget_lock_acquire_recursive>:
 800923c:	4770      	bx	lr

0800923e <__retarget_lock_release_recursive>:
 800923e:	4770      	bx	lr

08009240 <memcpy>:
 8009240:	440a      	add	r2, r1
 8009242:	4291      	cmp	r1, r2
 8009244:	f100 33ff 	add.w	r3, r0, #4294967295
 8009248:	d100      	bne.n	800924c <memcpy+0xc>
 800924a:	4770      	bx	lr
 800924c:	b510      	push	{r4, lr}
 800924e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009252:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009256:	4291      	cmp	r1, r2
 8009258:	d1f9      	bne.n	800924e <memcpy+0xe>
 800925a:	bd10      	pop	{r4, pc}

0800925c <memset>:
 800925c:	4402      	add	r2, r0
 800925e:	4603      	mov	r3, r0
 8009260:	4293      	cmp	r3, r2
 8009262:	d100      	bne.n	8009266 <memset+0xa>
 8009264:	4770      	bx	lr
 8009266:	f803 1b01 	strb.w	r1, [r3], #1
 800926a:	e7f9      	b.n	8009260 <memset+0x4>

0800926c <cleanup_glue>:
 800926c:	b538      	push	{r3, r4, r5, lr}
 800926e:	460c      	mov	r4, r1
 8009270:	6809      	ldr	r1, [r1, #0]
 8009272:	4605      	mov	r5, r0
 8009274:	b109      	cbz	r1, 800927a <cleanup_glue+0xe>
 8009276:	f7ff fff9 	bl	800926c <cleanup_glue>
 800927a:	4621      	mov	r1, r4
 800927c:	4628      	mov	r0, r5
 800927e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009282:	f000 b869 	b.w	8009358 <_free_r>
	...

08009288 <_reclaim_reent>:
 8009288:	4b2c      	ldr	r3, [pc, #176]	; (800933c <_reclaim_reent+0xb4>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	4283      	cmp	r3, r0
 800928e:	b570      	push	{r4, r5, r6, lr}
 8009290:	4604      	mov	r4, r0
 8009292:	d051      	beq.n	8009338 <_reclaim_reent+0xb0>
 8009294:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009296:	b143      	cbz	r3, 80092aa <_reclaim_reent+0x22>
 8009298:	68db      	ldr	r3, [r3, #12]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d14a      	bne.n	8009334 <_reclaim_reent+0xac>
 800929e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80092a0:	6819      	ldr	r1, [r3, #0]
 80092a2:	b111      	cbz	r1, 80092aa <_reclaim_reent+0x22>
 80092a4:	4620      	mov	r0, r4
 80092a6:	f000 f857 	bl	8009358 <_free_r>
 80092aa:	6961      	ldr	r1, [r4, #20]
 80092ac:	b111      	cbz	r1, 80092b4 <_reclaim_reent+0x2c>
 80092ae:	4620      	mov	r0, r4
 80092b0:	f000 f852 	bl	8009358 <_free_r>
 80092b4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80092b6:	b111      	cbz	r1, 80092be <_reclaim_reent+0x36>
 80092b8:	4620      	mov	r0, r4
 80092ba:	f000 f84d 	bl	8009358 <_free_r>
 80092be:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80092c0:	b111      	cbz	r1, 80092c8 <_reclaim_reent+0x40>
 80092c2:	4620      	mov	r0, r4
 80092c4:	f000 f848 	bl	8009358 <_free_r>
 80092c8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80092ca:	b111      	cbz	r1, 80092d2 <_reclaim_reent+0x4a>
 80092cc:	4620      	mov	r0, r4
 80092ce:	f000 f843 	bl	8009358 <_free_r>
 80092d2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80092d4:	b111      	cbz	r1, 80092dc <_reclaim_reent+0x54>
 80092d6:	4620      	mov	r0, r4
 80092d8:	f000 f83e 	bl	8009358 <_free_r>
 80092dc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80092de:	b111      	cbz	r1, 80092e6 <_reclaim_reent+0x5e>
 80092e0:	4620      	mov	r0, r4
 80092e2:	f000 f839 	bl	8009358 <_free_r>
 80092e6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80092e8:	b111      	cbz	r1, 80092f0 <_reclaim_reent+0x68>
 80092ea:	4620      	mov	r0, r4
 80092ec:	f000 f834 	bl	8009358 <_free_r>
 80092f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80092f2:	b111      	cbz	r1, 80092fa <_reclaim_reent+0x72>
 80092f4:	4620      	mov	r0, r4
 80092f6:	f000 f82f 	bl	8009358 <_free_r>
 80092fa:	69a3      	ldr	r3, [r4, #24]
 80092fc:	b1e3      	cbz	r3, 8009338 <_reclaim_reent+0xb0>
 80092fe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009300:	4620      	mov	r0, r4
 8009302:	4798      	blx	r3
 8009304:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009306:	b1b9      	cbz	r1, 8009338 <_reclaim_reent+0xb0>
 8009308:	4620      	mov	r0, r4
 800930a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800930e:	f7ff bfad 	b.w	800926c <cleanup_glue>
 8009312:	5949      	ldr	r1, [r1, r5]
 8009314:	b941      	cbnz	r1, 8009328 <_reclaim_reent+0xa0>
 8009316:	3504      	adds	r5, #4
 8009318:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800931a:	2d80      	cmp	r5, #128	; 0x80
 800931c:	68d9      	ldr	r1, [r3, #12]
 800931e:	d1f8      	bne.n	8009312 <_reclaim_reent+0x8a>
 8009320:	4620      	mov	r0, r4
 8009322:	f000 f819 	bl	8009358 <_free_r>
 8009326:	e7ba      	b.n	800929e <_reclaim_reent+0x16>
 8009328:	680e      	ldr	r6, [r1, #0]
 800932a:	4620      	mov	r0, r4
 800932c:	f000 f814 	bl	8009358 <_free_r>
 8009330:	4631      	mov	r1, r6
 8009332:	e7ef      	b.n	8009314 <_reclaim_reent+0x8c>
 8009334:	2500      	movs	r5, #0
 8009336:	e7ef      	b.n	8009318 <_reclaim_reent+0x90>
 8009338:	bd70      	pop	{r4, r5, r6, pc}
 800933a:	bf00      	nop
 800933c:	200005a8 	.word	0x200005a8

08009340 <__malloc_lock>:
 8009340:	4801      	ldr	r0, [pc, #4]	; (8009348 <__malloc_lock+0x8>)
 8009342:	f7ff bf7b 	b.w	800923c <__retarget_lock_acquire_recursive>
 8009346:	bf00      	nop
 8009348:	20004ff9 	.word	0x20004ff9

0800934c <__malloc_unlock>:
 800934c:	4801      	ldr	r0, [pc, #4]	; (8009354 <__malloc_unlock+0x8>)
 800934e:	f7ff bf76 	b.w	800923e <__retarget_lock_release_recursive>
 8009352:	bf00      	nop
 8009354:	20004ff9 	.word	0x20004ff9

08009358 <_free_r>:
 8009358:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800935a:	2900      	cmp	r1, #0
 800935c:	d044      	beq.n	80093e8 <_free_r+0x90>
 800935e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009362:	9001      	str	r0, [sp, #4]
 8009364:	2b00      	cmp	r3, #0
 8009366:	f1a1 0404 	sub.w	r4, r1, #4
 800936a:	bfb8      	it	lt
 800936c:	18e4      	addlt	r4, r4, r3
 800936e:	f7ff ffe7 	bl	8009340 <__malloc_lock>
 8009372:	4a1e      	ldr	r2, [pc, #120]	; (80093ec <_free_r+0x94>)
 8009374:	9801      	ldr	r0, [sp, #4]
 8009376:	6813      	ldr	r3, [r2, #0]
 8009378:	b933      	cbnz	r3, 8009388 <_free_r+0x30>
 800937a:	6063      	str	r3, [r4, #4]
 800937c:	6014      	str	r4, [r2, #0]
 800937e:	b003      	add	sp, #12
 8009380:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009384:	f7ff bfe2 	b.w	800934c <__malloc_unlock>
 8009388:	42a3      	cmp	r3, r4
 800938a:	d908      	bls.n	800939e <_free_r+0x46>
 800938c:	6825      	ldr	r5, [r4, #0]
 800938e:	1961      	adds	r1, r4, r5
 8009390:	428b      	cmp	r3, r1
 8009392:	bf01      	itttt	eq
 8009394:	6819      	ldreq	r1, [r3, #0]
 8009396:	685b      	ldreq	r3, [r3, #4]
 8009398:	1949      	addeq	r1, r1, r5
 800939a:	6021      	streq	r1, [r4, #0]
 800939c:	e7ed      	b.n	800937a <_free_r+0x22>
 800939e:	461a      	mov	r2, r3
 80093a0:	685b      	ldr	r3, [r3, #4]
 80093a2:	b10b      	cbz	r3, 80093a8 <_free_r+0x50>
 80093a4:	42a3      	cmp	r3, r4
 80093a6:	d9fa      	bls.n	800939e <_free_r+0x46>
 80093a8:	6811      	ldr	r1, [r2, #0]
 80093aa:	1855      	adds	r5, r2, r1
 80093ac:	42a5      	cmp	r5, r4
 80093ae:	d10b      	bne.n	80093c8 <_free_r+0x70>
 80093b0:	6824      	ldr	r4, [r4, #0]
 80093b2:	4421      	add	r1, r4
 80093b4:	1854      	adds	r4, r2, r1
 80093b6:	42a3      	cmp	r3, r4
 80093b8:	6011      	str	r1, [r2, #0]
 80093ba:	d1e0      	bne.n	800937e <_free_r+0x26>
 80093bc:	681c      	ldr	r4, [r3, #0]
 80093be:	685b      	ldr	r3, [r3, #4]
 80093c0:	6053      	str	r3, [r2, #4]
 80093c2:	4421      	add	r1, r4
 80093c4:	6011      	str	r1, [r2, #0]
 80093c6:	e7da      	b.n	800937e <_free_r+0x26>
 80093c8:	d902      	bls.n	80093d0 <_free_r+0x78>
 80093ca:	230c      	movs	r3, #12
 80093cc:	6003      	str	r3, [r0, #0]
 80093ce:	e7d6      	b.n	800937e <_free_r+0x26>
 80093d0:	6825      	ldr	r5, [r4, #0]
 80093d2:	1961      	adds	r1, r4, r5
 80093d4:	428b      	cmp	r3, r1
 80093d6:	bf04      	itt	eq
 80093d8:	6819      	ldreq	r1, [r3, #0]
 80093da:	685b      	ldreq	r3, [r3, #4]
 80093dc:	6063      	str	r3, [r4, #4]
 80093de:	bf04      	itt	eq
 80093e0:	1949      	addeq	r1, r1, r5
 80093e2:	6021      	streq	r1, [r4, #0]
 80093e4:	6054      	str	r4, [r2, #4]
 80093e6:	e7ca      	b.n	800937e <_free_r+0x26>
 80093e8:	b003      	add	sp, #12
 80093ea:	bd30      	pop	{r4, r5, pc}
 80093ec:	20004ffc 	.word	0x20004ffc

080093f0 <_init>:
 80093f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093f2:	bf00      	nop
 80093f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093f6:	bc08      	pop	{r3}
 80093f8:	469e      	mov	lr, r3
 80093fa:	4770      	bx	lr

080093fc <_fini>:
 80093fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093fe:	bf00      	nop
 8009400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009402:	bc08      	pop	{r3}
 8009404:	469e      	mov	lr, r3
 8009406:	4770      	bx	lr
